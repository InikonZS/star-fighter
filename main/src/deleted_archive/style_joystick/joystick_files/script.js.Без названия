/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/ansi-html/index.js":
/*!*****************************************!*\
  !*** ./node_modules/ansi-html/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var R = typeof Reflect === 'object' ? Reflect : null
var ReflectApply = R && typeof R.apply === 'function'
  ? R.apply
  : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
  }

var ReflectOwnKeys
if (R && typeof R.ownKeys === 'function') {
  ReflectOwnKeys = R.ownKeys
} else if (Object.getOwnPropertySymbols) {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target)
      .concat(Object.getOwnPropertySymbols(target));
  };
} else {
  ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
  };
}

function ProcessEmitWarning(warning) {
  if (console && console.warn) console.warn(warning);
}

var NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
  return value !== value;
}

function EventEmitter() {
  EventEmitter.init.call(this);
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;

function checkListener(listener) {
  if (typeof listener !== 'function') {
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
  }
}

Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
  enumerable: true,
  get: function() {
    return defaultMaxListeners;
  },
  set: function(arg) {
    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
    }
    defaultMaxListeners = arg;
  }
});

EventEmitter.init = function() {

  if (this._events === undefined ||
      this._events === Object.getPrototypeOf(this)._events) {
    this._events = Object.create(null);
    this._eventsCount = 0;
  }

  this._maxListeners = this._maxListeners || undefined;
};

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
  }
  this._maxListeners = n;
  return this;
};

function _getMaxListeners(that) {
  if (that._maxListeners === undefined)
    return EventEmitter.defaultMaxListeners;
  return that._maxListeners;
}

EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
  return _getMaxListeners(this);
};

EventEmitter.prototype.emit = function emit(type) {
  var args = [];
  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
  var doError = (type === 'error');

  var events = this._events;
  if (events !== undefined)
    doError = (doError && events.error === undefined);
  else if (!doError)
    return false;

  // If there is no 'error' event listener then throw.
  if (doError) {
    var er;
    if (args.length > 0)
      er = args[0];
    if (er instanceof Error) {
      // Note: The comments on the `throw` lines are intentional, they show
      // up in Node's output if this results in an unhandled exception.
      throw er; // Unhandled 'error' event
    }
    // At least give some kind of context to the user
    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
    err.context = er;
    throw err; // Unhandled 'error' event
  }

  var handler = events[type];

  if (handler === undefined)
    return false;

  if (typeof handler === 'function') {
    ReflectApply(handler, this, args);
  } else {
    var len = handler.length;
    var listeners = arrayClone(handler, len);
    for (var i = 0; i < len; ++i)
      ReflectApply(listeners[i], this, args);
  }

  return true;
};

function _addListener(target, type, listener, prepend) {
  var m;
  var events;
  var existing;

  checkListener(listener);

  events = target._events;
  if (events === undefined) {
    events = target._events = Object.create(null);
    target._eventsCount = 0;
  } else {
    // To avoid recursion in the case that type === "newListener"! Before
    // adding it to the listeners, first emit "newListener".
    if (events.newListener !== undefined) {
      target.emit('newListener', type,
                  listener.listener ? listener.listener : listener);

      // Re-assign `events` because a newListener handler could have caused the
      // this._events to be assigned to a new object
      events = target._events;
    }
    existing = events[type];
  }

  if (existing === undefined) {
    // Optimize the case of one listener. Don't need the extra array object.
    existing = events[type] = listener;
    ++target._eventsCount;
  } else {
    if (typeof existing === 'function') {
      // Adding the second element, need to change to array.
      existing = events[type] =
        prepend ? [listener, existing] : [existing, listener];
      // If we've already got an array, just append.
    } else if (prepend) {
      existing.unshift(listener);
    } else {
      existing.push(listener);
    }

    // Check for listener leak
    m = _getMaxListeners(target);
    if (m > 0 && existing.length > m && !existing.warned) {
      existing.warned = true;
      // No error code for this since it is a Warning
      // eslint-disable-next-line no-restricted-syntax
      var w = new Error('Possible EventEmitter memory leak detected. ' +
                          existing.length + ' ' + String(type) + ' listeners ' +
                          'added. Use emitter.setMaxListeners() to ' +
                          'increase limit');
      w.name = 'MaxListenersExceededWarning';
      w.emitter = target;
      w.type = type;
      w.count = existing.length;
      ProcessEmitWarning(w);
    }
  }

  return target;
}

EventEmitter.prototype.addListener = function addListener(type, listener) {
  return _addListener(this, type, listener, false);
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.prependListener =
    function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };

function onceWrapper() {
  if (!this.fired) {
    this.target.removeListener(this.type, this.wrapFn);
    this.fired = true;
    if (arguments.length === 0)
      return this.listener.call(this.target);
    return this.listener.apply(this.target, arguments);
  }
}

function _onceWrap(target, type, listener) {
  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };
  var wrapped = onceWrapper.bind(state);
  wrapped.listener = listener;
  state.wrapFn = wrapped;
  return wrapped;
}

EventEmitter.prototype.once = function once(type, listener) {
  checkListener(listener);
  this.on(type, _onceWrap(this, type, listener));
  return this;
};

EventEmitter.prototype.prependOnceListener =
    function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };

// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener =
    function removeListener(type, listener) {
      var list, events, position, i, originalListener;

      checkListener(listener);

      events = this._events;
      if (events === undefined)
        return this;

      list = events[type];
      if (list === undefined)
        return this;

      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit('removeListener', type, list.listener || listener);
        }
      } else if (typeof list !== 'function') {
        position = -1;

        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }

        if (position < 0)
          return this;

        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }

        if (list.length === 1)
          events[type] = list[0];

        if (events.removeListener !== undefined)
          this.emit('removeListener', type, originalListener || listener);
      }

      return this;
    };

EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

EventEmitter.prototype.removeAllListeners =
    function removeAllListeners(type) {
      var listeners, events, i;

      events = this._events;
      if (events === undefined)
        return this;

      // not listening for removeListener, no need to emit
      if (events.removeListener === undefined) {
        if (arguments.length === 0) {
          this._events = Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== undefined) {
          if (--this._eventsCount === 0)
            this._events = Object.create(null);
          else
            delete events[type];
        }
        return this;
      }

      // emit removeListener for all listeners on all events
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === 'removeListener') continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
      }

      listeners = events[type];

      if (typeof listeners === 'function') {
        this.removeListener(type, listeners);
      } else if (listeners !== undefined) {
        // LIFO order
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }

      return this;
    };

function _listeners(target, type, unwrap) {
  var events = target._events;

  if (events === undefined)
    return [];

  var evlistener = events[type];
  if (evlistener === undefined)
    return [];

  if (typeof evlistener === 'function')
    return unwrap ? [evlistener.listener || evlistener] : [evlistener];

  return unwrap ?
    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}

EventEmitter.prototype.listeners = function listeners(type) {
  return _listeners(this, type, true);
};

EventEmitter.prototype.rawListeners = function rawListeners(type) {
  return _listeners(this, type, false);
};

EventEmitter.listenerCount = function(emitter, type) {
  if (typeof emitter.listenerCount === 'function') {
    return emitter.listenerCount(type);
  } else {
    return listenerCount.call(emitter, type);
  }
};

EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
  var events = this._events;

  if (events !== undefined) {
    var evlistener = events[type];

    if (typeof evlistener === 'function') {
      return 1;
    } else if (evlistener !== undefined) {
      return evlistener.length;
    }
  }

  return 0;
}

EventEmitter.prototype.eventNames = function eventNames() {
  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};

function arrayClone(arr, n) {
  var copy = new Array(n);
  for (var i = 0; i < n; ++i)
    copy[i] = arr[i];
  return copy;
}

function spliceOne(list, index) {
  for (; index + 1 < list.length; index++)
    list[index] = list[index + 1];
  list.pop();
}

function unwrapListeners(arr) {
  var ret = new Array(arr.length);
  for (var i = 0; i < ret.length; ++i) {
    ret[i] = arr[i].listener || arr[i];
  }
  return ret;
}


/***/ }),

/***/ "./node_modules/html-entities/lib/html4-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html4-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'OElig', 'oelig', 'Scaron', 'scaron', 'Yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'Dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'Alpha', 'Beta', 'Gamma', 'Delta', 'Epsilon', 'Zeta', 'Eta', 'Theta', 'Iota', 'Kappa', 'Lambda', 'Mu', 'Nu', 'Xi', 'Omicron', 'Pi', 'Rho', 'Sigma', 'Tau', 'Upsilon', 'Phi', 'Chi', 'Psi', 'Omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'Prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'lArr', 'uArr', 'rArr', 'dArr', 'hArr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];
var alphaIndex = {};
var numIndex = {};
(function () {
    var i = 0;
    var length = HTML_ALPHA.length;
    while (i < length) {
        var a = HTML_ALPHA[i];
        var c = HTML_CODES[i];
        alphaIndex[a] = String.fromCharCode(c);
        numIndex[c] = a;
        i++;
    }
})();
var Html4Entities = /** @class */ (function () {
    function Html4Entities() {
    }
    Html4Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1).toLowerCase() === 'x' ?
                    parseInt(entity.substr(2), 16) :
                    parseInt(entity.substr(1));
                if (!(isNaN(code) || code < -32768 || code > 65535)) {
                    chr = String.fromCharCode(code);
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html4Entities.decode = function (str) {
        return new Html4Entities().decode(str);
    };
    Html4Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var alpha = numIndex[str.charCodeAt(i)];
            result += alpha ? "&" + alpha + ";" : str.charAt(i);
            i++;
        }
        return result;
    };
    Html4Entities.encode = function (str) {
        return new Html4Entities().encode(str);
    };
    Html4Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var cc = str.charCodeAt(i);
            var alpha = numIndex[cc];
            if (alpha) {
                result += "&" + alpha + ";";
            }
            else if (cc < 32 || cc > 126) {
                result += "&#" + cc + ";";
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonUTF = function (str) {
        return new Html4Entities().encodeNonUTF(str);
    };
    Html4Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    Html4Entities.encodeNonASCII = function (str) {
        return new Html4Entities().encodeNonASCII(str);
    };
    return Html4Entities;
}());
exports.Html4Entities = Html4Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/html5-entities.js":
/*!**********************************************************!*\
  !*** ./node_modules/html-entities/lib/html5-entities.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['CloseCurlyDoubleQuote', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['CloseCurlyQuote', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];
var alphaIndex = {};
var charIndex = {};
createIndexes(alphaIndex, charIndex);
var Html5Entities = /** @class */ (function () {
    function Html5Entities() {
    }
    Html5Entities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&(#?[\w\d]+);?/g, function (s, entity) {
            var chr;
            if (entity.charAt(0) === "#") {
                var code = entity.charAt(1) === 'x' ?
                    parseInt(entity.substr(2).toLowerCase(), 16) :
                    parseInt(entity.substr(1));
                if (!(isNaN(code) || code < -32768 || code > 65535)) {
                    chr = String.fromCharCode(code);
                }
            }
            else {
                chr = alphaIndex[entity];
            }
            return chr || s;
        });
    };
    Html5Entities.decode = function (str) {
        return new Html5Entities().decode(str);
    };
    Html5Entities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var charInfo = charIndex[str.charCodeAt(i)];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            result += str.charAt(i);
            i++;
        }
        return result;
    };
    Html5Entities.encode = function (str) {
        return new Html5Entities().encode(str);
    };
    Html5Entities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var charInfo = charIndex[c];
            if (charInfo) {
                var alpha = charInfo[str.charCodeAt(i + 1)];
                if (alpha) {
                    i++;
                }
                else {
                    alpha = charInfo[''];
                }
                if (alpha) {
                    result += "&" + alpha + ";";
                    i++;
                    continue;
                }
            }
            if (c < 32 || c > 126) {
                result += '&#' + c + ';';
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    Html5Entities.encodeNonUTF = function (str) {
        return new Html5Entities().encodeNonUTF(str);
    };
    Html5Entities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    Html5Entities.encodeNonASCII = function (str) {
        return new Html5Entities().encodeNonASCII(str);
    };
    return Html5Entities;
}());
exports.Html5Entities = Html5Entities;
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo = void 0;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            addChar && (charInfo[chr2] = alpha);
        }
        else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            addChar && (charInfo[''] = alpha);
        }
    }
}


/***/ }),

/***/ "./node_modules/html-entities/lib/index.js":
/*!*************************************************!*\
  !*** ./node_modules/html-entities/lib/index.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var xml_entities_1 = __webpack_require__(/*! ./xml-entities */ "./node_modules/html-entities/lib/xml-entities.js");
exports.XmlEntities = xml_entities_1.XmlEntities;
var html4_entities_1 = __webpack_require__(/*! ./html4-entities */ "./node_modules/html-entities/lib/html4-entities.js");
exports.Html4Entities = html4_entities_1.Html4Entities;
var html5_entities_1 = __webpack_require__(/*! ./html5-entities */ "./node_modules/html-entities/lib/html5-entities.js");
exports.Html5Entities = html5_entities_1.Html5Entities;
exports.AllHtmlEntities = html5_entities_1.Html5Entities;


/***/ }),

/***/ "./node_modules/html-entities/lib/xml-entities.js":
/*!********************************************************!*\
  !*** ./node_modules/html-entities/lib/xml-entities.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};
var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};
var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};
var XmlEntities = /** @class */ (function () {
    function XmlEntities() {
    }
    XmlEntities.prototype.encode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/[<>"'&]/g, function (s) {
            return CHAR_S_INDEX[s];
        });
    };
    XmlEntities.encode = function (str) {
        return new XmlEntities().encode(str);
    };
    XmlEntities.prototype.decode = function (str) {
        if (!str || !str.length) {
            return '';
        }
        return str.replace(/&#?[0-9a-zA-Z]+;?/g, function (s) {
            if (s.charAt(1) === '#') {
                var code = s.charAt(2).toLowerCase() === 'x' ?
                    parseInt(s.substr(3), 16) :
                    parseInt(s.substr(2));
                if (isNaN(code) || code < -32768 || code > 65535) {
                    return '';
                }
                return String.fromCharCode(code);
            }
            return ALPHA_INDEX[s] || s;
        });
    };
    XmlEntities.decode = function (str) {
        return new XmlEntities().decode(str);
    };
    XmlEntities.prototype.encodeNonUTF = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLength = str.length;
        var result = '';
        var i = 0;
        while (i < strLength) {
            var c = str.charCodeAt(i);
            var alpha = CHAR_INDEX[c];
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
            if (c < 32 || c > 126) {
                result += '&#' + c + ';';
            }
            else {
                result += str.charAt(i);
            }
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonUTF = function (str) {
        return new XmlEntities().encodeNonUTF(str);
    };
    XmlEntities.prototype.encodeNonASCII = function (str) {
        if (!str || !str.length) {
            return '';
        }
        var strLenght = str.length;
        var result = '';
        var i = 0;
        while (i < strLenght) {
            var c = str.charCodeAt(i);
            if (c <= 255) {
                result += str[i++];
                continue;
            }
            result += '&#' + c + ';';
            i++;
        }
        return result;
    };
    XmlEntities.encodeNonASCII = function (str) {
        return new XmlEntities().encodeNonASCII(str);
    };
    return XmlEntities;
}());
exports.XmlEntities = XmlEntities;


/***/ }),

/***/ "./node_modules/loglevel/lib/loglevel.js":
/*!***********************************************!*\
  !*** ./node_modules/loglevel/lib/loglevel.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
* loglevel - https://github.com/pimterry/loglevel
*
* Copyright (c) 2013 Tim Perry
* Licensed under the MIT license.
*/
(function (root, definition) {
    "use strict";
    if (true) {
        !(__WEBPACK_AMD_DEFINE_FACTORY__ = (definition),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}
}(this, function () {
    "use strict";

    // Slightly dubious tricks to cut down minimized file size
    var noop = function() {};
    var undefinedType = "undefined";
    var isIE = (typeof window !== undefinedType) && (typeof window.navigator !== undefinedType) && (
        /Trident\/|MSIE /.test(window.navigator.userAgent)
    );

    var logMethods = [
        "trace",
        "debug",
        "info",
        "warn",
        "error"
    ];

    // Cross-browser bind equivalent that works at least back to IE6
    function bindMethod(obj, methodName) {
        var method = obj[methodName];
        if (typeof method.bind === 'function') {
            return method.bind(obj);
        } else {
            try {
                return Function.prototype.bind.call(method, obj);
            } catch (e) {
                // Missing bind shim or IE8 + Modernizr, fallback to wrapping
                return function() {
                    return Function.prototype.apply.apply(method, [obj, arguments]);
                };
            }
        }
    }

    // Trace() doesn't print the message in IE, so for that case we need to wrap it
    function traceForIE() {
        if (console.log) {
            if (console.log.apply) {
                console.log.apply(console, arguments);
            } else {
                // In old IE, native console methods themselves don't have apply().
                Function.prototype.apply.apply(console.log, [console, arguments]);
            }
        }
        if (console.trace) console.trace();
    }

    // Build the best logging method possible for this env
    // Wherever possible we want to bind, not wrap, to preserve stack traces
    function realMethod(methodName) {
        if (methodName === 'debug') {
            methodName = 'log';
        }

        if (typeof console === undefinedType) {
            return false; // No method possible, for now - fixed later by enableLoggingWhenConsoleArrives
        } else if (methodName === 'trace' && isIE) {
            return traceForIE;
        } else if (console[methodName] !== undefined) {
            return bindMethod(console, methodName);
        } else if (console.log !== undefined) {
            return bindMethod(console, 'log');
        } else {
            return noop;
        }
    }

    // These private functions always need `this` to be set properly

    function replaceLoggingMethods(level, loggerName) {
        /*jshint validthis:true */
        for (var i = 0; i < logMethods.length; i++) {
            var methodName = logMethods[i];
            this[methodName] = (i < level) ?
                noop :
                this.methodFactory(methodName, level, loggerName);
        }

        // Define log.log as an alias for log.debug
        this.log = this.debug;
    }

    // In old IE versions, the console isn't present until you first open it.
    // We build realMethod() replacements here that regenerate logging methods
    function enableLoggingWhenConsoleArrives(methodName, level, loggerName) {
        return function () {
            if (typeof console !== undefinedType) {
                replaceLoggingMethods.call(this, level, loggerName);
                this[methodName].apply(this, arguments);
            }
        };
    }

    // By default, we use closely bound real methods wherever possible, and
    // otherwise we wait for a console to appear, and then try again.
    function defaultMethodFactory(methodName, level, loggerName) {
        /*jshint validthis:true */
        return realMethod(methodName) ||
               enableLoggingWhenConsoleArrives.apply(this, arguments);
    }

    function Logger(name, defaultLevel, factory) {
      var self = this;
      var currentLevel;
      var storageKey = "loglevel";
      if (name) {
        storageKey += ":" + name;
      }

      function persistLevelIfPossible(levelNum) {
          var levelName = (logMethods[levelNum] || 'silent').toUpperCase();

          if (typeof window === undefinedType) return;

          // Use localStorage if available
          try {
              window.localStorage[storageKey] = levelName;
              return;
          } catch (ignore) {}

          // Use session cookie as fallback
          try {
              window.document.cookie =
                encodeURIComponent(storageKey) + "=" + levelName + ";";
          } catch (ignore) {}
      }

      function getPersistedLevel() {
          var storedLevel;

          if (typeof window === undefinedType) return;

          try {
              storedLevel = window.localStorage[storageKey];
          } catch (ignore) {}

          // Fallback to cookies if local storage gives us nothing
          if (typeof storedLevel === undefinedType) {
              try {
                  var cookie = window.document.cookie;
                  var location = cookie.indexOf(
                      encodeURIComponent(storageKey) + "=");
                  if (location !== -1) {
                      storedLevel = /^([^;]+)/.exec(cookie.slice(location))[1];
                  }
              } catch (ignore) {}
          }

          // If the stored level is not valid, treat it as if nothing was stored.
          if (self.levels[storedLevel] === undefined) {
              storedLevel = undefined;
          }

          return storedLevel;
      }

      /*
       *
       * Public logger API - see https://github.com/pimterry/loglevel for details
       *
       */

      self.name = name;

      self.levels = { "TRACE": 0, "DEBUG": 1, "INFO": 2, "WARN": 3,
          "ERROR": 4, "SILENT": 5};

      self.methodFactory = factory || defaultMethodFactory;

      self.getLevel = function () {
          return currentLevel;
      };

      self.setLevel = function (level, persist) {
          if (typeof level === "string" && self.levels[level.toUpperCase()] !== undefined) {
              level = self.levels[level.toUpperCase()];
          }
          if (typeof level === "number" && level >= 0 && level <= self.levels.SILENT) {
              currentLevel = level;
              if (persist !== false) {  // defaults to true
                  persistLevelIfPossible(level);
              }
              replaceLoggingMethods.call(self, level, name);
              if (typeof console === undefinedType && level < self.levels.SILENT) {
                  return "No console available for logging";
              }
          } else {
              throw "log.setLevel() called with invalid level: " + level;
          }
      };

      self.setDefaultLevel = function (level) {
          if (!getPersistedLevel()) {
              self.setLevel(level, false);
          }
      };

      self.enableAll = function(persist) {
          self.setLevel(self.levels.TRACE, persist);
      };

      self.disableAll = function(persist) {
          self.setLevel(self.levels.SILENT, persist);
      };

      // Initialize with the right level
      var initialLevel = getPersistedLevel();
      if (initialLevel == null) {
          initialLevel = defaultLevel == null ? "WARN" : defaultLevel;
      }
      self.setLevel(initialLevel, false);
    }

    /*
     *
     * Top-level API
     *
     */

    var defaultLogger = new Logger();

    var _loggersByName = {};
    defaultLogger.getLogger = function getLogger(name) {
        if (typeof name !== "string" || name === "") {
          throw new TypeError("You must supply a name when creating a logger.");
        }

        var logger = _loggersByName[name];
        if (!logger) {
          logger = _loggersByName[name] = new Logger(
            name, defaultLogger.getLevel(), defaultLogger.methodFactory);
        }
        return logger;
    };

    // Grab the current global log variable in case of overwrite
    var _log = (typeof window !== undefinedType) ? window.log : undefined;
    defaultLogger.noConflict = function() {
        if (typeof window !== undefinedType &&
               window.log === defaultLogger) {
            window.log = _log;
        }

        return defaultLogger;
    };

    defaultLogger.getLoggers = function getLoggers() {
        return _loggersByName;
    };

    return defaultLogger;
}));


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/punycode/punycode.js ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports =  true && exports &&
		!exports.nodeType && exports;
	var freeModule =  true && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
			return punycode;
		}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}

}(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module), __webpack_require__(/*! ./../../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/querystring-es3/decode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/decode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),

/***/ "./node_modules/querystring-es3/encode.js":
/*!************************************************!*\
  !*** ./node_modules/querystring-es3/encode.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),

/***/ "./node_modules/querystring-es3/index.js":
/*!***********************************************!*\
  !*** ./node_modules/querystring-es3/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(/*! ./decode */ "./node_modules/querystring-es3/decode.js");
exports.encode = exports.stringify = __webpack_require__(/*! ./encode */ "./node_modules/querystring-es3/encode.js");


/***/ }),

/***/ "./node_modules/sockjs-client/dist/sockjs.js":
/*!***************************************************!*\
  !*** ./node_modules/sockjs-client/dist/sockjs.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/* sockjs-client v1.4.0 | http://sockjs.org | MIT license */
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return require(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
(function (global){
'use strict';

var transportList = require('./transport-list');

module.exports = require('./main')(transportList);

// TODO can't get rid of this until all servers do
if ('_sockjs_onload' in global) {
  setTimeout(global._sockjs_onload, 1);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./main":14,"./transport-list":16}],2:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function CloseEvent() {
  Event.call(this);
  this.initEvent('close', false, false);
  this.wasClean = false;
  this.code = 0;
  this.reason = '';
}

inherits(CloseEvent, Event);

module.exports = CloseEvent;

},{"./event":4,"inherits":57}],3:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventTarget = require('./eventtarget')
  ;

function EventEmitter() {
  EventTarget.call(this);
}

inherits(EventEmitter, EventTarget);

EventEmitter.prototype.removeAllListeners = function(type) {
  if (type) {
    delete this._listeners[type];
  } else {
    this._listeners = {};
  }
};

EventEmitter.prototype.once = function(type, listener) {
  var self = this
    , fired = false;

  function g() {
    self.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  this.on(type, g);
};

EventEmitter.prototype.emit = function() {
  var type = arguments[0];
  var listeners = this._listeners[type];
  if (!listeners) {
    return;
  }
  // equivalent of Array.prototype.slice.call(arguments, 1);
  var l = arguments.length;
  var args = new Array(l - 1);
  for (var ai = 1; ai < l; ai++) {
    args[ai - 1] = arguments[ai];
  }
  for (var i = 0; i < listeners.length; i++) {
    listeners[i].apply(this, args);
  }
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener = EventTarget.prototype.addEventListener;
EventEmitter.prototype.removeListener = EventTarget.prototype.removeEventListener;

module.exports.EventEmitter = EventEmitter;

},{"./eventtarget":5,"inherits":57}],4:[function(require,module,exports){
'use strict';

function Event(eventType) {
  this.type = eventType;
}

Event.prototype.initEvent = function(eventType, canBubble, cancelable) {
  this.type = eventType;
  this.bubbles = canBubble;
  this.cancelable = cancelable;
  this.timeStamp = +new Date();
  return this;
};

Event.prototype.stopPropagation = function() {};
Event.prototype.preventDefault = function() {};

Event.CAPTURING_PHASE = 1;
Event.AT_TARGET = 2;
Event.BUBBLING_PHASE = 3;

module.exports = Event;

},{}],5:[function(require,module,exports){
'use strict';

/* Simplified implementation of DOM2 EventTarget.
 *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget
 */

function EventTarget() {
  this._listeners = {};
}

EventTarget.prototype.addEventListener = function(eventType, listener) {
  if (!(eventType in this._listeners)) {
    this._listeners[eventType] = [];
  }
  var arr = this._listeners[eventType];
  // #4
  if (arr.indexOf(listener) === -1) {
    // Make a copy so as not to interfere with a current dispatchEvent.
    arr = arr.concat([listener]);
  }
  this._listeners[eventType] = arr;
};

EventTarget.prototype.removeEventListener = function(eventType, listener) {
  var arr = this._listeners[eventType];
  if (!arr) {
    return;
  }
  var idx = arr.indexOf(listener);
  if (idx !== -1) {
    if (arr.length > 1) {
      // Make a copy so as not to interfere with a current dispatchEvent.
      this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));
    } else {
      delete this._listeners[eventType];
    }
    return;
  }
};

EventTarget.prototype.dispatchEvent = function() {
  var event = arguments[0];
  var t = event.type;
  // equivalent of Array.prototype.slice.call(arguments, 0);
  var args = arguments.length === 1 ? [event] : Array.apply(null, arguments);
  // TODO: This doesn't match the real behavior; per spec, onfoo get
  // their place in line from the /first/ time they're set from
  // non-null. Although WebKit bumps it to the end every time it's
  // set.
  if (this['on' + t]) {
    this['on' + t].apply(this, args);
  }
  if (t in this._listeners) {
    // Grab a reference to the listeners list. removeEventListener may alter the list.
    var listeners = this._listeners[t];
    for (var i = 0; i < listeners.length; i++) {
      listeners[i].apply(this, args);
    }
  }
};

module.exports = EventTarget;

},{}],6:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , Event = require('./event')
  ;

function TransportMessageEvent(data) {
  Event.call(this);
  this.initEvent('message', false, false);
  this.data = data;
}

inherits(TransportMessageEvent, Event);

module.exports = TransportMessageEvent;

},{"./event":4,"inherits":57}],7:[function(require,module,exports){
'use strict';

var JSON3 = require('json3')
  , iframeUtils = require('./utils/iframe')
  ;

function FacadeJS(transport) {
  this._transport = transport;
  transport.on('message', this._transportMessage.bind(this));
  transport.on('close', this._transportClose.bind(this));
}

FacadeJS.prototype._transportClose = function(code, reason) {
  iframeUtils.postMessage('c', JSON3.stringify([code, reason]));
};
FacadeJS.prototype._transportMessage = function(frame) {
  iframeUtils.postMessage('t', frame);
};
FacadeJS.prototype._send = function(data) {
  this._transport.send(data);
};
FacadeJS.prototype._close = function() {
  this._transport.close();
  this._transport.removeAllListeners();
};

module.exports = FacadeJS;

},{"./utils/iframe":47,"json3":58}],8:[function(require,module,exports){
(function (process){
'use strict';

var urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , JSON3 = require('json3')
  , FacadeJS = require('./facade')
  , InfoIframeReceiver = require('./info-iframe-receiver')
  , iframeUtils = require('./utils/iframe')
  , loc = require('./location')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:iframe-bootstrap');
}

module.exports = function(SockJS, availableTransports) {
  var transportMap = {};
  availableTransports.forEach(function(at) {
    if (at.facadeTransport) {
      transportMap[at.facadeTransport.transportName] = at.facadeTransport;
    }
  });

  // hard-coded for the info iframe
  // TODO see if we can make this more dynamic
  transportMap[InfoIframeReceiver.transportName] = InfoIframeReceiver;
  var parentOrigin;

  /* eslint-disable camelcase */
  SockJS.bootstrap_iframe = function() {
    /* eslint-enable camelcase */
    var facade;
    iframeUtils.currentWindowId = loc.hash.slice(1);
    var onMessage = function(e) {
      if (e.source !== parent) {
        return;
      }
      if (typeof parentOrigin === 'undefined') {
        parentOrigin = e.origin;
      }
      if (e.origin !== parentOrigin) {
        return;
      }

      var iframeMessage;
      try {
        iframeMessage = JSON3.parse(e.data);
      } catch (ignored) {
        debug('bad json', e.data);
        return;
      }

      if (iframeMessage.windowId !== iframeUtils.currentWindowId) {
        return;
      }
      switch (iframeMessage.type) {
      case 's':
        var p;
        try {
          p = JSON3.parse(iframeMessage.data);
        } catch (ignored) {
          debug('bad json', iframeMessage.data);
          break;
        }
        var version = p[0];
        var transport = p[1];
        var transUrl = p[2];
        var baseUrl = p[3];
        debug(version, transport, transUrl, baseUrl);
        // change this to semver logic
        if (version !== SockJS.version) {
          throw new Error('Incompatible SockJS! Main site uses:' +
                    ' "' + version + '", the iframe:' +
                    ' "' + SockJS.version + '".');
        }

        if (!urlUtils.isOriginEqual(transUrl, loc.href) ||
            !urlUtils.isOriginEqual(baseUrl, loc.href)) {
          throw new Error('Can\'t connect to different domain from within an ' +
                    'iframe. (' + loc.href + ', ' + transUrl + ', ' + baseUrl + ')');
        }
        facade = new FacadeJS(new transportMap[transport](transUrl, baseUrl));
        break;
      case 'm':
        facade._send(iframeMessage.data);
        break;
      case 'c':
        if (facade) {
          facade._close();
        }
        facade = null;
        break;
      }
    };

    eventUtils.attachEvent('message', onMessage);

    // Start
    iframeUtils.postMessage('s');
  };
};

}).call(this,{ env: {} })

},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,"debug":55,"json3":58}],9:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , objectUtils = require('./utils/object')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-ajax');
}

function InfoAjax(url, AjaxObject) {
  EventEmitter.call(this);

  var self = this;
  var t0 = +new Date();
  this.xo = new AjaxObject('GET', url);

  this.xo.once('finish', function(status, text) {
    var info, rtt;
    if (status === 200) {
      rtt = (+new Date()) - t0;
      if (text) {
        try {
          info = JSON3.parse(text);
        } catch (e) {
          debug('bad json', text);
        }
      }

      if (!objectUtils.isObject(info)) {
        info = {};
      }
    }
    self.emit('finish', info, rtt);
    self.removeAllListeners();
  });
}

inherits(InfoAjax, EventEmitter);

InfoAjax.prototype.close = function() {
  this.removeAllListeners();
  this.xo.close();
};

module.exports = InfoAjax;

}).call(this,{ env: {} })

},{"./utils/object":49,"debug":55,"events":3,"inherits":57,"json3":58}],10:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , JSON3 = require('json3')
  , XHRLocalObject = require('./transport/sender/xhr-local')
  , InfoAjax = require('./info-ajax')
  ;

function InfoReceiverIframe(transUrl) {
  var self = this;
  EventEmitter.call(this);

  this.ir = new InfoAjax(transUrl, XHRLocalObject);
  this.ir.once('finish', function(info, rtt) {
    self.ir = null;
    self.emit('message', JSON3.stringify([info, rtt]));
  });
}

inherits(InfoReceiverIframe, EventEmitter);

InfoReceiverIframe.transportName = 'iframe-info-receiver';

InfoReceiverIframe.prototype.close = function() {
  if (this.ir) {
    this.ir.close();
    this.ir = null;
  }
  this.removeAllListeners();
};

module.exports = InfoReceiverIframe;

},{"./info-ajax":9,"./transport/sender/xhr-local":37,"events":3,"inherits":57,"json3":58}],11:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , utils = require('./utils/event')
  , IframeTransport = require('./transport/iframe')
  , InfoReceiverIframe = require('./info-iframe-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-iframe');
}

function InfoIframe(baseUrl, url) {
  var self = this;
  EventEmitter.call(this);

  var go = function() {
    var ifr = self.ifr = new IframeTransport(InfoReceiverIframe.transportName, url, baseUrl);

    ifr.once('message', function(msg) {
      if (msg) {
        var d;
        try {
          d = JSON3.parse(msg);
        } catch (e) {
          debug('bad json', msg);
          self.emit('finish');
          self.close();
          return;
        }

        var info = d[0], rtt = d[1];
        self.emit('finish', info, rtt);
      }
      self.close();
    });

    ifr.once('close', function() {
      self.emit('finish');
      self.close();
    });
  };

  // TODO this seems the same as the 'needBody' from transports
  if (!global.document.body) {
    utils.attachEvent('load', go);
  } else {
    go();
  }
}

inherits(InfoIframe, EventEmitter);

InfoIframe.enabled = function() {
  return IframeTransport.enabled();
};

InfoIframe.prototype.close = function() {
  if (this.ifr) {
    this.ifr.close();
  }
  this.removeAllListeners();
  this.ifr = null;
};

module.exports = InfoIframe;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,"debug":55,"events":3,"inherits":57,"json3":58}],12:[function(require,module,exports){
(function (process){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , urlUtils = require('./utils/url')
  , XDR = require('./transport/sender/xdr')
  , XHRCors = require('./transport/sender/xhr-cors')
  , XHRLocal = require('./transport/sender/xhr-local')
  , XHRFake = require('./transport/sender/xhr-fake')
  , InfoIframe = require('./info-iframe')
  , InfoAjax = require('./info-ajax')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:info-receiver');
}

function InfoReceiver(baseUrl, urlInfo) {
  debug(baseUrl);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self.doXhr(baseUrl, urlInfo);
  }, 0);
}

inherits(InfoReceiver, EventEmitter);

// TODO this is currently ignoring the list of available transports and the whitelist

InfoReceiver._getReceiver = function(baseUrl, url, urlInfo) {
  // determine method of CORS support (if needed)
  if (urlInfo.sameOrigin) {
    return new InfoAjax(url, XHRLocal);
  }
  if (XHRCors.enabled) {
    return new InfoAjax(url, XHRCors);
  }
  if (XDR.enabled && urlInfo.sameScheme) {
    return new InfoAjax(url, XDR);
  }
  if (InfoIframe.enabled()) {
    return new InfoIframe(baseUrl, url);
  }
  return new InfoAjax(url, XHRFake);
};

InfoReceiver.prototype.doXhr = function(baseUrl, urlInfo) {
  var self = this
    , url = urlUtils.addPath(baseUrl, '/info')
    ;
  debug('doXhr', url);

  this.xo = InfoReceiver._getReceiver(baseUrl, url, urlInfo);

  this.timeoutRef = setTimeout(function() {
    debug('timeout');
    self._cleanup(false);
    self.emit('finish');
  }, InfoReceiver.timeout);

  this.xo.once('finish', function(info, rtt) {
    debug('finish', info, rtt);
    self._cleanup(true);
    self.emit('finish', info, rtt);
  });
};

InfoReceiver.prototype._cleanup = function(wasClean) {
  debug('_cleanup');
  clearTimeout(this.timeoutRef);
  this.timeoutRef = null;
  if (!wasClean && this.xo) {
    this.xo.close();
  }
  this.xo = null;
};

InfoReceiver.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  this._cleanup(false);
};

InfoReceiver.timeout = 8000;

module.exports = InfoReceiver;

}).call(this,{ env: {} })

},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,"debug":55,"events":3,"inherits":57}],13:[function(require,module,exports){
(function (global){
'use strict';

module.exports = global.location || {
  origin: 'http://localhost:80'
, protocol: 'http:'
, host: 'localhost'
, port: 80
, href: 'http://localhost/'
, hash: ''
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],14:[function(require,module,exports){
(function (process,global){
'use strict';

require('./shims');

var URL = require('url-parse')
  , inherits = require('inherits')
  , JSON3 = require('json3')
  , random = require('./utils/random')
  , escape = require('./utils/escape')
  , urlUtils = require('./utils/url')
  , eventUtils = require('./utils/event')
  , transport = require('./utils/transport')
  , objectUtils = require('./utils/object')
  , browser = require('./utils/browser')
  , log = require('./utils/log')
  , Event = require('./event/event')
  , EventTarget = require('./event/eventtarget')
  , loc = require('./location')
  , CloseEvent = require('./event/close')
  , TransportMessageEvent = require('./event/trans-message')
  , InfoReceiver = require('./info-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:main');
}

var transports;

// follow constructor steps defined at http://dev.w3.org/html5/websockets/#the-websocket-interface
function SockJS(url, protocols, options) {
  if (!(this instanceof SockJS)) {
    return new SockJS(url, protocols, options);
  }
  if (arguments.length < 1) {
    throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");
  }
  EventTarget.call(this);

  this.readyState = SockJS.CONNECTING;
  this.extensions = '';
  this.protocol = '';

  // non-standard extension
  options = options || {};
  if (options.protocols_whitelist) {
    log.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead.");
  }
  this._transportsWhitelist = options.transports;
  this._transportOptions = options.transportOptions || {};
  this._timeout = options.timeout || 0;

  var sessionId = options.sessionId || 8;
  if (typeof sessionId === 'function') {
    this._generateSessionId = sessionId;
  } else if (typeof sessionId === 'number') {
    this._generateSessionId = function() {
      return random.string(sessionId);
    };
  } else {
    throw new TypeError('If sessionId is used in the options, it needs to be a number or a function.');
  }

  this._server = options.server || random.numberString(1000);

  // Step 1 of WS spec - parse and validate the url. Issue #8
  var parsedUrl = new URL(url);
  if (!parsedUrl.host || !parsedUrl.protocol) {
    throw new SyntaxError("The URL '" + url + "' is invalid");
  } else if (parsedUrl.hash) {
    throw new SyntaxError('The URL must not contain a fragment');
  } else if (parsedUrl.protocol !== 'http:' && parsedUrl.protocol !== 'https:') {
    throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '" + parsedUrl.protocol + "' is not allowed.");
  }

  var secure = parsedUrl.protocol === 'https:';
  // Step 2 - don't allow secure origin with an insecure protocol
  if (loc.protocol === 'https:' && !secure) {
    throw new Error('SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS');
  }

  // Step 3 - check port access - no need here
  // Step 4 - parse protocols argument
  if (!protocols) {
    protocols = [];
  } else if (!Array.isArray(protocols)) {
    protocols = [protocols];
  }

  // Step 5 - check protocols argument
  var sortedProtocols = protocols.sort();
  sortedProtocols.forEach(function(proto, i) {
    if (!proto) {
      throw new SyntaxError("The protocols entry '" + proto + "' is invalid.");
    }
    if (i < (sortedProtocols.length - 1) && proto === sortedProtocols[i + 1]) {
      throw new SyntaxError("The protocols entry '" + proto + "' is duplicated.");
    }
  });

  // Step 6 - convert origin
  var o = urlUtils.getOrigin(loc.href);
  this._origin = o ? o.toLowerCase() : null;

  // remove the trailing slash
  parsedUrl.set('pathname', parsedUrl.pathname.replace(/\/+$/, ''));

  // store the sanitized url
  this.url = parsedUrl.href;
  debug('using url', this.url);

  // Step 7 - start connection in background
  // obtain server info
  // http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html#section-26
  this._urlInfo = {
    nullOrigin: !browser.hasDomain()
  , sameOrigin: urlUtils.isOriginEqual(this.url, loc.href)
  , sameScheme: urlUtils.isSchemeEqual(this.url, loc.href)
  };

  this._ir = new InfoReceiver(this.url, this._urlInfo);
  this._ir.once('finish', this._receiveInfo.bind(this));
}

inherits(SockJS, EventTarget);

function userSetCode(code) {
  return code === 1000 || (code >= 3000 && code <= 4999);
}

SockJS.prototype.close = function(code, reason) {
  // Step 1
  if (code && !userSetCode(code)) {
    throw new Error('InvalidAccessError: Invalid code');
  }
  // Step 2.4 states the max is 123 bytes, but we are just checking length
  if (reason && reason.length > 123) {
    throw new SyntaxError('reason argument has an invalid length');
  }

  // Step 3.1
  if (this.readyState === SockJS.CLOSING || this.readyState === SockJS.CLOSED) {
    return;
  }

  // TODO look at docs to determine how to set this
  var wasClean = true;
  this._close(code || 1000, reason || 'Normal closure', wasClean);
};

SockJS.prototype.send = function(data) {
  // #13 - convert anything non-string to string
  // TODO this currently turns objects into [object Object]
  if (typeof data !== 'string') {
    data = '' + data;
  }
  if (this.readyState === SockJS.CONNECTING) {
    throw new Error('InvalidStateError: The connection has not been established yet');
  }
  if (this.readyState !== SockJS.OPEN) {
    return;
  }
  this._transport.send(escape.quote(data));
};

SockJS.version = require('./version');

SockJS.CONNECTING = 0;
SockJS.OPEN = 1;
SockJS.CLOSING = 2;
SockJS.CLOSED = 3;

SockJS.prototype._receiveInfo = function(info, rtt) {
  debug('_receiveInfo', rtt);
  this._ir = null;
  if (!info) {
    this._close(1002, 'Cannot connect to server');
    return;
  }

  // establish a round-trip timeout (RTO) based on the
  // round-trip time (RTT)
  this._rto = this.countRTO(rtt);
  // allow server to override url used for the actual transport
  this._transUrl = info.base_url ? info.base_url : this.url;
  info = objectUtils.extend(info, this._urlInfo);
  debug('info', info);
  // determine list of desired and supported transports
  var enabledTransports = transports.filterToEnabled(this._transportsWhitelist, info);
  this._transports = enabledTransports.main;
  debug(this._transports.length + ' enabled transports');

  this._connect();
};

SockJS.prototype._connect = function() {
  for (var Transport = this._transports.shift(); Transport; Transport = this._transports.shift()) {
    debug('attempt', Transport.transportName);
    if (Transport.needBody) {
      if (!global.document.body ||
          (typeof global.document.readyState !== 'undefined' &&
            global.document.readyState !== 'complete' &&
            global.document.readyState !== 'interactive')) {
        debug('waiting for body');
        this._transports.unshift(Transport);
        eventUtils.attachEvent('load', this._connect.bind(this));
        return;
      }
    }

    // calculate timeout based on RTO and round trips. Default to 5s
    var timeoutMs = Math.max(this._timeout, (this._rto * Transport.roundTrips) || 5000);
    this._transportTimeoutId = setTimeout(this._transportTimeout.bind(this), timeoutMs);
    debug('using timeout', timeoutMs);

    var transportUrl = urlUtils.addPath(this._transUrl, '/' + this._server + '/' + this._generateSessionId());
    var options = this._transportOptions[Transport.transportName];
    debug('transport url', transportUrl);
    var transportObj = new Transport(transportUrl, this._transUrl, options);
    transportObj.on('message', this._transportMessage.bind(this));
    transportObj.once('close', this._transportClose.bind(this));
    transportObj.transportName = Transport.transportName;
    this._transport = transportObj;

    return;
  }
  this._close(2000, 'All transports failed', false);
};

SockJS.prototype._transportTimeout = function() {
  debug('_transportTimeout');
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transport) {
      this._transport.close();
    }

    this._transportClose(2007, 'Transport timed out');
  }
};

SockJS.prototype._transportMessage = function(msg) {
  debug('_transportMessage', msg);
  var self = this
    , type = msg.slice(0, 1)
    , content = msg.slice(1)
    , payload
    ;

  // first check for messages that don't need a payload
  switch (type) {
    case 'o':
      this._open();
      return;
    case 'h':
      this.dispatchEvent(new Event('heartbeat'));
      debug('heartbeat', this.transport);
      return;
  }

  if (content) {
    try {
      payload = JSON3.parse(content);
    } catch (e) {
      debug('bad json', content);
    }
  }

  if (typeof payload === 'undefined') {
    debug('empty payload', content);
    return;
  }

  switch (type) {
    case 'a':
      if (Array.isArray(payload)) {
        payload.forEach(function(p) {
          debug('message', self.transport, p);
          self.dispatchEvent(new TransportMessageEvent(p));
        });
      }
      break;
    case 'm':
      debug('message', this.transport, payload);
      this.dispatchEvent(new TransportMessageEvent(payload));
      break;
    case 'c':
      if (Array.isArray(payload) && payload.length === 2) {
        this._close(payload[0], payload[1], true);
      }
      break;
  }
};

SockJS.prototype._transportClose = function(code, reason) {
  debug('_transportClose', this.transport, code, reason);
  if (this._transport) {
    this._transport.removeAllListeners();
    this._transport = null;
    this.transport = null;
  }

  if (!userSetCode(code) && code !== 2000 && this.readyState === SockJS.CONNECTING) {
    this._connect();
    return;
  }

  this._close(code, reason);
};

SockJS.prototype._open = function() {
  debug('_open', this._transport && this._transport.transportName, this.readyState);
  if (this.readyState === SockJS.CONNECTING) {
    if (this._transportTimeoutId) {
      clearTimeout(this._transportTimeoutId);
      this._transportTimeoutId = null;
    }
    this.readyState = SockJS.OPEN;
    this.transport = this._transport.transportName;
    this.dispatchEvent(new Event('open'));
    debug('connected', this.transport);
  } else {
    // The server might have been restarted, and lost track of our
    // connection.
    this._close(1006, 'Server lost session');
  }
};

SockJS.prototype._close = function(code, reason, wasClean) {
  debug('_close', this.transport, code, reason, wasClean, this.readyState);
  var forceFail = false;

  if (this._ir) {
    forceFail = true;
    this._ir.close();
    this._ir = null;
  }
  if (this._transport) {
    this._transport.close();
    this._transport = null;
    this.transport = null;
  }

  if (this.readyState === SockJS.CLOSED) {
    throw new Error('InvalidStateError: SockJS has already been closed');
  }

  this.readyState = SockJS.CLOSING;
  setTimeout(function() {
    this.readyState = SockJS.CLOSED;

    if (forceFail) {
      this.dispatchEvent(new Event('error'));
    }

    var e = new CloseEvent('close');
    e.wasClean = wasClean || false;
    e.code = code || 1000;
    e.reason = reason;

    this.dispatchEvent(e);
    this.onmessage = this.onclose = this.onerror = null;
    debug('disconnected');
  }.bind(this), 0);
};

// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/
// and RFC 2988.
SockJS.prototype.countRTO = function(rtt) {
  // In a local environment, when using IE8/9 and the `jsonp-polling`
  // transport the time needed to establish a connection (the time that pass
  // from the opening of the transport to the call of `_dispatchOpen`) is
  // around 200msec (the lower bound used in the article above) and this
  // causes spurious timeouts. For this reason we calculate a value slightly
  // larger than that used in the article.
  if (rtt > 100) {
    return 4 * rtt; // rto > 400msec
  }
  return 300 + rtt; // 300msec < rto <= 400msec
};

module.exports = function(availableTransports) {
  transports = transport(availableTransports);
  require('./iframe-bootstrap')(SockJS, availableTransports);
  return SockJS;
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,"debug":55,"inherits":57,"json3":58,"url-parse":61}],15:[function(require,module,exports){
/* eslint-disable */
/* jscs: disable */
'use strict';

// pulled specific shims from https://github.com/es-shims/es5-shim

var ArrayPrototype = Array.prototype;
var ObjectPrototype = Object.prototype;
var FunctionPrototype = Function.prototype;
var StringPrototype = String.prototype;
var array_slice = ArrayPrototype.slice;

var _toString = ObjectPrototype.toString;
var isFunction = function (val) {
    return ObjectPrototype.toString.call(val) === '[object Function]';
};
var isArray = function isArray(obj) {
    return _toString.call(obj) === '[object Array]';
};
var isString = function isString(obj) {
    return _toString.call(obj) === '[object String]';
};

var supportsDescriptors = Object.defineProperty && (function () {
    try {
        Object.defineProperty({}, 'x', {});
        return true;
    } catch (e) { /* this is ES3 */
        return false;
    }
}());

// Define configurable, writable and non-enumerable props
// if they don't exist.
var defineProperty;
if (supportsDescriptors) {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        Object.defineProperty(object, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: method
        });
    };
} else {
    defineProperty = function (object, name, method, forceAssign) {
        if (!forceAssign && (name in object)) { return; }
        object[name] = method;
    };
}
var defineProperties = function (object, map, forceAssign) {
    for (var name in map) {
        if (ObjectPrototype.hasOwnProperty.call(map, name)) {
          defineProperty(object, name, map[name], forceAssign);
        }
    }
};

var toObject = function (o) {
    if (o == null) { // this matches both null and undefined
        throw new TypeError("can't convert " + o + ' to object');
    }
    return Object(o);
};

//
// Util
// ======
//

// ES5 9.4
// http://es5.github.com/#x9.4
// http://jsperf.com/to-integer

function toInteger(num) {
    var n = +num;
    if (n !== n) { // isNaN
        n = 0;
    } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {
        n = (n > 0 || -1) * Math.floor(Math.abs(n));
    }
    return n;
}

function ToUint32(x) {
    return x >>> 0;
}

//
// Function
// ========
//

// ES-5 15.3.4.5
// http://es5.github.com/#x15.3.4.5

function Empty() {}

defineProperties(FunctionPrototype, {
    bind: function bind(that) { // .length is 1
        // 1. Let Target be the this value.
        var target = this;
        // 2. If IsCallable(Target) is false, throw a TypeError exception.
        if (!isFunction(target)) {
            throw new TypeError('Function.prototype.bind called on incompatible ' + target);
        }
        // 3. Let A be a new (possibly empty) internal list of all of the
        //   argument values provided after thisArg (arg1, arg2 etc), in order.
        // XXX slicedArgs will stand in for "A" if used
        var args = array_slice.call(arguments, 1); // for normal call
        // 4. Let F be a new native ECMAScript object.
        // 11. Set the [[Prototype]] internal property of F to the standard
        //   built-in Function prototype object as specified in 15.3.3.1.
        // 12. Set the [[Call]] internal property of F as described in
        //   15.3.4.5.1.
        // 13. Set the [[Construct]] internal property of F as described in
        //   15.3.4.5.2.
        // 14. Set the [[HasInstance]] internal property of F as described in
        //   15.3.4.5.3.
        var binder = function () {

            if (this instanceof bound) {
                // 15.3.4.5.2 [[Construct]]
                // When the [[Construct]] internal method of a function object,
                // F that was created using the bind function is called with a
                // list of arguments ExtraArgs, the following steps are taken:
                // 1. Let target be the value of F's [[TargetFunction]]
                //   internal property.
                // 2. If target has no [[Construct]] internal method, a
                //   TypeError exception is thrown.
                // 3. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Construct]] internal
                //   method of target providing args as the arguments.

                var result = target.apply(
                    this,
                    args.concat(array_slice.call(arguments))
                );
                if (Object(result) === result) {
                    return result;
                }
                return this;

            } else {
                // 15.3.4.5.1 [[Call]]
                // When the [[Call]] internal method of a function object, F,
                // which was created using the bind function is called with a
                // this value and a list of arguments ExtraArgs, the following
                // steps are taken:
                // 1. Let boundArgs be the value of F's [[BoundArgs]] internal
                //   property.
                // 2. Let boundThis be the value of F's [[BoundThis]] internal
                //   property.
                // 3. Let target be the value of F's [[TargetFunction]] internal
                //   property.
                // 4. Let args be a new list containing the same values as the
                //   list boundArgs in the same order followed by the same
                //   values as the list ExtraArgs in the same order.
                // 5. Return the result of calling the [[Call]] internal method
                //   of target providing boundThis as the this value and
                //   providing args as the arguments.

                // equiv: target.call(this, ...boundArgs, ...args)
                return target.apply(
                    that,
                    args.concat(array_slice.call(arguments))
                );

            }

        };

        // 15. If the [[Class]] internal property of Target is "Function", then
        //     a. Let L be the length property of Target minus the length of A.
        //     b. Set the length own property of F to either 0 or L, whichever is
        //       larger.
        // 16. Else set the length own property of F to 0.

        var boundLength = Math.max(0, target.length - args.length);

        // 17. Set the attributes of the length own property of F to the values
        //   specified in 15.3.5.1.
        var boundArgs = [];
        for (var i = 0; i < boundLength; i++) {
            boundArgs.push('$' + i);
        }

        // XXX Build a dynamic function with desired amount of arguments is the only
        // way to set the length property of a function.
        // In environments where Content Security Policies enabled (Chrome extensions,
        // for ex.) all use of eval or Function costructor throws an exception.
        // However in all of these environments Function.prototype.bind exists
        // and so this code will never be executed.
        var bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this, arguments); }')(binder);

        if (target.prototype) {
            Empty.prototype = target.prototype;
            bound.prototype = new Empty();
            // Clean up dangling references.
            Empty.prototype = null;
        }

        // TODO
        // 18. Set the [[Extensible]] internal property of F to true.

        // TODO
        // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).
        // 20. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "caller", PropertyDescriptor {[[Get]]: thrower, [[Set]]:
        //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and
        //   false.
        // 21. Call the [[DefineOwnProperty]] internal method of F with
        //   arguments "arguments", PropertyDescriptor {[[Get]]: thrower,
        //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},
        //   and false.

        // TODO
        // NOTE Function objects created using Function.prototype.bind do not
        // have a prototype property or the [[Code]], [[FormalParameters]], and
        // [[Scope]] internal properties.
        // XXX can't delete prototype in pure-js.

        // 22. Return F.
        return bound;
    }
});

//
// Array
// =====
//

// ES5 15.4.3.2
// http://es5.github.com/#x15.4.3.2
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray
defineProperties(Array, { isArray: isArray });


var boxedString = Object('a');
var splitString = boxedString[0] !== 'a' || !(0 in boxedString);

var properlyBoxesContext = function properlyBoxed(method) {
    // Check node 0.6.21 bug where third parameter is not boxed
    var properlyBoxesNonStrict = true;
    var properlyBoxesStrict = true;
    if (method) {
        method.call('foo', function (_, __, context) {
            if (typeof context !== 'object') { properlyBoxesNonStrict = false; }
        });

        method.call([1], function () {
            'use strict';
            properlyBoxesStrict = typeof this === 'string';
        }, 'x');
    }
    return !!method && properlyBoxesNonStrict && properlyBoxesStrict;
};

defineProperties(ArrayPrototype, {
    forEach: function forEach(fun /*, thisp*/) {
        var object = toObject(this),
            self = splitString && isString(this) ? this.split('') : object,
            thisp = arguments[1],
            i = -1,
            length = self.length >>> 0;

        // If no callback function or if callback is not a callable function
        if (!isFunction(fun)) {
            throw new TypeError(); // TODO message
        }

        while (++i < length) {
            if (i in self) {
                // Invoke the callback function with call, passing arguments:
                // context, property value, property key, thisArg object
                // context
                fun.call(thisp, self[i], i, object);
            }
        }
    }
}, !properlyBoxesContext(ArrayPrototype.forEach));

// ES5 15.4.4.14
// http://es5.github.com/#x15.4.4.14
// https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf
var hasFirefox2IndexOfBug = Array.prototype.indexOf && [0, 1].indexOf(1, 2) !== -1;
defineProperties(ArrayPrototype, {
    indexOf: function indexOf(sought /*, fromIndex */ ) {
        var self = splitString && isString(this) ? this.split('') : toObject(this),
            length = self.length >>> 0;

        if (!length) {
            return -1;
        }

        var i = 0;
        if (arguments.length > 1) {
            i = toInteger(arguments[1]);
        }

        // handle negative indices
        i = i >= 0 ? i : Math.max(0, length + i);
        for (; i < length; i++) {
            if (i in self && self[i] === sought) {
                return i;
            }
        }
        return -1;
    }
}, hasFirefox2IndexOfBug);

//
// String
// ======
//

// ES5 15.5.4.14
// http://es5.github.com/#x15.5.4.14

// [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]
// Many browsers do not split properly with regular expressions or they
// do not perform the split correctly under obscure conditions.
// See http://blog.stevenlevithan.com/archives/cross-browser-split
// I've tested in many browsers and this seems to cover the deviant ones:
//    'ab'.split(/(?:ab)*/) should be ["", ""], not [""]
//    '.'.split(/(.?)(.?)/) should be ["", ".", "", ""], not ["", ""]
//    'tesst'.split(/(s)*/) should be ["t", undefined, "e", "s", "t"], not
//       [undefined, "t", undefined, "e", ...]
//    ''.split(/.?/) should be [], not [""]
//    '.'.split(/()()/) should be ["."], not ["", "", "."]

var string_split = StringPrototype.split;
if (
    'ab'.split(/(?:ab)*/).length !== 2 ||
    '.'.split(/(.?)(.?)/).length !== 4 ||
    'tesst'.split(/(s)*/)[1] === 't' ||
    'test'.split(/(?:)/, -1).length !== 4 ||
    ''.split(/.?/).length ||
    '.'.split(/()()/).length > 1
) {
    (function () {
        var compliantExecNpcg = /()??/.exec('')[1] === void 0; // NPCG: nonparticipating capturing group

        StringPrototype.split = function (separator, limit) {
            var string = this;
            if (separator === void 0 && limit === 0) {
                return [];
            }

            // If `separator` is not a regex, use native split
            if (_toString.call(separator) !== '[object RegExp]') {
                return string_split.call(this, separator, limit);
            }

            var output = [],
                flags = (separator.ignoreCase ? 'i' : '') +
                        (separator.multiline  ? 'm' : '') +
                        (separator.extended   ? 'x' : '') + // Proposed for ES6
                        (separator.sticky     ? 'y' : ''), // Firefox 3+
                lastLastIndex = 0,
                // Make `global` and avoid `lastIndex` issues by working with a copy
                separator2, match, lastIndex, lastLength;
            separator = new RegExp(separator.source, flags + 'g');
            string += ''; // Type-convert
            if (!compliantExecNpcg) {
                // Doesn't need flags gy, but they don't hurt
                separator2 = new RegExp('^' + separator.source + '$(?!\\s)', flags);
            }
            /* Values for `limit`, per the spec:
             * If undefined: 4294967295 // Math.pow(2, 32) - 1
             * If 0, Infinity, or NaN: 0
             * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;
             * If negative number: 4294967296 - Math.floor(Math.abs(limit))
             * If other: Type-convert, then use the above rules
             */
            limit = limit === void 0 ?
                -1 >>> 0 : // Math.pow(2, 32) - 1
                ToUint32(limit);
            while (match = separator.exec(string)) {
                // `separator.lastIndex` is not reliable cross-browser
                lastIndex = match.index + match[0].length;
                if (lastIndex > lastLastIndex) {
                    output.push(string.slice(lastLastIndex, match.index));
                    // Fix browsers whose `exec` methods don't consistently return `undefined` for
                    // nonparticipating capturing groups
                    if (!compliantExecNpcg && match.length > 1) {
                        match[0].replace(separator2, function () {
                            for (var i = 1; i < arguments.length - 2; i++) {
                                if (arguments[i] === void 0) {
                                    match[i] = void 0;
                                }
                            }
                        });
                    }
                    if (match.length > 1 && match.index < string.length) {
                        ArrayPrototype.push.apply(output, match.slice(1));
                    }
                    lastLength = match[0].length;
                    lastLastIndex = lastIndex;
                    if (output.length >= limit) {
                        break;
                    }
                }
                if (separator.lastIndex === match.index) {
                    separator.lastIndex++; // Avoid an infinite loop
                }
            }
            if (lastLastIndex === string.length) {
                if (lastLength || !separator.test('')) {
                    output.push('');
                }
            } else {
                output.push(string.slice(lastLastIndex));
            }
            return output.length > limit ? output.slice(0, limit) : output;
        };
    }());

// [bugfix, chrome]
// If separator is undefined, then the result array contains just one String,
// which is the this value (converted to a String). If limit is not undefined,
// then the output array is truncated so that it contains no more than limit
// elements.
// "0".split(undefined, 0) -> []
} else if ('0'.split(void 0, 0).length) {
    StringPrototype.split = function split(separator, limit) {
        if (separator === void 0 && limit === 0) { return []; }
        return string_split.call(this, separator, limit);
    };
}

// ECMA-262, 3rd B.2.3
// Not an ECMAScript standard, although ECMAScript 3rd Edition has a
// non-normative section suggesting uniform semantics and it should be
// normalized across all browsers
// [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE
var string_substr = StringPrototype.substr;
var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';
defineProperties(StringPrototype, {
    substr: function substr(start, length) {
        return string_substr.call(
            this,
            start < 0 ? ((start = this.length + start) < 0 ? 0 : start) : start,
            length
        );
    }
}, hasNegativeSubstrBug);

},{}],16:[function(require,module,exports){
'use strict';

module.exports = [
  // streaming transports
  require('./transport/websocket')
, require('./transport/xhr-streaming')
, require('./transport/xdr-streaming')
, require('./transport/eventsource')
, require('./transport/lib/iframe-wrap')(require('./transport/eventsource'))

  // polling transports
, require('./transport/htmlfile')
, require('./transport/lib/iframe-wrap')(require('./transport/htmlfile'))
, require('./transport/xhr-polling')
, require('./transport/xdr-polling')
, require('./transport/lib/iframe-wrap')(require('./transport/xhr-polling'))
, require('./transport/jsonp-polling')
];

},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , utils = require('../../utils/event')
  , urlUtils = require('../../utils/url')
  , XHR = global.XMLHttpRequest
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:browser:xhr');
}

function AbstractXHRObject(method, url, payload, opts) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function () {
    self._start(method, url, payload, opts);
  }, 0);
}

inherits(AbstractXHRObject, EventEmitter);

AbstractXHRObject.prototype._start = function(method, url, payload, opts) {
  var self = this;

  try {
    this.xhr = new XHR();
  } catch (x) {
    // intentionally empty
  }

  if (!this.xhr) {
    debug('no xhr');
    this.emit('finish', 0, 'no xhr support');
    this._cleanup();
    return;
  }

  // several browsers cache POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  // Explorer tends to keep connection open, even after the
  // tab gets closed: http://bugs.jquery.com/ticket/5280
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload cleanup');
    self._cleanup(true);
  });
  try {
    this.xhr.open(method, url, true);
    if (this.timeout && 'timeout' in this.xhr) {
      this.xhr.timeout = this.timeout;
      this.xhr.ontimeout = function() {
        debug('xhr timeout');
        self.emit('finish', 0, '');
        self._cleanup(false);
      };
    }
  } catch (e) {
    debug('exception', e);
    // IE raises an exception on wrong port.
    this.emit('finish', 0, '');
    this._cleanup(false);
    return;
  }

  if ((!opts || !opts.noCredentials) && AbstractXHRObject.supportsCORS) {
    debug('withCredentials');
    // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :
    // "This never affects same-site requests."

    this.xhr.withCredentials = true;
  }
  if (opts && opts.headers) {
    for (var key in opts.headers) {
      this.xhr.setRequestHeader(key, opts.headers[key]);
    }
  }

  this.xhr.onreadystatechange = function() {
    if (self.xhr) {
      var x = self.xhr;
      var text, status;
      debug('readyState', x.readyState);
      switch (x.readyState) {
      case 3:
        // IE doesn't like peeking into responseText or status
        // on Microsoft.XMLHTTP and readystate=3
        try {
          status = x.status;
          text = x.responseText;
        } catch (e) {
          // intentionally empty
        }
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }

        // IE does return readystate == 3 for 404 answers.
        if (status === 200 && text && text.length > 0) {
          debug('chunk');
          self.emit('chunk', status, text);
        }
        break;
      case 4:
        status = x.status;
        debug('status', status);
        // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450
        if (status === 1223) {
          status = 204;
        }
        // IE returns this for a bad port
        // http://msdn.microsoft.com/en-us/library/windows/desktop/aa383770(v=vs.85).aspx
        if (status === 12005 || status === 12029) {
          status = 0;
        }

        debug('finish', status, x.responseText);
        self.emit('finish', status, x.responseText);
        self._cleanup(false);
        break;
      }
    }
  };

  try {
    self.xhr.send(payload);
  } catch (e) {
    self.emit('finish', 0, '');
    self._cleanup(false);
  }
};

AbstractXHRObject.prototype._cleanup = function(abort) {
  debug('cleanup');
  if (!this.xhr) {
    return;
  }
  this.removeAllListeners();
  utils.unloadDel(this.unloadRef);

  // IE needs this field to be a function
  this.xhr.onreadystatechange = function() {};
  if (this.xhr.ontimeout) {
    this.xhr.ontimeout = null;
  }

  if (abort) {
    try {
      this.xhr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xhr = null;
};

AbstractXHRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

AbstractXHRObject.enabled = !!XHR;
// override XMLHttpRequest for IE6/7
// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (!AbstractXHRObject.enabled && (axo in global)) {
  debug('overriding xmlhttprequest');
  XHR = function() {
    try {
      return new global[axo]('Microsoft.XMLHTTP');
    } catch (e) {
      return null;
    }
  };
  AbstractXHRObject.enabled = !!new XHR();
}

var cors = false;
try {
  cors = 'withCredentials' in new XHR();
} catch (ignored) {
  // intentionally empty
}

AbstractXHRObject.supportsCORS = cors;

module.exports = AbstractXHRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],18:[function(require,module,exports){
(function (global){
module.exports = global.EventSource;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],19:[function(require,module,exports){
(function (global){
'use strict';

var Driver = global.WebSocket || global.MozWebSocket;
if (Driver) {
	module.exports = function WebSocketBrowserDriver(url) {
		return new Driver(url);
	};
} else {
	module.exports = undefined;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],20:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , EventSourceReceiver = require('./receiver/eventsource')
  , XHRCorsObject = require('./sender/xhr-cors')
  , EventSourceDriver = require('eventsource')
  ;

function EventSourceTransport(transUrl) {
  if (!EventSourceTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  AjaxBasedTransport.call(this, transUrl, '/eventsource', EventSourceReceiver, XHRCorsObject);
}

inherits(EventSourceTransport, AjaxBasedTransport);

EventSourceTransport.enabled = function() {
  return !!EventSourceDriver;
};

EventSourceTransport.transportName = 'eventsource';
EventSourceTransport.roundTrips = 2;

module.exports = EventSourceTransport;

},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,"eventsource":18,"inherits":57}],21:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , HtmlfileReceiver = require('./receiver/htmlfile')
  , XHRLocalObject = require('./sender/xhr-local')
  , AjaxBasedTransport = require('./lib/ajax-based')
  ;

function HtmlFileTransport(transUrl) {
  if (!HtmlfileReceiver.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/htmlfile', HtmlfileReceiver, XHRLocalObject);
}

inherits(HtmlFileTransport, AjaxBasedTransport);

HtmlFileTransport.enabled = function(info) {
  return HtmlfileReceiver.enabled && info.sameOrigin;
};

HtmlFileTransport.transportName = 'htmlfile';
HtmlFileTransport.roundTrips = 2;

module.exports = HtmlFileTransport;

},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,"inherits":57}],22:[function(require,module,exports){
(function (process){
'use strict';

// Few cool transports do work only for same-origin. In order to make
// them work cross-domain we shall use iframe, served from the
// remote domain. New browsers have capabilities to communicate with
// cross domain iframe using postMessage(). In IE it was implemented
// from IE 8+, but of course, IE got some details wrong:
//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx
//    http://stevesouders.com/misc/test-postmessage.php

var inherits = require('inherits')
  , JSON3 = require('json3')
  , EventEmitter = require('events').EventEmitter
  , version = require('../version')
  , urlUtils = require('../utils/url')
  , iframeUtils = require('../utils/iframe')
  , eventUtils = require('../utils/event')
  , random = require('../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:transport:iframe');
}

function IframeTransport(transport, transUrl, baseUrl) {
  if (!IframeTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  EventEmitter.call(this);

  var self = this;
  this.origin = urlUtils.getOrigin(baseUrl);
  this.baseUrl = baseUrl;
  this.transUrl = transUrl;
  this.transport = transport;
  this.windowId = random.string(8);

  var iframeUrl = urlUtils.addPath(baseUrl, '/iframe.html') + '#' + this.windowId;
  debug(transport, transUrl, iframeUrl);

  this.iframeObj = iframeUtils.createIframe(iframeUrl, function(r) {
    debug('err callback');
    self.emit('close', 1006, 'Unable to load an iframe (' + r + ')');
    self.close();
  });

  this.onmessageCallback = this._message.bind(this);
  eventUtils.attachEvent('message', this.onmessageCallback);
}

inherits(IframeTransport, EventEmitter);

IframeTransport.prototype.close = function() {
  debug('close');
  this.removeAllListeners();
  if (this.iframeObj) {
    eventUtils.detachEvent('message', this.onmessageCallback);
    try {
      // When the iframe is not loaded, IE raises an exception
      // on 'contentWindow'.
      this.postMessage('c');
    } catch (x) {
      // intentionally empty
    }
    this.iframeObj.cleanup();
    this.iframeObj = null;
    this.onmessageCallback = this.iframeObj = null;
  }
};

IframeTransport.prototype._message = function(e) {
  debug('message', e.data);
  if (!urlUtils.isOriginEqual(e.origin, this.origin)) {
    debug('not same origin', e.origin, this.origin);
    return;
  }

  var iframeMessage;
  try {
    iframeMessage = JSON3.parse(e.data);
  } catch (ignored) {
    debug('bad json', e.data);
    return;
  }

  if (iframeMessage.windowId !== this.windowId) {
    debug('mismatched window id', iframeMessage.windowId, this.windowId);
    return;
  }

  switch (iframeMessage.type) {
  case 's':
    this.iframeObj.loaded();
    // window global dependency
    this.postMessage('s', JSON3.stringify([
      version
    , this.transport
    , this.transUrl
    , this.baseUrl
    ]));
    break;
  case 't':
    this.emit('message', iframeMessage.data);
    break;
  case 'c':
    var cdata;
    try {
      cdata = JSON3.parse(iframeMessage.data);
    } catch (ignored) {
      debug('bad json', iframeMessage.data);
      return;
    }
    this.emit('close', cdata[0], cdata[1]);
    this.close();
    break;
  }
};

IframeTransport.prototype.postMessage = function(type, data) {
  debug('postMessage', type, data);
  this.iframeObj.post(JSON3.stringify({
    windowId: this.windowId
  , type: type
  , data: data || ''
  }), this.origin);
};

IframeTransport.prototype.send = function(message) {
  debug('send', message);
  this.postMessage('m', message);
};

IframeTransport.enabled = function() {
  return iframeUtils.iframeEnabled;
};

IframeTransport.transportName = 'iframe';
IframeTransport.roundTrips = 2;

module.exports = IframeTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,"debug":55,"events":3,"inherits":57,"json3":58}],23:[function(require,module,exports){
(function (global){
'use strict';

// The simplest and most robust transport, using the well-know cross
// domain hack - JSONP. This transport is quite inefficient - one
// message could use up to one http request. But at least it works almost
// everywhere.
// Known limitations:
//   o you will get a spinning cursor
//   o for Konqueror a dumb timer is needed to detect errors

var inherits = require('inherits')
  , SenderReceiver = require('./lib/sender-receiver')
  , JsonpReceiver = require('./receiver/jsonp')
  , jsonpSender = require('./sender/jsonp')
  ;

function JsonPTransport(transUrl) {
  if (!JsonPTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }
  SenderReceiver.call(this, transUrl, '/jsonp', jsonpSender, JsonpReceiver);
}

inherits(JsonPTransport, SenderReceiver);

JsonPTransport.enabled = function() {
  return !!global.document;
};

JsonPTransport.transportName = 'jsonp-polling';
JsonPTransport.roundTrips = 1;
JsonPTransport.needBody = true;

module.exports = JsonPTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,"inherits":57}],24:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , SenderReceiver = require('./sender-receiver')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:ajax-based');
}

function createAjaxSender(AjaxObject) {
  return function(url, payload, callback) {
    debug('create ajax sender', url, payload);
    var opt = {};
    if (typeof payload === 'string') {
      opt.headers = {'Content-type': 'text/plain'};
    }
    var ajaxUrl = urlUtils.addPath(url, '/xhr_send');
    var xo = new AjaxObject('POST', ajaxUrl, payload, opt);
    xo.once('finish', function(status) {
      debug('finish', status);
      xo = null;

      if (status !== 200 && status !== 204) {
        return callback(new Error('http status ' + status));
      }
      callback();
    });
    return function() {
      debug('abort');
      xo.close();
      xo = null;

      var err = new Error('Aborted');
      err.code = 1000;
      callback(err);
    };
  };
}

function AjaxBasedTransport(transUrl, urlSuffix, Receiver, AjaxObject) {
  SenderReceiver.call(this, transUrl, urlSuffix, createAjaxSender(AjaxObject), Receiver, AjaxObject);
}

inherits(AjaxBasedTransport, SenderReceiver);

module.exports = AjaxBasedTransport;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./sender-receiver":28,"debug":55,"inherits":57}],25:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:buffered-sender');
}

function BufferedSender(url, sender) {
  debug(url);
  EventEmitter.call(this);
  this.sendBuffer = [];
  this.sender = sender;
  this.url = url;
}

inherits(BufferedSender, EventEmitter);

BufferedSender.prototype.send = function(message) {
  debug('send', message);
  this.sendBuffer.push(message);
  if (!this.sendStop) {
    this.sendSchedule();
  }
};

// For polling transports in a situation when in the message callback,
// new message is being send. If the sending connection was started
// before receiving one, it is possible to saturate the network and
// timeout due to the lack of receiving socket. To avoid that we delay
// sending messages by some small time, in order to let receiving
// connection be started beforehand. This is only a halfmeasure and
// does not fix the big problem, but it does make the tests go more
// stable on slow networks.
BufferedSender.prototype.sendScheduleWait = function() {
  debug('sendScheduleWait');
  var self = this;
  var tref;
  this.sendStop = function() {
    debug('sendStop');
    self.sendStop = null;
    clearTimeout(tref);
  };
  tref = setTimeout(function() {
    debug('timeout');
    self.sendStop = null;
    self.sendSchedule();
  }, 25);
};

BufferedSender.prototype.sendSchedule = function() {
  debug('sendSchedule', this.sendBuffer.length);
  var self = this;
  if (this.sendBuffer.length > 0) {
    var payload = '[' + this.sendBuffer.join(',') + ']';
    this.sendStop = this.sender(this.url, payload, function(err) {
      self.sendStop = null;
      if (err) {
        debug('error', err);
        self.emit('close', err.code || 1006, 'Sending error: ' + err);
        self.close();
      } else {
        self.sendScheduleWait();
      }
    });
    this.sendBuffer = [];
  }
};

BufferedSender.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

BufferedSender.prototype.close = function() {
  debug('close');
  this._cleanup();
  if (this.sendStop) {
    this.sendStop();
    this.sendStop = null;
  }
};

module.exports = BufferedSender;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],26:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , IframeTransport = require('../iframe')
  , objectUtils = require('../../utils/object')
  ;

module.exports = function(transport) {

  function IframeWrapTransport(transUrl, baseUrl) {
    IframeTransport.call(this, transport.transportName, transUrl, baseUrl);
  }

  inherits(IframeWrapTransport, IframeTransport);

  IframeWrapTransport.enabled = function(url, info) {
    if (!global.document) {
      return false;
    }

    var iframeInfo = objectUtils.extend({}, info);
    iframeInfo.sameOrigin = true;
    return transport.enabled(iframeInfo) && IframeTransport.enabled();
  };

  IframeWrapTransport.transportName = 'iframe-' + transport.transportName;
  IframeWrapTransport.needBody = true;
  IframeWrapTransport.roundTrips = IframeTransport.roundTrips + transport.roundTrips - 1; // html, javascript (2) + transport - no CORS (1)

  IframeWrapTransport.facadeTransport = transport;

  return IframeWrapTransport;
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/object":49,"../iframe":22,"inherits":57}],27:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:polling');
}

function Polling(Receiver, receiveUrl, AjaxObject) {
  debug(receiveUrl);
  EventEmitter.call(this);
  this.Receiver = Receiver;
  this.receiveUrl = receiveUrl;
  this.AjaxObject = AjaxObject;
  this._scheduleReceiver();
}

inherits(Polling, EventEmitter);

Polling.prototype._scheduleReceiver = function() {
  debug('_scheduleReceiver');
  var self = this;
  var poll = this.poll = new this.Receiver(this.receiveUrl, this.AjaxObject);

  poll.on('message', function(msg) {
    debug('message', msg);
    self.emit('message', msg);
  });

  poll.once('close', function(code, reason) {
    debug('close', code, reason, self.pollIsClosing);
    self.poll = poll = null;

    if (!self.pollIsClosing) {
      if (reason === 'network') {
        self._scheduleReceiver();
      } else {
        self.emit('close', code || 1006, reason);
        self.removeAllListeners();
      }
    }
  });
};

Polling.prototype.abort = function() {
  debug('abort');
  this.removeAllListeners();
  this.pollIsClosing = true;
  if (this.poll) {
    this.poll.abort();
  }
};

module.exports = Polling;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],28:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , urlUtils = require('../../utils/url')
  , BufferedSender = require('./buffered-sender')
  , Polling = require('./polling')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender-receiver');
}

function SenderReceiver(transUrl, urlSuffix, senderFunc, Receiver, AjaxObject) {
  var pollUrl = urlUtils.addPath(transUrl, urlSuffix);
  debug(pollUrl);
  var self = this;
  BufferedSender.call(this, transUrl, senderFunc);

  this.poll = new Polling(Receiver, pollUrl, AjaxObject);
  this.poll.on('message', function(msg) {
    debug('poll message', msg);
    self.emit('message', msg);
  });
  this.poll.once('close', function(code, reason) {
    debug('poll close', code, reason);
    self.poll = null;
    self.emit('close', code, reason);
    self.close();
  });
}

inherits(SenderReceiver, BufferedSender);

SenderReceiver.prototype.close = function() {
  BufferedSender.prototype.close.call(this);
  debug('close');
  this.removeAllListeners();
  if (this.poll) {
    this.poll.abort();
    this.poll = null;
  }
};

module.exports = SenderReceiver;

}).call(this,{ env: {} })

},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,"debug":55,"inherits":57}],29:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , EventSourceDriver = require('eventsource')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:eventsource');
}

function EventSourceReceiver(url) {
  debug(url);
  EventEmitter.call(this);

  var self = this;
  var es = this.es = new EventSourceDriver(url);
  es.onmessage = function(e) {
    debug('message', e.data);
    self.emit('message', decodeURI(e.data));
  };
  es.onerror = function(e) {
    debug('error', es.readyState, e);
    // ES on reconnection has readyState = 0 or 1.
    // on network error it's CLOSED = 2
    var reason = (es.readyState !== 2 ? 'network' : 'permanent');
    self._cleanup();
    self._close(reason);
  };
}

inherits(EventSourceReceiver, EventEmitter);

EventSourceReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

EventSourceReceiver.prototype._cleanup = function() {
  debug('cleanup');
  var es = this.es;
  if (es) {
    es.onmessage = es.onerror = null;
    es.close();
    this.es = null;
  }
};

EventSourceReceiver.prototype._close = function(reason) {
  debug('close', reason);
  var self = this;
  // Safari and chrome < 15 crash if we close window before
  // waiting for ES cleanup. See:
  // https://code.google.com/p/chromium/issues/detail?id=89155
  setTimeout(function() {
    self.emit('close', null, reason);
    self.removeAllListeners();
  }, 200);
};

module.exports = EventSourceReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"eventsource":18,"inherits":57}],30:[function(require,module,exports){
(function (process,global){
'use strict';

var inherits = require('inherits')
  , iframeUtils = require('../../utils/iframe')
  , urlUtils = require('../../utils/url')
  , EventEmitter = require('events').EventEmitter
  , random = require('../../utils/random')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:htmlfile');
}

function HtmlfileReceiver(url) {
  debug(url);
  EventEmitter.call(this);
  var self = this;
  iframeUtils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  url = urlUtils.addQuery(url, 'c=' + decodeURIComponent(iframeUtils.WPrefix + '.' + this.id));

  debug('using htmlfile', HtmlfileReceiver.htmlfileEnabled);
  var constructFunc = HtmlfileReceiver.htmlfileEnabled ?
      iframeUtils.createHtmlfile : iframeUtils.createIframe;

  global[iframeUtils.WPrefix][this.id] = {
    start: function() {
      debug('start');
      self.iframeObj.loaded();
    }
  , message: function(data) {
      debug('message', data);
      self.emit('message', data);
    }
  , stop: function() {
      debug('stop');
      self._cleanup();
      self._close('network');
    }
  };
  this.iframeObj = constructFunc(url, function() {
    debug('callback');
    self._cleanup();
    self._close('permanent');
  });
}

inherits(HtmlfileReceiver, EventEmitter);

HtmlfileReceiver.prototype.abort = function() {
  debug('abort');
  this._cleanup();
  this._close('user');
};

HtmlfileReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  if (this.iframeObj) {
    this.iframeObj.cleanup();
    this.iframeObj = null;
  }
  delete global[iframeUtils.WPrefix][this.id];
};

HtmlfileReceiver.prototype._close = function(reason) {
  debug('_close', reason);
  this.emit('close', null, reason);
  this.removeAllListeners();
};

HtmlfileReceiver.htmlfileEnabled = false;

// obfuscate to avoid firewalls
var axo = ['Active'].concat('Object').join('X');
if (axo in global) {
  try {
    HtmlfileReceiver.htmlfileEnabled = !!new global[axo]('htmlfile');
  } catch (x) {
    // intentionally empty
  }
}

HtmlfileReceiver.enabled = HtmlfileReceiver.htmlfileEnabled || iframeUtils.iframeEnabled;

module.exports = HtmlfileReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],31:[function(require,module,exports){
(function (process,global){
'use strict';

var utils = require('../../utils/iframe')
  , random = require('../../utils/random')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:jsonp');
}

function JsonpReceiver(url) {
  debug(url);
  var self = this;
  EventEmitter.call(this);

  utils.polluteGlobalNamespace();

  this.id = 'a' + random.string(6);
  var urlWithId = urlUtils.addQuery(url, 'c=' + encodeURIComponent(utils.WPrefix + '.' + this.id));

  global[utils.WPrefix][this.id] = this._callback.bind(this);
  this._createScript(urlWithId);

  // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.
  this.timeoutId = setTimeout(function() {
    debug('timeout');
    self._abort(new Error('JSONP script loaded abnormally (timeout)'));
  }, JsonpReceiver.timeout);
}

inherits(JsonpReceiver, EventEmitter);

JsonpReceiver.prototype.abort = function() {
  debug('abort');
  if (global[utils.WPrefix][this.id]) {
    var err = new Error('JSONP user aborted read');
    err.code = 1000;
    this._abort(err);
  }
};

JsonpReceiver.timeout = 35000;
JsonpReceiver.scriptErrorTimeout = 1000;

JsonpReceiver.prototype._callback = function(data) {
  debug('_callback', data);
  this._cleanup();

  if (this.aborting) {
    return;
  }

  if (data) {
    debug('message', data);
    this.emit('message', data);
  }
  this.emit('close', null, 'network');
  this.removeAllListeners();
};

JsonpReceiver.prototype._abort = function(err) {
  debug('_abort', err);
  this._cleanup();
  this.aborting = true;
  this.emit('close', err.code, err.message);
  this.removeAllListeners();
};

JsonpReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  clearTimeout(this.timeoutId);
  if (this.script2) {
    this.script2.parentNode.removeChild(this.script2);
    this.script2 = null;
  }
  if (this.script) {
    var script = this.script;
    // Unfortunately, you can't really abort script loading of
    // the script.
    script.parentNode.removeChild(script);
    script.onreadystatechange = script.onerror =
        script.onload = script.onclick = null;
    this.script = null;
  }
  delete global[utils.WPrefix][this.id];
};

JsonpReceiver.prototype._scriptError = function() {
  debug('_scriptError');
  var self = this;
  if (this.errorTimer) {
    return;
  }

  this.errorTimer = setTimeout(function() {
    if (!self.loadedOkay) {
      self._abort(new Error('JSONP script loaded abnormally (onerror)'));
    }
  }, JsonpReceiver.scriptErrorTimeout);
};

JsonpReceiver.prototype._createScript = function(url) {
  debug('_createScript', url);
  var self = this;
  var script = this.script = global.document.createElement('script');
  var script2;  // Opera synchronous load trick.

  script.id = 'a' + random.string(8);
  script.src = url;
  script.type = 'text/javascript';
  script.charset = 'UTF-8';
  script.onerror = this._scriptError.bind(this);
  script.onload = function() {
    debug('onload');
    self._abort(new Error('JSONP script loaded abnormally (onload)'));
  };

  // IE9 fires 'error' event after onreadystatechange or before, in random order.
  // Use loadedOkay to determine if actually errored
  script.onreadystatechange = function() {
    debug('onreadystatechange', script.readyState);
    if (/loaded|closed/.test(script.readyState)) {
      if (script && script.htmlFor && script.onclick) {
        self.loadedOkay = true;
        try {
          // In IE, actually execute the script.
          script.onclick();
        } catch (x) {
          // intentionally empty
        }
      }
      if (script) {
        self._abort(new Error('JSONP script loaded abnormally (onreadystatechange)'));
      }
    }
  };
  // IE: event/htmlFor/onclick trick.
  // One can't rely on proper order for onreadystatechange. In order to
  // make sure, set a 'htmlFor' and 'event' properties, so that
  // script code will be installed as 'onclick' handler for the
  // script object. Later, onreadystatechange, manually execute this
  // code. FF and Chrome doesn't work with 'event' and 'htmlFor'
  // set. For reference see:
  //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html
  // Also, read on that about script ordering:
  //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order
  if (typeof script.async === 'undefined' && global.document.attachEvent) {
    // According to mozilla docs, in recent browsers script.async defaults
    // to 'true', so we may use it to detect a good browser:
    // https://developer.mozilla.org/en/HTML/Element/script
    if (!browser.isOpera()) {
      // Naively assume we're in IE
      try {
        script.htmlFor = script.id;
        script.event = 'onclick';
      } catch (x) {
        // intentionally empty
      }
      script.async = true;
    } else {
      // Opera, second sync script hack
      script2 = this.script2 = global.document.createElement('script');
      script2.text = "try{var a = document.getElementById('" + script.id + "'); if(a)a.onerror();}catch(x){};";
      script.async = script2.async = false;
    }
  }
  if (typeof script.async !== 'undefined') {
    script.async = true;
  }

  var head = global.document.getElementsByTagName('head')[0];
  head.insertBefore(script, head.firstChild);
  if (script2) {
    head.insertBefore(script2, head.firstChild);
  }
};

module.exports = JsonpReceiver;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],32:[function(require,module,exports){
(function (process){
'use strict';

var inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:receiver:xhr');
}

function XhrReceiver(url, AjaxObject) {
  debug(url);
  EventEmitter.call(this);
  var self = this;

  this.bufferPosition = 0;

  this.xo = new AjaxObject('POST', url, null);
  this.xo.on('chunk', this._chunkHandler.bind(this));
  this.xo.once('finish', function(status, text) {
    debug('finish', status, text);
    self._chunkHandler(status, text);
    self.xo = null;
    var reason = status === 200 ? 'network' : 'permanent';
    debug('close', reason);
    self.emit('close', null, reason);
    self._cleanup();
  });
}

inherits(XhrReceiver, EventEmitter);

XhrReceiver.prototype._chunkHandler = function(status, text) {
  debug('_chunkHandler', status);
  if (status !== 200 || !text) {
    return;
  }

  for (var idx = -1; ; this.bufferPosition += idx + 1) {
    var buf = text.slice(this.bufferPosition);
    idx = buf.indexOf('\n');
    if (idx === -1) {
      break;
    }
    var msg = buf.slice(0, idx);
    if (msg) {
      debug('message', msg);
      this.emit('message', msg);
    }
  }
};

XhrReceiver.prototype._cleanup = function() {
  debug('_cleanup');
  this.removeAllListeners();
};

XhrReceiver.prototype.abort = function() {
  debug('abort');
  if (this.xo) {
    this.xo.close();
    debug('close');
    this.emit('close', null, 'user');
    this.xo = null;
  }
  this._cleanup();
};

module.exports = XhrReceiver;

}).call(this,{ env: {} })

},{"debug":55,"events":3,"inherits":57}],33:[function(require,module,exports){
(function (process,global){
'use strict';

var random = require('../../utils/random')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:jsonp');
}

var form, area;

function createIframe(id) {
  debug('createIframe', id);
  try {
    // ie6 dynamic iframes with target="" support (thanks Chris Lambacher)
    return global.document.createElement('<iframe name="' + id + '">');
  } catch (x) {
    var iframe = global.document.createElement('iframe');
    iframe.name = id;
    return iframe;
  }
}

function createForm() {
  debug('createForm');
  form = global.document.createElement('form');
  form.style.display = 'none';
  form.style.position = 'absolute';
  form.method = 'POST';
  form.enctype = 'application/x-www-form-urlencoded';
  form.acceptCharset = 'UTF-8';

  area = global.document.createElement('textarea');
  area.name = 'd';
  form.appendChild(area);

  global.document.body.appendChild(form);
}

module.exports = function(url, payload, callback) {
  debug(url, payload);
  if (!form) {
    createForm();
  }
  var id = 'a' + random.string(8);
  form.target = id;
  form.action = urlUtils.addQuery(urlUtils.addPath(url, '/jsonp_send'), 'i=' + id);

  var iframe = createIframe(id);
  iframe.id = id;
  iframe.style.display = 'none';
  form.appendChild(iframe);

  try {
    area.value = payload;
  } catch (e) {
    // seriously broken browsers get here
  }
  form.submit();

  var completed = function(err) {
    debug('completed', id, err);
    if (!iframe.onerror) {
      return;
    }
    iframe.onreadystatechange = iframe.onerror = iframe.onload = null;
    // Opera mini doesn't like if we GC iframe
    // immediately, thus this timeout.
    setTimeout(function() {
      debug('cleaning up', id);
      iframe.parentNode.removeChild(iframe);
      iframe = null;
    }, 500);
    area.value = '';
    // It is not possible to detect if the iframe succeeded or
    // failed to submit our form.
    callback(err);
  };
  iframe.onerror = function() {
    debug('onerror', id);
    completed();
  };
  iframe.onload = function() {
    debug('onload', id);
    completed();
  };
  iframe.onreadystatechange = function(e) {
    debug('onreadystatechange', id, iframe.readyState, e);
    if (iframe.readyState === 'complete') {
      completed();
    }
  };
  return function() {
    debug('aborted', id);
    completed(new Error('Aborted'));
  };
};

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/random":50,"../../utils/url":52,"debug":55}],34:[function(require,module,exports){
(function (process,global){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  , eventUtils = require('../../utils/event')
  , browser = require('../../utils/browser')
  , urlUtils = require('../../utils/url')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:sender:xdr');
}

// References:
//   http://ajaxian.com/archives/100-line-ajax-wrapper
//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx

function XDRObject(method, url, payload) {
  debug(method, url);
  var self = this;
  EventEmitter.call(this);

  setTimeout(function() {
    self._start(method, url, payload);
  }, 0);
}

inherits(XDRObject, EventEmitter);

XDRObject.prototype._start = function(method, url, payload) {
  debug('_start');
  var self = this;
  var xdr = new global.XDomainRequest();
  // IE caches even POSTs
  url = urlUtils.addQuery(url, 't=' + (+new Date()));

  xdr.onerror = function() {
    debug('onerror');
    self._error();
  };
  xdr.ontimeout = function() {
    debug('ontimeout');
    self._error();
  };
  xdr.onprogress = function() {
    debug('progress', xdr.responseText);
    self.emit('chunk', 200, xdr.responseText);
  };
  xdr.onload = function() {
    debug('load');
    self.emit('finish', 200, xdr.responseText);
    self._cleanup(false);
  };
  this.xdr = xdr;
  this.unloadRef = eventUtils.unloadAdd(function() {
    self._cleanup(true);
  });
  try {
    // Fails with AccessDenied if port number is bogus
    this.xdr.open(method, url);
    if (this.timeout) {
      this.xdr.timeout = this.timeout;
    }
    this.xdr.send(payload);
  } catch (x) {
    this._error();
  }
};

XDRObject.prototype._error = function() {
  this.emit('finish', 0, '');
  this._cleanup(false);
};

XDRObject.prototype._cleanup = function(abort) {
  debug('cleanup', abort);
  if (!this.xdr) {
    return;
  }
  this.removeAllListeners();
  eventUtils.unloadDel(this.unloadRef);

  this.xdr.ontimeout = this.xdr.onerror = this.xdr.onprogress = this.xdr.onload = null;
  if (abort) {
    try {
      this.xdr.abort();
    } catch (x) {
      // intentionally empty
    }
  }
  this.unloadRef = this.xdr = null;
};

XDRObject.prototype.close = function() {
  debug('close');
  this._cleanup(true);
};

// IE 8/9 if the request target uses the same scheme - #79
XDRObject.enabled = !!(global.XDomainRequest && browser.hasDomain());

module.exports = XDRObject;

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,"debug":55,"events":3,"inherits":57}],35:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRCorsObject(method, url, payload, opts) {
  XhrDriver.call(this, method, url, payload, opts);
}

inherits(XHRCorsObject, XhrDriver);

XHRCorsObject.enabled = XhrDriver.enabled && XhrDriver.supportsCORS;

module.exports = XHRCorsObject;

},{"../driver/xhr":17,"inherits":57}],36:[function(require,module,exports){
'use strict';

var EventEmitter = require('events').EventEmitter
  , inherits = require('inherits')
  ;

function XHRFake(/* method, url, payload, opts */) {
  var self = this;
  EventEmitter.call(this);

  this.to = setTimeout(function() {
    self.emit('finish', 200, '{}');
  }, XHRFake.timeout);
}

inherits(XHRFake, EventEmitter);

XHRFake.prototype.close = function() {
  clearTimeout(this.to);
};

XHRFake.timeout = 2000;

module.exports = XHRFake;

},{"events":3,"inherits":57}],37:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , XhrDriver = require('../driver/xhr')
  ;

function XHRLocalObject(method, url, payload /*, opts */) {
  XhrDriver.call(this, method, url, payload, {
    noCredentials: true
  });
}

inherits(XHRLocalObject, XhrDriver);

XHRLocalObject.enabled = XhrDriver.enabled;

module.exports = XHRLocalObject;

},{"../driver/xhr":17,"inherits":57}],38:[function(require,module,exports){
(function (process){
'use strict';

var utils = require('../utils/event')
  , urlUtils = require('../utils/url')
  , inherits = require('inherits')
  , EventEmitter = require('events').EventEmitter
  , WebsocketDriver = require('./driver/websocket')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:websocket');
}

function WebSocketTransport(transUrl, ignore, options) {
  if (!WebSocketTransport.enabled()) {
    throw new Error('Transport created when disabled');
  }

  EventEmitter.call(this);
  debug('constructor', transUrl);

  var self = this;
  var url = urlUtils.addPath(transUrl, '/websocket');
  if (url.slice(0, 5) === 'https') {
    url = 'wss' + url.slice(5);
  } else {
    url = 'ws' + url.slice(4);
  }
  this.url = url;

  this.ws = new WebsocketDriver(this.url, [], options);
  this.ws.onmessage = function(e) {
    debug('message event', e.data);
    self.emit('message', e.data);
  };
  // Firefox has an interesting bug. If a websocket connection is
  // created after onunload, it stays alive even when user
  // navigates away from the page. In such situation let's lie -
  // let's not open the ws connection at all. See:
  // https://github.com/sockjs/sockjs-client/issues/28
  // https://bugzilla.mozilla.org/show_bug.cgi?id=696085
  this.unloadRef = utils.unloadAdd(function() {
    debug('unload');
    self.ws.close();
  });
  this.ws.onclose = function(e) {
    debug('close event', e.code, e.reason);
    self.emit('close', e.code, e.reason);
    self._cleanup();
  };
  this.ws.onerror = function(e) {
    debug('error event', e);
    self.emit('close', 1006, 'WebSocket connection broken');
    self._cleanup();
  };
}

inherits(WebSocketTransport, EventEmitter);

WebSocketTransport.prototype.send = function(data) {
  var msg = '[' + data + ']';
  debug('send', msg);
  this.ws.send(msg);
};

WebSocketTransport.prototype.close = function() {
  debug('close');
  var ws = this.ws;
  this._cleanup();
  if (ws) {
    ws.close();
  }
};

WebSocketTransport.prototype._cleanup = function() {
  debug('_cleanup');
  var ws = this.ws;
  if (ws) {
    ws.onmessage = ws.onclose = ws.onerror = null;
  }
  utils.unloadDel(this.unloadRef);
  this.unloadRef = this.ws = null;
  this.removeAllListeners();
};

WebSocketTransport.enabled = function() {
  debug('enabled');
  return !!WebsocketDriver;
};
WebSocketTransport.transportName = 'websocket';

// In theory, ws should require 1 round trip. But in chrome, this is
// not very stable over SSL. Most likely a ws connection requires a
// separate SSL connection, in which case 2 round trips are an
// absolute minumum.
WebSocketTransport.roundTrips = 2;

module.exports = WebSocketTransport;

}).call(this,{ env: {} })

},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,"debug":55,"events":3,"inherits":57}],39:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XdrStreamingTransport = require('./xdr-streaming')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

function XdrPollingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XDRObject);
}

inherits(XdrPollingTransport, AjaxBasedTransport);

XdrPollingTransport.enabled = XdrStreamingTransport.enabled;
XdrPollingTransport.transportName = 'xdr-polling';
XdrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,"inherits":57}],40:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XDRObject = require('./sender/xdr')
  ;

// According to:
//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests
//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/

function XdrStreamingTransport(transUrl) {
  if (!XDRObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XDRObject);
}

inherits(XdrStreamingTransport, AjaxBasedTransport);

XdrStreamingTransport.enabled = function(info) {
  if (info.cookie_needed || info.nullOrigin) {
    return false;
  }
  return XDRObject.enabled && info.sameScheme;
};

XdrStreamingTransport.transportName = 'xdr-streaming';
XdrStreamingTransport.roundTrips = 2; // preflight, ajax

module.exports = XdrStreamingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"inherits":57}],41:[function(require,module,exports){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  ;

function XhrPollingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr', XhrReceiver, XHRCorsObject);
}

inherits(XhrPollingTransport, AjaxBasedTransport);

XhrPollingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }

  if (XHRLocalObject.enabled && info.sameOrigin) {
    return true;
  }
  return XHRCorsObject.enabled;
};

XhrPollingTransport.transportName = 'xhr-polling';
XhrPollingTransport.roundTrips = 2; // preflight, ajax

module.exports = XhrPollingTransport;

},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],42:[function(require,module,exports){
(function (global){
'use strict';

var inherits = require('inherits')
  , AjaxBasedTransport = require('./lib/ajax-based')
  , XhrReceiver = require('./receiver/xhr')
  , XHRCorsObject = require('./sender/xhr-cors')
  , XHRLocalObject = require('./sender/xhr-local')
  , browser = require('../utils/browser')
  ;

function XhrStreamingTransport(transUrl) {
  if (!XHRLocalObject.enabled && !XHRCorsObject.enabled) {
    throw new Error('Transport created when disabled');
  }
  AjaxBasedTransport.call(this, transUrl, '/xhr_streaming', XhrReceiver, XHRCorsObject);
}

inherits(XhrStreamingTransport, AjaxBasedTransport);

XhrStreamingTransport.enabled = function(info) {
  if (info.nullOrigin) {
    return false;
  }
  // Opera doesn't support xhr-streaming #60
  // But it might be able to #92
  if (browser.isOpera()) {
    return false;
  }

  return XHRCorsObject.enabled;
};

XhrStreamingTransport.transportName = 'xhr-streaming';
XhrStreamingTransport.roundTrips = 2; // preflight, ajax

// Safari gets confused when a streaming ajax request is started
// before onload. This causes the load indicator to spin indefinetely.
// Only require body when used in a browser
XhrStreamingTransport.needBody = !!global.document;

module.exports = XhrStreamingTransport;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,"inherits":57}],43:[function(require,module,exports){
(function (global){
'use strict';

if (global.crypto && global.crypto.getRandomValues) {
  module.exports.randomBytes = function(length) {
    var bytes = new Uint8Array(length);
    global.crypto.getRandomValues(bytes);
    return bytes;
  };
} else {
  module.exports.randomBytes = function(length) {
    var bytes = new Array(length);
    for (var i = 0; i < length; i++) {
      bytes[i] = Math.floor(Math.random() * 256);
    }
    return bytes;
  };
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],44:[function(require,module,exports){
(function (global){
'use strict';

module.exports = {
  isOpera: function() {
    return global.navigator &&
      /opera/i.test(global.navigator.userAgent);
  }

, isKonqueror: function() {
    return global.navigator &&
      /konqueror/i.test(global.navigator.userAgent);
  }

  // #187 wrap document.domain in try/catch because of WP8 from file:///
, hasDomain: function () {
    // non-browser client always has a domain
    if (!global.document) {
      return true;
    }

    try {
      return !!global.document.domain;
    } catch (e) {
      return false;
    }
  }
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],45:[function(require,module,exports){
'use strict';

var JSON3 = require('json3');

// Some extra characters that Chrome gets wrong, and substitutes with
// something else on the wire.
// eslint-disable-next-line no-control-regex
var extraEscapable = /[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g
  , extraLookup;

// This may be quite slow, so let's delay until user actually uses bad
// characters.
var unrollLookup = function(escapable) {
  var i;
  var unrolled = {};
  var c = [];
  for (i = 0; i < 65536; i++) {
    c.push( String.fromCharCode(i) );
  }
  escapable.lastIndex = 0;
  c.join('').replace(escapable, function(a) {
    unrolled[ a ] = '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
    return '';
  });
  escapable.lastIndex = 0;
  return unrolled;
};

// Quote string, also taking care of unicode characters that browsers
// often break. Especially, take care of unicode surrogates:
// http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates
module.exports = {
  quote: function(string) {
    var quoted = JSON3.stringify(string);

    // In most cases this should be very fast and good enough.
    extraEscapable.lastIndex = 0;
    if (!extraEscapable.test(quoted)) {
      return quoted;
    }

    if (!extraLookup) {
      extraLookup = unrollLookup(extraEscapable);
    }

    return quoted.replace(extraEscapable, function(a) {
      return extraLookup[a];
    });
  }
};

},{"json3":58}],46:[function(require,module,exports){
(function (global){
'use strict';

var random = require('./random');

var onUnload = {}
  , afterUnload = false
    // detect google chrome packaged apps because they don't allow the 'unload' event
  , isChromePackagedApp = global.chrome && global.chrome.app && global.chrome.app.runtime
  ;

module.exports = {
  attachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.addEventListener(event, listener, false);
    } else if (global.document && global.attachEvent) {
      // IE quirks.
      // According to: http://stevesouders.com/misc/test-postmessage.php
      // the message gets delivered only to 'document', not 'window'.
      global.document.attachEvent('on' + event, listener);
      // I get 'window' for ie8.
      global.attachEvent('on' + event, listener);
    }
  }

, detachEvent: function(event, listener) {
    if (typeof global.addEventListener !== 'undefined') {
      global.removeEventListener(event, listener, false);
    } else if (global.document && global.detachEvent) {
      global.document.detachEvent('on' + event, listener);
      global.detachEvent('on' + event, listener);
    }
  }

, unloadAdd: function(listener) {
    if (isChromePackagedApp) {
      return null;
    }

    var ref = random.string(8);
    onUnload[ref] = listener;
    if (afterUnload) {
      setTimeout(this.triggerUnloadCallbacks, 0);
    }
    return ref;
  }

, unloadDel: function(ref) {
    if (ref in onUnload) {
      delete onUnload[ref];
    }
  }

, triggerUnloadCallbacks: function() {
    for (var ref in onUnload) {
      onUnload[ref]();
      delete onUnload[ref];
    }
  }
};

var unloadTriggered = function() {
  if (afterUnload) {
    return;
  }
  afterUnload = true;
  module.exports.triggerUnloadCallbacks();
};

// 'unload' alone is not reliable in opera within an iframe, but we
// can't use `beforeunload` as IE fires it on javascript: links.
if (!isChromePackagedApp) {
  module.exports.attachEvent('unload', unloadTriggered);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./random":50}],47:[function(require,module,exports){
(function (process,global){
'use strict';

var eventUtils = require('./event')
  , JSON3 = require('json3')
  , browser = require('./browser')
  ;

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:iframe');
}

module.exports = {
  WPrefix: '_jp'
, currentWindowId: null

, polluteGlobalNamespace: function() {
    if (!(module.exports.WPrefix in global)) {
      global[module.exports.WPrefix] = {};
    }
  }

, postMessage: function(type, data) {
    if (global.parent !== global) {
      global.parent.postMessage(JSON3.stringify({
        windowId: module.exports.currentWindowId
      , type: type
      , data: data || ''
      }), '*');
    } else {
      debug('Cannot postMessage, no parent window.', type, data);
    }
  }

, createIframe: function(iframeUrl, errorCallback) {
    var iframe = global.document.createElement('iframe');
    var tref, unloadRef;
    var unattach = function() {
      debug('unattach');
      clearTimeout(tref);
      // Explorer had problems with that.
      try {
        iframe.onload = null;
      } catch (x) {
        // intentionally empty
      }
      iframe.onerror = null;
    };
    var cleanup = function() {
      debug('cleanup');
      if (iframe) {
        unattach();
        // This timeout makes chrome fire onbeforeunload event
        // within iframe. Without the timeout it goes straight to
        // onunload.
        setTimeout(function() {
          if (iframe) {
            iframe.parentNode.removeChild(iframe);
          }
          iframe = null;
        }, 0);
        eventUtils.unloadDel(unloadRef);
      }
    };
    var onerror = function(err) {
      debug('onerror', err);
      if (iframe) {
        cleanup();
        errorCallback(err);
      }
    };
    var post = function(msg, origin) {
      debug('post', msg, origin);
      setTimeout(function() {
        try {
          // When the iframe is not loaded, IE raises an exception
          // on 'contentWindow'.
          if (iframe && iframe.contentWindow) {
            iframe.contentWindow.postMessage(msg, origin);
          }
        } catch (x) {
          // intentionally empty
        }
      }, 0);
    };

    iframe.src = iframeUrl;
    iframe.style.display = 'none';
    iframe.style.position = 'absolute';
    iframe.onerror = function() {
      onerror('onerror');
    };
    iframe.onload = function() {
      debug('onload');
      // `onload` is triggered before scripts on the iframe are
      // executed. Give it few seconds to actually load stuff.
      clearTimeout(tref);
      tref = setTimeout(function() {
        onerror('onload timeout');
      }, 2000);
    };
    global.document.body.appendChild(iframe);
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }

/* eslint no-undef: "off", new-cap: "off" */
, createHtmlfile: function(iframeUrl, errorCallback) {
    var axo = ['Active'].concat('Object').join('X');
    var doc = new global[axo]('htmlfile');
    var tref, unloadRef;
    var iframe;
    var unattach = function() {
      clearTimeout(tref);
      iframe.onerror = null;
    };
    var cleanup = function() {
      if (doc) {
        unattach();
        eventUtils.unloadDel(unloadRef);
        iframe.parentNode.removeChild(iframe);
        iframe = doc = null;
        CollectGarbage();
      }
    };
    var onerror = function(r) {
      debug('onerror', r);
      if (doc) {
        cleanup();
        errorCallback(r);
      }
    };
    var post = function(msg, origin) {
      try {
        // When the iframe is not loaded, IE raises an exception
        // on 'contentWindow'.
        setTimeout(function() {
          if (iframe && iframe.contentWindow) {
              iframe.contentWindow.postMessage(msg, origin);
          }
        }, 0);
      } catch (x) {
        // intentionally empty
      }
    };

    doc.open();
    doc.write('<html><s' + 'cript>' +
              'document.domain="' + global.document.domain + '";' +
              '</s' + 'cript></html>');
    doc.close();
    doc.parentWindow[module.exports.WPrefix] = global[module.exports.WPrefix];
    var c = doc.createElement('div');
    doc.body.appendChild(c);
    iframe = doc.createElement('iframe');
    c.appendChild(iframe);
    iframe.src = iframeUrl;
    iframe.onerror = function() {
      onerror('onerror');
    };
    tref = setTimeout(function() {
      onerror('timeout');
    }, 15000);
    unloadRef = eventUtils.unloadAdd(cleanup);
    return {
      post: post
    , cleanup: cleanup
    , loaded: unattach
    };
  }
};

module.exports.iframeEnabled = false;
if (global.document) {
  // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with
  // huge delay, or not at all.
  module.exports.iframeEnabled = (typeof global.postMessage === 'function' ||
    typeof global.postMessage === 'object') && (!browser.isKonqueror());
}

}).call(this,{ env: {} },typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./browser":44,"./event":46,"debug":55,"json3":58}],48:[function(require,module,exports){
(function (global){
'use strict';

var logObject = {};
['log', 'debug', 'warn'].forEach(function (level) {
  var levelExists;

  try {
    levelExists = global.console && global.console[level] && global.console[level].apply;
  } catch(e) {
    // do nothing
  }

  logObject[level] = levelExists ? function () {
    return global.console[level].apply(global.console, arguments);
  } : (level === 'log' ? function () {} : logObject.log);
});

module.exports = logObject;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],49:[function(require,module,exports){
'use strict';

module.exports = {
  isObject: function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  }

, extend: function(obj) {
    if (!this.isObject(obj)) {
      return obj;
    }
    var source, prop;
    for (var i = 1, length = arguments.length; i < length; i++) {
      source = arguments[i];
      for (prop in source) {
        if (Object.prototype.hasOwnProperty.call(source, prop)) {
          obj[prop] = source[prop];
        }
      }
    }
    return obj;
  }
};

},{}],50:[function(require,module,exports){
'use strict';

/* global crypto:true */
var crypto = require('crypto');

// This string has length 32, a power of 2, so the modulus doesn't introduce a
// bias.
var _randomStringChars = 'abcdefghijklmnopqrstuvwxyz012345';
module.exports = {
  string: function(length) {
    var max = _randomStringChars.length;
    var bytes = crypto.randomBytes(length);
    var ret = [];
    for (var i = 0; i < length; i++) {
      ret.push(_randomStringChars.substr(bytes[i] % max, 1));
    }
    return ret.join('');
  }

, number: function(max) {
    return Math.floor(Math.random() * max);
  }

, numberString: function(max) {
    var t = ('' + (max - 1)).length;
    var p = new Array(t + 1).join('0');
    return (p + this.number(max)).slice(-t);
  }
};

},{"crypto":43}],51:[function(require,module,exports){
(function (process){
'use strict';

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:transport');
}

module.exports = function(availableTransports) {
  return {
    filterToEnabled: function(transportsWhitelist, info) {
      var transports = {
        main: []
      , facade: []
      };
      if (!transportsWhitelist) {
        transportsWhitelist = [];
      } else if (typeof transportsWhitelist === 'string') {
        transportsWhitelist = [transportsWhitelist];
      }

      availableTransports.forEach(function(trans) {
        if (!trans) {
          return;
        }

        if (trans.transportName === 'websocket' && info.websocket === false) {
          debug('disabled from server', 'websocket');
          return;
        }

        if (transportsWhitelist.length &&
            transportsWhitelist.indexOf(trans.transportName) === -1) {
          debug('not in whitelist', trans.transportName);
          return;
        }

        if (trans.enabled(info)) {
          debug('enabled', trans.transportName);
          transports.main.push(trans);
          if (trans.facadeTransport) {
            transports.facade.push(trans.facadeTransport);
          }
        } else {
          debug('disabled', trans.transportName);
        }
      });
      return transports;
    }
  };
};

}).call(this,{ env: {} })

},{"debug":55}],52:[function(require,module,exports){
(function (process){
'use strict';

var URL = require('url-parse');

var debug = function() {};
if (process.env.NODE_ENV !== 'production') {
  debug = require('debug')('sockjs-client:utils:url');
}

module.exports = {
  getOrigin: function(url) {
    if (!url) {
      return null;
    }

    var p = new URL(url);
    if (p.protocol === 'file:') {
      return null;
    }

    var port = p.port;
    if (!port) {
      port = (p.protocol === 'https:') ? '443' : '80';
    }

    return p.protocol + '//' + p.hostname + ':' + port;
  }

, isOriginEqual: function(a, b) {
    var res = this.getOrigin(a) === this.getOrigin(b);
    debug('same', a, b, res);
    return res;
  }

, isSchemeEqual: function(a, b) {
    return (a.split(':')[0] === b.split(':')[0]);
  }

, addPath: function (url, path) {
    var qs = url.split('?');
    return qs[0] + path + (qs[1] ? '?' + qs[1] : '');
  }

, addQuery: function (url, q) {
    return url + (url.indexOf('?') === -1 ? ('?' + q) : ('&' + q));
  }
};

}).call(this,{ env: {} })

},{"debug":55,"url-parse":61}],53:[function(require,module,exports){
module.exports = '1.4.0';

},{}],54:[function(require,module,exports){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var w = d * 7;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} [options]
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options) {
  options = options || {};
  var type = typeof val;
  if (type === 'string' && val.length > 0) {
    return parse(val);
  } else if (type === 'number' && isNaN(val) === false) {
    return options.long ? fmtLong(val) : fmtShort(val);
  }
  throw new Error(
    'val is not a non-empty string or a valid number. val=' +
      JSON.stringify(val)
  );
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  str = String(str);
  if (str.length > 100) {
    return;
  }
  var match = /^((?:\d+)?\-?\d?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
    str
  );
  if (!match) {
    return;
  }
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'yrs':
    case 'yr':
    case 'y':
      return n * y;
    case 'weeks':
    case 'week':
    case 'w':
      return n * w;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'hrs':
    case 'hr':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'mins':
    case 'min':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 'secs':
    case 'sec':
    case 's':
      return n * s;
    case 'milliseconds':
    case 'millisecond':
    case 'msecs':
    case 'msec':
    case 'ms':
      return n;
    default:
      return undefined;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtShort(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return Math.round(ms / d) + 'd';
  }
  if (msAbs >= h) {
    return Math.round(ms / h) + 'h';
  }
  if (msAbs >= m) {
    return Math.round(ms / m) + 'm';
  }
  if (msAbs >= s) {
    return Math.round(ms / s) + 's';
  }
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function fmtLong(ms) {
  var msAbs = Math.abs(ms);
  if (msAbs >= d) {
    return plural(ms, msAbs, d, 'day');
  }
  if (msAbs >= h) {
    return plural(ms, msAbs, h, 'hour');
  }
  if (msAbs >= m) {
    return plural(ms, msAbs, m, 'minute');
  }
  if (msAbs >= s) {
    return plural(ms, msAbs, s, 'second');
  }
  return ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, msAbs, n, name) {
  var isPlural = msAbs >= n * 1.5;
  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');
}

},{}],55:[function(require,module,exports){
(function (process){
"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/* eslint-env browser */

/**
 * This is the web browser implementation of `debug()`.
 */
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.storage = localstorage();
/**
 * Colors.
 */

exports.colors = ['#0000CC', '#0000FF', '#0033CC', '#0033FF', '#0066CC', '#0066FF', '#0099CC', '#0099FF', '#00CC00', '#00CC33', '#00CC66', '#00CC99', '#00CCCC', '#00CCFF', '#3300CC', '#3300FF', '#3333CC', '#3333FF', '#3366CC', '#3366FF', '#3399CC', '#3399FF', '#33CC00', '#33CC33', '#33CC66', '#33CC99', '#33CCCC', '#33CCFF', '#6600CC', '#6600FF', '#6633CC', '#6633FF', '#66CC00', '#66CC33', '#9900CC', '#9900FF', '#9933CC', '#9933FF', '#99CC00', '#99CC33', '#CC0000', '#CC0033', '#CC0066', '#CC0099', '#CC00CC', '#CC00FF', '#CC3300', '#CC3333', '#CC3366', '#CC3399', '#CC33CC', '#CC33FF', '#CC6600', '#CC6633', '#CC9900', '#CC9933', '#CCCC00', '#CCCC33', '#FF0000', '#FF0033', '#FF0066', '#FF0099', '#FF00CC', '#FF00FF', '#FF3300', '#FF3333', '#FF3366', '#FF3399', '#FF33CC', '#FF33FF', '#FF6600', '#FF6633', '#FF9900', '#FF9933', '#FFCC00', '#FFCC33'];
/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */
// eslint-disable-next-line complexity

function useColors() {
  // NB: In an Electron preload script, document will be defined but not fully
  // initialized. Since we know we're in Chrome, we'll just detect this case
  // explicitly
  if (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {
    return true;
  } // Internet Explorer and Edge do not support colors.


  if (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
    return false;
  } // Is webkit? http://stackoverflow.com/a/16459606/376773
  // document is undefined in react-native: https://github.com/facebook/react-native/pull/1632


  return typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
  typeof window !== 'undefined' && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
  // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
  typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
}
/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */


function formatArgs(args) {
  args[0] = (this.useColors ? '%c' : '') + this.namespace + (this.useColors ? ' %c' : ' ') + args[0] + (this.useColors ? '%c ' : ' ') + '+' + module.exports.humanize(this.diff);

  if (!this.useColors) {
    return;
  }

  var c = 'color: ' + this.color;
  args.splice(1, 0, c, 'color: inherit'); // The final "%c" is somewhat tricky, because there could be other
  // arguments passed either before or after the %c, so we need to
  // figure out the correct index to insert the CSS into

  var index = 0;
  var lastC = 0;
  args[0].replace(/%[a-zA-Z%]/g, function (match) {
    if (match === '%%') {
      return;
    }

    index++;

    if (match === '%c') {
      // We only are interested in the *last* %c
      // (the user may have provided their own)
      lastC = index;
    }
  });
  args.splice(lastC, 0, c);
}
/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */


function log() {
  var _console;

  // This hackery is required for IE8/9, where
  // the `console.log` function doesn't have 'apply'
  return (typeof console === "undefined" ? "undefined" : _typeof(console)) === 'object' && console.log && (_console = console).log.apply(_console, arguments);
}
/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */


function save(namespaces) {
  try {
    if (namespaces) {
      exports.storage.setItem('debug', namespaces);
    } else {
      exports.storage.removeItem('debug');
    }
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}
/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */


function load() {
  var r;

  try {
    r = exports.storage.getItem('debug');
  } catch (error) {} // Swallow
  // XXX (@Qix-) should we be logging these?
  // If debug isn't set in LS, and we're in Electron, try to load $DEBUG


  if (!r && typeof process !== 'undefined' && 'env' in process) {
    r = process.env.DEBUG;
  }

  return r;
}
/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */


function localstorage() {
  try {
    // TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context
    // The Browser also has localStorage in the global context.
    return localStorage;
  } catch (error) {// Swallow
    // XXX (@Qix-) should we be logging these?
  }
}

module.exports = require('./common')(exports);
var formatters = module.exports.formatters;
/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

formatters.j = function (v) {
  try {
    return JSON.stringify(v);
  } catch (error) {
    return '[UnexpectedJSONParseError]: ' + error.message;
  }
};


}).call(this,{ env: {} })

},{"./common":56}],56:[function(require,module,exports){
"use strict";

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 */
function setup(env) {
  createDebug.debug = createDebug;
  createDebug.default = createDebug;
  createDebug.coerce = coerce;
  createDebug.disable = disable;
  createDebug.enable = enable;
  createDebug.enabled = enabled;
  createDebug.humanize = require('ms');
  Object.keys(env).forEach(function (key) {
    createDebug[key] = env[key];
  });
  /**
  * Active `debug` instances.
  */

  createDebug.instances = [];
  /**
  * The currently active debug mode names, and names to skip.
  */

  createDebug.names = [];
  createDebug.skips = [];
  /**
  * Map of special "%n" handling functions, for the debug "format" argument.
  *
  * Valid key names are a single, lower or upper-case letter, i.e. "n" and "N".
  */

  createDebug.formatters = {};
  /**
  * Selects a color for a debug namespace
  * @param {String} namespace The namespace string for the for the debug instance to be colored
  * @return {Number|String} An ANSI color code for the given namespace
  * @api private
  */

  function selectColor(namespace) {
    var hash = 0;

    for (var i = 0; i < namespace.length; i++) {
      hash = (hash << 5) - hash + namespace.charCodeAt(i);
      hash |= 0; // Convert to 32bit integer
    }

    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
  }

  createDebug.selectColor = selectColor;
  /**
  * Create a debugger with the given `namespace`.
  *
  * @param {String} namespace
  * @return {Function}
  * @api public
  */

  function createDebug(namespace) {
    var prevTime;

    function debug() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      // Disabled?
      if (!debug.enabled) {
        return;
      }

      var self = debug; // Set `diff` timestamp

      var curr = Number(new Date());
      var ms = curr - (prevTime || curr);
      self.diff = ms;
      self.prev = prevTime;
      self.curr = curr;
      prevTime = curr;
      args[0] = createDebug.coerce(args[0]);

      if (typeof args[0] !== 'string') {
        // Anything else let's inspect with %O
        args.unshift('%O');
      } // Apply any `formatters` transformations


      var index = 0;
      args[0] = args[0].replace(/%([a-zA-Z%])/g, function (match, format) {
        // If we encounter an escaped % then don't increase the array index
        if (match === '%%') {
          return match;
        }

        index++;
        var formatter = createDebug.formatters[format];

        if (typeof formatter === 'function') {
          var val = args[index];
          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`

          args.splice(index, 1);
          index--;
        }

        return match;
      }); // Apply env-specific formatting (colors, etc.)

      createDebug.formatArgs.call(self, args);
      var logFn = self.log || createDebug.log;
      logFn.apply(self, args);
    }

    debug.namespace = namespace;
    debug.enabled = createDebug.enabled(namespace);
    debug.useColors = createDebug.useColors();
    debug.color = selectColor(namespace);
    debug.destroy = destroy;
    debug.extend = extend; // Debug.formatArgs = formatArgs;
    // debug.rawLog = rawLog;
    // env-specific initialization logic for debug instances

    if (typeof createDebug.init === 'function') {
      createDebug.init(debug);
    }

    createDebug.instances.push(debug);
    return debug;
  }

  function destroy() {
    var index = createDebug.instances.indexOf(this);

    if (index !== -1) {
      createDebug.instances.splice(index, 1);
      return true;
    }

    return false;
  }

  function extend(namespace, delimiter) {
    return createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);
  }
  /**
  * Enables a debug mode by namespaces. This can include modes
  * separated by a colon and wildcards.
  *
  * @param {String} namespaces
  * @api public
  */


  function enable(namespaces) {
    createDebug.save(namespaces);
    createDebug.names = [];
    createDebug.skips = [];
    var i;
    var split = (typeof namespaces === 'string' ? namespaces : '').split(/[\s,]+/);
    var len = split.length;

    for (i = 0; i < len; i++) {
      if (!split[i]) {
        // ignore empty strings
        continue;
      }

      namespaces = split[i].replace(/\*/g, '.*?');

      if (namespaces[0] === '-') {
        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
      } else {
        createDebug.names.push(new RegExp('^' + namespaces + '$'));
      }
    }

    for (i = 0; i < createDebug.instances.length; i++) {
      var instance = createDebug.instances[i];
      instance.enabled = createDebug.enabled(instance.namespace);
    }
  }
  /**
  * Disable debug output.
  *
  * @api public
  */


  function disable() {
    createDebug.enable('');
  }
  /**
  * Returns true if the given mode name is enabled, false otherwise.
  *
  * @param {String} name
  * @return {Boolean}
  * @api public
  */


  function enabled(name) {
    if (name[name.length - 1] === '*') {
      return true;
    }

    var i;
    var len;

    for (i = 0, len = createDebug.skips.length; i < len; i++) {
      if (createDebug.skips[i].test(name)) {
        return false;
      }
    }

    for (i = 0, len = createDebug.names.length; i < len; i++) {
      if (createDebug.names[i].test(name)) {
        return true;
      }
    }

    return false;
  }
  /**
  * Coerce `val`.
  *
  * @param {Mixed} val
  * @return {Mixed}
  * @api private
  */


  function coerce(val) {
    if (val instanceof Error) {
      return val.stack || val.message;
    }

    return val;
  }

  createDebug.enable(createDebug.load());
  return createDebug;
}

module.exports = setup;


},{"ms":54}],57:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],58:[function(require,module,exports){
(function (global){
/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */
;(function () {
  // Detect the `define` function exposed by asynchronous module loaders. The
  // strict `define` check is necessary for compatibility with `r.js`.
  var isLoader = typeof define === "function" && define.amd;

  // A set of types used to distinguish objects from primitives.
  var objectTypes = {
    "function": true,
    "object": true
  };

  // Detect the `exports` object exposed by CommonJS implementations.
  var freeExports = objectTypes[typeof exports] && exports && !exports.nodeType && exports;

  // Use the `global` object exposed by Node (including Browserify via
  // `insert-module-globals`), Narwhal, and Ringo as the default context,
  // and the `window` object in browsers. Rhino exports a `global` function
  // instead.
  var root = objectTypes[typeof window] && window || this,
      freeGlobal = freeExports && objectTypes[typeof module] && module && !module.nodeType && typeof global == "object" && global;

  if (freeGlobal && (freeGlobal["global"] === freeGlobal || freeGlobal["window"] === freeGlobal || freeGlobal["self"] === freeGlobal)) {
    root = freeGlobal;
  }

  // Public: Initializes JSON 3 using the given `context` object, attaching the
  // `stringify` and `parse` functions to the specified `exports` object.
  function runInContext(context, exports) {
    context || (context = root["Object"]());
    exports || (exports = root["Object"]());

    // Native constructor aliases.
    var Number = context["Number"] || root["Number"],
        String = context["String"] || root["String"],
        Object = context["Object"] || root["Object"],
        Date = context["Date"] || root["Date"],
        SyntaxError = context["SyntaxError"] || root["SyntaxError"],
        TypeError = context["TypeError"] || root["TypeError"],
        Math = context["Math"] || root["Math"],
        nativeJSON = context["JSON"] || root["JSON"];

    // Delegate to the native `stringify` and `parse` implementations.
    if (typeof nativeJSON == "object" && nativeJSON) {
      exports.stringify = nativeJSON.stringify;
      exports.parse = nativeJSON.parse;
    }

    // Convenience aliases.
    var objectProto = Object.prototype,
        getClass = objectProto.toString,
        isProperty, forEach, undef;

    // Test the `Date#getUTC*` methods. Based on work by @Yaffle.
    var isExtended = new Date(-3509827334573292);
    try {
      // The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical
      // results for certain dates in Opera >= 10.53.
      isExtended = isExtended.getUTCFullYear() == -109252 && isExtended.getUTCMonth() === 0 && isExtended.getUTCDate() === 1 &&
        // Safari < 2.0.2 stores the internal millisecond time value correctly,
        // but clips the values returned by the date methods to the range of
        // signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).
        isExtended.getUTCHours() == 10 && isExtended.getUTCMinutes() == 37 && isExtended.getUTCSeconds() == 6 && isExtended.getUTCMilliseconds() == 708;
    } catch (exception) {}

    // Internal: Determines whether the native `JSON.stringify` and `parse`
    // implementations are spec-compliant. Based on work by Ken Snyder.
    function has(name) {
      if (has[name] !== undef) {
        // Return cached feature test result.
        return has[name];
      }
      var isSupported;
      if (name == "bug-string-char-index") {
        // IE <= 7 doesn't support accessing string characters using square
        // bracket notation. IE 8 only supports this for primitives.
        isSupported = "a"[0] != "a";
      } else if (name == "json") {
        // Indicates whether both `JSON.stringify` and `JSON.parse` are
        // supported.
        isSupported = has("json-stringify") && has("json-parse");
      } else {
        var value, serialized = '{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';
        // Test `JSON.stringify`.
        if (name == "json-stringify") {
          var stringify = exports.stringify, stringifySupported = typeof stringify == "function" && isExtended;
          if (stringifySupported) {
            // A test function object with a custom `toJSON` method.
            (value = function () {
              return 1;
            }).toJSON = value;
            try {
              stringifySupported =
                // Firefox 3.1b1 and b2 serialize string, number, and boolean
                // primitives as object literals.
                stringify(0) === "0" &&
                // FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object
                // literals.
                stringify(new Number()) === "0" &&
                stringify(new String()) == '""' &&
                // FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or
                // does not define a canonical JSON representation (this applies to
                // objects with `toJSON` properties as well, *unless* they are nested
                // within an object or array).
                stringify(getClass) === undef &&
                // IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and
                // FF 3.1b3 pass this test.
                stringify(undef) === undef &&
                // Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,
                // respectively, if the value is omitted entirely.
                stringify() === undef &&
                // FF 3.1b1, 2 throw an error if the given value is not a number,
                // string, array, object, Boolean, or `null` literal. This applies to
                // objects with custom `toJSON` methods as well, unless they are nested
                // inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`
                // methods entirely.
                stringify(value) === "1" &&
                stringify([value]) == "[1]" &&
                // Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of
                // `"[null]"`.
                stringify([undef]) == "[null]" &&
                // YUI 3.0.0b1 fails to serialize `null` literals.
                stringify(null) == "null" &&
                // FF 3.1b1, 2 halts serialization if an array contains a function:
                // `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3
                // elides non-JSON values from objects and arrays, unless they
                // define custom `toJSON` methods.
                stringify([undef, getClass, null]) == "[null,null,null]" &&
                // Simple serialization test. FF 3.1b1 uses Unicode escape sequences
                // where character escape codes are expected (e.g., `\b` => `\u0008`).
                stringify({ "a": [value, true, false, null, "\x00\b\n\f\r\t"] }) == serialized &&
                // FF 3.1b1 and b2 ignore the `filter` and `width` arguments.
                stringify(null, value) === "1" &&
                stringify([1, 2], null, 1) == "[\n 1,\n 2\n]" &&
                // JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly
                // serialize extended years.
                stringify(new Date(-8.64e15)) == '"-271821-04-20T00:00:00.000Z"' &&
                // The milliseconds are optional in ES 5, but required in 5.1.
                stringify(new Date(8.64e15)) == '"+275760-09-13T00:00:00.000Z"' &&
                // Firefox <= 11.0 incorrectly serializes years prior to 0 as negative
                // four-digit years instead of six-digit years. Credits: @Yaffle.
                stringify(new Date(-621987552e5)) == '"-000001-01-01T00:00:00.000Z"' &&
                // Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond
                // values less than 1000. Credits: @Yaffle.
                stringify(new Date(-1)) == '"1969-12-31T23:59:59.999Z"';
            } catch (exception) {
              stringifySupported = false;
            }
          }
          isSupported = stringifySupported;
        }
        // Test `JSON.parse`.
        if (name == "json-parse") {
          var parse = exports.parse;
          if (typeof parse == "function") {
            try {
              // FF 3.1b1, b2 will throw an exception if a bare literal is provided.
              // Conforming implementations should also coerce the initial argument to
              // a string prior to parsing.
              if (parse("0") === 0 && !parse(false)) {
                // Simple parsing test.
                value = parse(serialized);
                var parseSupported = value["a"].length == 5 && value["a"][0] === 1;
                if (parseSupported) {
                  try {
                    // Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.
                    parseSupported = !parse('"\t"');
                  } catch (exception) {}
                  if (parseSupported) {
                    try {
                      // FF 4.0 and 4.0.1 allow leading `+` signs and leading
                      // decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow
                      // certain octal literals.
                      parseSupported = parse("01") !== 1;
                    } catch (exception) {}
                  }
                  if (parseSupported) {
                    try {
                      // FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal
                      // points. These environments, along with FF 3.1b1 and 2,
                      // also allow trailing commas in JSON objects and arrays.
                      parseSupported = parse("1.") !== 1;
                    } catch (exception) {}
                  }
                }
              }
            } catch (exception) {
              parseSupported = false;
            }
          }
          isSupported = parseSupported;
        }
      }
      return has[name] = !!isSupported;
    }

    if (!has("json")) {
      // Common `[[Class]]` name aliases.
      var functionClass = "[object Function]",
          dateClass = "[object Date]",
          numberClass = "[object Number]",
          stringClass = "[object String]",
          arrayClass = "[object Array]",
          booleanClass = "[object Boolean]";

      // Detect incomplete support for accessing string characters by index.
      var charIndexBuggy = has("bug-string-char-index");

      // Define additional utility methods if the `Date` methods are buggy.
      if (!isExtended) {
        var floor = Math.floor;
        // A mapping between the months of the year and the number of days between
        // January 1st and the first of the respective month.
        var Months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        // Internal: Calculates the number of days between the Unix epoch and the
        // first day of the given month.
        var getDay = function (year, month) {
          return Months[month] + 365 * (year - 1970) + floor((year - 1969 + (month = +(month > 1))) / 4) - floor((year - 1901 + month) / 100) + floor((year - 1601 + month) / 400);
        };
      }

      // Internal: Determines if a property is a direct property of the given
      // object. Delegates to the native `Object#hasOwnProperty` method.
      if (!(isProperty = objectProto.hasOwnProperty)) {
        isProperty = function (property) {
          var members = {}, constructor;
          if ((members.__proto__ = null, members.__proto__ = {
            // The *proto* property cannot be set multiple times in recent
            // versions of Firefox and SeaMonkey.
            "toString": 1
          }, members).toString != getClass) {
            // Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but
            // supports the mutable *proto* property.
            isProperty = function (property) {
              // Capture and break the object's prototype chain (see section 8.6.2
              // of the ES 5.1 spec). The parenthesized expression prevents an
              // unsafe transformation by the Closure Compiler.
              var original = this.__proto__, result = property in (this.__proto__ = null, this);
              // Restore the original prototype chain.
              this.__proto__ = original;
              return result;
            };
          } else {
            // Capture a reference to the top-level `Object` constructor.
            constructor = members.constructor;
            // Use the `constructor` property to simulate `Object#hasOwnProperty` in
            // other environments.
            isProperty = function (property) {
              var parent = (this.constructor || constructor).prototype;
              return property in this && !(property in parent && this[property] === parent[property]);
            };
          }
          members = null;
          return isProperty.call(this, property);
        };
      }

      // Internal: Normalizes the `for...in` iteration algorithm across
      // environments. Each enumerated key is yielded to a `callback` function.
      forEach = function (object, callback) {
        var size = 0, Properties, members, property;

        // Tests for bugs in the current environment's `for...in` algorithm. The
        // `valueOf` property inherits the non-enumerable flag from
        // `Object.prototype` in older versions of IE, Netscape, and Mozilla.
        (Properties = function () {
          this.valueOf = 0;
        }).prototype.valueOf = 0;

        // Iterate over a new instance of the `Properties` class.
        members = new Properties();
        for (property in members) {
          // Ignore all properties inherited from `Object.prototype`.
          if (isProperty.call(members, property)) {
            size++;
          }
        }
        Properties = members = null;

        // Normalize the iteration algorithm.
        if (!size) {
          // A list of non-enumerable properties inherited from `Object.prototype`.
          members = ["valueOf", "toString", "toLocaleString", "propertyIsEnumerable", "isPrototypeOf", "hasOwnProperty", "constructor"];
          // IE <= 8, Mozilla 1.0, and Netscape 6.2 ignore shadowed non-enumerable
          // properties.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, length;
            var hasProperty = !isFunction && typeof object.constructor != "function" && objectTypes[typeof object.hasOwnProperty] && object.hasOwnProperty || isProperty;
            for (property in object) {
              // Gecko <= 1.0 enumerates the `prototype` property of functions under
              // certain conditions; IE does not.
              if (!(isFunction && property == "prototype") && hasProperty.call(object, property)) {
                callback(property);
              }
            }
            // Manually invoke the callback for each non-enumerable property.
            for (length = members.length; property = members[--length]; hasProperty.call(object, property) && callback(property));
          };
        } else if (size == 2) {
          // Safari <= 2.0.4 enumerates shadowed properties twice.
          forEach = function (object, callback) {
            // Create a set of iterated properties.
            var members = {}, isFunction = getClass.call(object) == functionClass, property;
            for (property in object) {
              // Store each property name to prevent double enumeration. The
              // `prototype` property of functions is not enumerated due to cross-
              // environment inconsistencies.
              if (!(isFunction && property == "prototype") && !isProperty.call(members, property) && (members[property] = 1) && isProperty.call(object, property)) {
                callback(property);
              }
            }
          };
        } else {
          // No bugs detected; use the standard `for...in` algorithm.
          forEach = function (object, callback) {
            var isFunction = getClass.call(object) == functionClass, property, isConstructor;
            for (property in object) {
              if (!(isFunction && property == "prototype") && isProperty.call(object, property) && !(isConstructor = property === "constructor")) {
                callback(property);
              }
            }
            // Manually invoke the callback for the `constructor` property due to
            // cross-environment inconsistencies.
            if (isConstructor || isProperty.call(object, (property = "constructor"))) {
              callback(property);
            }
          };
        }
        return forEach(object, callback);
      };

      // Public: Serializes a JavaScript `value` as a JSON string. The optional
      // `filter` argument may specify either a function that alters how object and
      // array members are serialized, or an array of strings and numbers that
      // indicates which properties should be serialized. The optional `width`
      // argument may be either a string or number that specifies the indentation
      // level of the output.
      if (!has("json-stringify")) {
        // Internal: A map of control characters and their escaped equivalents.
        var Escapes = {
          92: "\\\\",
          34: '\\"',
          8: "\\b",
          12: "\\f",
          10: "\\n",
          13: "\\r",
          9: "\\t"
        };

        // Internal: Converts `value` into a zero-padded string such that its
        // length is at least equal to `width`. The `width` must be <= 6.
        var leadingZeroes = "000000";
        var toPaddedString = function (width, value) {
          // The `|| 0` expression is necessary to work around a bug in
          // Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.
          return (leadingZeroes + (value || 0)).slice(-width);
        };

        // Internal: Double-quotes a string `value`, replacing all ASCII control
        // characters (characters with code unit values between 0 and 31) with
        // their escaped equivalents. This is an implementation of the
        // `Quote(value)` operation defined in ES 5.1 section 15.12.3.
        var unicodePrefix = "\\u00";
        var quote = function (value) {
          var result = '"', index = 0, length = value.length, useCharIndex = !charIndexBuggy || length > 10;
          var symbols = useCharIndex && (charIndexBuggy ? value.split("") : value);
          for (; index < length; index++) {
            var charCode = value.charCodeAt(index);
            // If the character is a control character, append its Unicode or
            // shorthand escape sequence; otherwise, append the character as-is.
            switch (charCode) {
              case 8: case 9: case 10: case 12: case 13: case 34: case 92:
                result += Escapes[charCode];
                break;
              default:
                if (charCode < 32) {
                  result += unicodePrefix + toPaddedString(2, charCode.toString(16));
                  break;
                }
                result += useCharIndex ? symbols[index] : value.charAt(index);
            }
          }
          return result + '"';
        };

        // Internal: Recursively serializes an object. Implements the
        // `Str(key, holder)`, `JO(value)`, and `JA(value)` operations.
        var serialize = function (property, object, callback, properties, whitespace, indentation, stack) {
          var value, className, year, month, date, time, hours, minutes, seconds, milliseconds, results, element, index, length, prefix, result;
          try {
            // Necessary for host object support.
            value = object[property];
          } catch (exception) {}
          if (typeof value == "object" && value) {
            className = getClass.call(value);
            if (className == dateClass && !isProperty.call(value, "toJSON")) {
              if (value > -1 / 0 && value < 1 / 0) {
                // Dates are serialized according to the `Date#toJSON` method
                // specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15
                // for the ISO 8601 date time string format.
                if (getDay) {
                  // Manually compute the year, month, date, hours, minutes,
                  // seconds, and milliseconds if the `getUTC*` methods are
                  // buggy. Adapted from @Yaffle's `date-shim` project.
                  date = floor(value / 864e5);
                  for (year = floor(date / 365.2425) + 1970 - 1; getDay(year + 1, 0) <= date; year++);
                  for (month = floor((date - getDay(year, 0)) / 30.42); getDay(year, month + 1) <= date; month++);
                  date = 1 + date - getDay(year, month);
                  // The `time` value specifies the time within the day (see ES
                  // 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used
                  // to compute `A modulo B`, as the `%` operator does not
                  // correspond to the `modulo` operation for negative numbers.
                  time = (value % 864e5 + 864e5) % 864e5;
                  // The hours, minutes, seconds, and milliseconds are obtained by
                  // decomposing the time within the day. See section 15.9.1.10.
                  hours = floor(time / 36e5) % 24;
                  minutes = floor(time / 6e4) % 60;
                  seconds = floor(time / 1e3) % 60;
                  milliseconds = time % 1e3;
                } else {
                  year = value.getUTCFullYear();
                  month = value.getUTCMonth();
                  date = value.getUTCDate();
                  hours = value.getUTCHours();
                  minutes = value.getUTCMinutes();
                  seconds = value.getUTCSeconds();
                  milliseconds = value.getUTCMilliseconds();
                }
                // Serialize extended years correctly.
                value = (year <= 0 || year >= 1e4 ? (year < 0 ? "-" : "+") + toPaddedString(6, year < 0 ? -year : year) : toPaddedString(4, year)) +
                  "-" + toPaddedString(2, month + 1) + "-" + toPaddedString(2, date) +
                  // Months, dates, hours, minutes, and seconds should have two
                  // digits; milliseconds should have three.
                  "T" + toPaddedString(2, hours) + ":" + toPaddedString(2, minutes) + ":" + toPaddedString(2, seconds) +
                  // Milliseconds are optional in ES 5.0, but required in 5.1.
                  "." + toPaddedString(3, milliseconds) + "Z";
              } else {
                value = null;
              }
            } else if (typeof value.toJSON == "function" && ((className != numberClass && className != stringClass && className != arrayClass) || isProperty.call(value, "toJSON"))) {
              // Prototype <= 1.6.1 adds non-standard `toJSON` methods to the
              // `Number`, `String`, `Date`, and `Array` prototypes. JSON 3
              // ignores all `toJSON` methods on these objects unless they are
              // defined directly on an instance.
              value = value.toJSON(property);
            }
          }
          if (callback) {
            // If a replacement function was provided, call it to obtain the value
            // for serialization.
            value = callback.call(object, property, value);
          }
          if (value === null) {
            return "null";
          }
          className = getClass.call(value);
          if (className == booleanClass) {
            // Booleans are represented literally.
            return "" + value;
          } else if (className == numberClass) {
            // JSON numbers must be finite. `Infinity` and `NaN` are serialized as
            // `"null"`.
            return value > -1 / 0 && value < 1 / 0 ? "" + value : "null";
          } else if (className == stringClass) {
            // Strings are double-quoted and escaped.
            return quote("" + value);
          }
          // Recursively serialize objects and arrays.
          if (typeof value == "object") {
            // Check for cyclic structures. This is a linear search; performance
            // is inversely proportional to the number of unique nested objects.
            for (length = stack.length; length--;) {
              if (stack[length] === value) {
                // Cyclic structures cannot be serialized by `JSON.stringify`.
                throw TypeError();
              }
            }
            // Add the object to the stack of traversed objects.
            stack.push(value);
            results = [];
            // Save the current indentation level and indent one additional level.
            prefix = indentation;
            indentation += whitespace;
            if (className == arrayClass) {
              // Recursively serialize array elements.
              for (index = 0, length = value.length; index < length; index++) {
                element = serialize(index, value, callback, properties, whitespace, indentation, stack);
                results.push(element === undef ? "null" : element);
              }
              result = results.length ? (whitespace ? "[\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "]" : ("[" + results.join(",") + "]")) : "[]";
            } else {
              // Recursively serialize object members. Members are selected from
              // either a user-specified list of property names, or the object
              // itself.
              forEach(properties || value, function (property) {
                var element = serialize(property, value, callback, properties, whitespace, indentation, stack);
                if (element !== undef) {
                  // According to ES 5.1 section 15.12.3: "If `gap` {whitespace}
                  // is not the empty string, let `member` {quote(property) + ":"}
                  // be the concatenation of `member` and the `space` character."
                  // The "`space` character" refers to the literal space
                  // character, not the `space` {width} argument provided to
                  // `JSON.stringify`.
                  results.push(quote(property) + ":" + (whitespace ? " " : "") + element);
                }
              });
              result = results.length ? (whitespace ? "{\n" + indentation + results.join(",\n" + indentation) + "\n" + prefix + "}" : ("{" + results.join(",") + "}")) : "{}";
            }
            // Remove the object from the traversed object stack.
            stack.pop();
            return result;
          }
        };

        // Public: `JSON.stringify`. See ES 5.1 section 15.12.3.
        exports.stringify = function (source, filter, width) {
          var whitespace, callback, properties, className;
          if (objectTypes[typeof filter] && filter) {
            if ((className = getClass.call(filter)) == functionClass) {
              callback = filter;
            } else if (className == arrayClass) {
              // Convert the property names array into a makeshift set.
              properties = {};
              for (var index = 0, length = filter.length, value; index < length; value = filter[index++], ((className = getClass.call(value)), className == stringClass || className == numberClass) && (properties[value] = 1));
            }
          }
          if (width) {
            if ((className = getClass.call(width)) == numberClass) {
              // Convert the `width` to an integer and create a string containing
              // `width` number of space characters.
              if ((width -= width % 1) > 0) {
                for (whitespace = "", width > 10 && (width = 10); whitespace.length < width; whitespace += " ");
              }
            } else if (className == stringClass) {
              whitespace = width.length <= 10 ? width : width.slice(0, 10);
            }
          }
          // Opera <= 7.54u2 discards the values associated with empty string keys
          // (`""`) only if they are used directly within an object member list
          // (e.g., `!("" in { "": 1})`).
          return serialize("", (value = {}, value[""] = source, value), callback, properties, whitespace, "", []);
        };
      }

      // Public: Parses a JSON source string.
      if (!has("json-parse")) {
        var fromCharCode = String.fromCharCode;

        // Internal: A map of escaped control characters and their unescaped
        // equivalents.
        var Unescapes = {
          92: "\\",
          34: '"',
          47: "/",
          98: "\b",
          116: "\t",
          110: "\n",
          102: "\f",
          114: "\r"
        };

        // Internal: Stores the parser state.
        var Index, Source;

        // Internal: Resets the parser state and throws a `SyntaxError`.
        var abort = function () {
          Index = Source = null;
          throw SyntaxError();
        };

        // Internal: Returns the next token, or `"$"` if the parser has reached
        // the end of the source string. A token may be a string, number, `null`
        // literal, or Boolean literal.
        var lex = function () {
          var source = Source, length = source.length, value, begin, position, isSigned, charCode;
          while (Index < length) {
            charCode = source.charCodeAt(Index);
            switch (charCode) {
              case 9: case 10: case 13: case 32:
                // Skip whitespace tokens, including tabs, carriage returns, line
                // feeds, and space characters.
                Index++;
                break;
              case 123: case 125: case 91: case 93: case 58: case 44:
                // Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at
                // the current position.
                value = charIndexBuggy ? source.charAt(Index) : source[Index];
                Index++;
                return value;
              case 34:
                // `"` delimits a JSON string; advance to the next character and
                // begin parsing the string. String tokens are prefixed with the
                // sentinel `@` character to distinguish them from punctuators and
                // end-of-string tokens.
                for (value = "@", Index++; Index < length;) {
                  charCode = source.charCodeAt(Index);
                  if (charCode < 32) {
                    // Unescaped ASCII control characters (those with a code unit
                    // less than the space character) are not permitted.
                    abort();
                  } else if (charCode == 92) {
                    // A reverse solidus (`\`) marks the beginning of an escaped
                    // control character (including `"`, `\`, and `/`) or Unicode
                    // escape sequence.
                    charCode = source.charCodeAt(++Index);
                    switch (charCode) {
                      case 92: case 34: case 47: case 98: case 116: case 110: case 102: case 114:
                        // Revive escaped control characters.
                        value += Unescapes[charCode];
                        Index++;
                        break;
                      case 117:
                        // `\u` marks the beginning of a Unicode escape sequence.
                        // Advance to the first character and validate the
                        // four-digit code point.
                        begin = ++Index;
                        for (position = Index + 4; Index < position; Index++) {
                          charCode = source.charCodeAt(Index);
                          // A valid sequence comprises four hexdigits (case-
                          // insensitive) that form a single hexadecimal value.
                          if (!(charCode >= 48 && charCode <= 57 || charCode >= 97 && charCode <= 102 || charCode >= 65 && charCode <= 70)) {
                            // Invalid Unicode escape sequence.
                            abort();
                          }
                        }
                        // Revive the escaped character.
                        value += fromCharCode("0x" + source.slice(begin, Index));
                        break;
                      default:
                        // Invalid escape sequence.
                        abort();
                    }
                  } else {
                    if (charCode == 34) {
                      // An unescaped double-quote character marks the end of the
                      // string.
                      break;
                    }
                    charCode = source.charCodeAt(Index);
                    begin = Index;
                    // Optimize for the common case where a string is valid.
                    while (charCode >= 32 && charCode != 92 && charCode != 34) {
                      charCode = source.charCodeAt(++Index);
                    }
                    // Append the string as-is.
                    value += source.slice(begin, Index);
                  }
                }
                if (source.charCodeAt(Index) == 34) {
                  // Advance to the next character and return the revived string.
                  Index++;
                  return value;
                }
                // Unterminated string.
                abort();
              default:
                // Parse numbers and literals.
                begin = Index;
                // Advance past the negative sign, if one is specified.
                if (charCode == 45) {
                  isSigned = true;
                  charCode = source.charCodeAt(++Index);
                }
                // Parse an integer or floating-point value.
                if (charCode >= 48 && charCode <= 57) {
                  // Leading zeroes are interpreted as octal literals.
                  if (charCode == 48 && ((charCode = source.charCodeAt(Index + 1)), charCode >= 48 && charCode <= 57)) {
                    // Illegal octal literal.
                    abort();
                  }
                  isSigned = false;
                  // Parse the integer component.
                  for (; Index < length && ((charCode = source.charCodeAt(Index)), charCode >= 48 && charCode <= 57); Index++);
                  // Floats cannot contain a leading decimal point; however, this
                  // case is already accounted for by the parser.
                  if (source.charCodeAt(Index) == 46) {
                    position = ++Index;
                    // Parse the decimal component.
                    for (; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal trailing decimal.
                      abort();
                    }
                    Index = position;
                  }
                  // Parse exponents. The `e` denoting the exponent is
                  // case-insensitive.
                  charCode = source.charCodeAt(Index);
                  if (charCode == 101 || charCode == 69) {
                    charCode = source.charCodeAt(++Index);
                    // Skip past the sign following the exponent, if one is
                    // specified.
                    if (charCode == 43 || charCode == 45) {
                      Index++;
                    }
                    // Parse the exponential component.
                    for (position = Index; position < length && ((charCode = source.charCodeAt(position)), charCode >= 48 && charCode <= 57); position++);
                    if (position == Index) {
                      // Illegal empty exponent.
                      abort();
                    }
                    Index = position;
                  }
                  // Coerce the parsed value to a JavaScript number.
                  return +source.slice(begin, Index);
                }
                // A negative sign may only precede numbers.
                if (isSigned) {
                  abort();
                }
                // `true`, `false`, and `null` literals.
                if (source.slice(Index, Index + 4) == "true") {
                  Index += 4;
                  return true;
                } else if (source.slice(Index, Index + 5) == "false") {
                  Index += 5;
                  return false;
                } else if (source.slice(Index, Index + 4) == "null") {
                  Index += 4;
                  return null;
                }
                // Unrecognized token.
                abort();
            }
          }
          // Return the sentinel `$` character if the parser has reached the end
          // of the source string.
          return "$";
        };

        // Internal: Parses a JSON `value` token.
        var get = function (value) {
          var results, hasMembers;
          if (value == "$") {
            // Unexpected end of input.
            abort();
          }
          if (typeof value == "string") {
            if ((charIndexBuggy ? value.charAt(0) : value[0]) == "@") {
              // Remove the sentinel `@` character.
              return value.slice(1);
            }
            // Parse object and array literals.
            if (value == "[") {
              // Parses a JSON array, returning a new JavaScript array.
              results = [];
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing square bracket marks the end of the array literal.
                if (value == "]") {
                  break;
                }
                // If the array literal contains elements, the current token
                // should be a comma separating the previous element from the
                // next.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "]") {
                      // Unexpected trailing `,` in array literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each array element.
                    abort();
                  }
                }
                // Elisions and leading commas are not permitted.
                if (value == ",") {
                  abort();
                }
                results.push(get(value));
              }
              return results;
            } else if (value == "{") {
              // Parses a JSON object, returning a new JavaScript object.
              results = {};
              for (;; hasMembers || (hasMembers = true)) {
                value = lex();
                // A closing curly brace marks the end of the object literal.
                if (value == "}") {
                  break;
                }
                // If the object literal contains members, the current token
                // should be a comma separator.
                if (hasMembers) {
                  if (value == ",") {
                    value = lex();
                    if (value == "}") {
                      // Unexpected trailing `,` in object literal.
                      abort();
                    }
                  } else {
                    // A `,` must separate each object member.
                    abort();
                  }
                }
                // Leading commas are not permitted, object property names must be
                // double-quoted strings, and a `:` must separate each property
                // name and value.
                if (value == "," || typeof value != "string" || (charIndexBuggy ? value.charAt(0) : value[0]) != "@" || lex() != ":") {
                  abort();
                }
                results[value.slice(1)] = get(lex());
              }
              return results;
            }
            // Unexpected token encountered.
            abort();
          }
          return value;
        };

        // Internal: Updates a traversed object member.
        var update = function (source, property, callback) {
          var element = walk(source, property, callback);
          if (element === undef) {
            delete source[property];
          } else {
            source[property] = element;
          }
        };

        // Internal: Recursively traverses a parsed JSON object, invoking the
        // `callback` function for each value. This is an implementation of the
        // `Walk(holder, name)` operation defined in ES 5.1 section 15.12.2.
        var walk = function (source, property, callback) {
          var value = source[property], length;
          if (typeof value == "object" && value) {
            // `forEach` can't be used to traverse an array in Opera <= 8.54
            // because its `Object#hasOwnProperty` implementation returns `false`
            // for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).
            if (getClass.call(value) == arrayClass) {
              for (length = value.length; length--;) {
                update(value, length, callback);
              }
            } else {
              forEach(value, function (property) {
                update(value, property, callback);
              });
            }
          }
          return callback.call(source, property, value);
        };

        // Public: `JSON.parse`. See ES 5.1 section 15.12.2.
        exports.parse = function (source, callback) {
          var result, value;
          Index = 0;
          Source = "" + source;
          result = get(lex());
          // If a JSON string contains multiple tokens, it is invalid.
          if (lex() != "$") {
            abort();
          }
          // Reset the parser state.
          Index = Source = null;
          return callback && getClass.call(callback) == functionClass ? walk((value = {}, value[""] = result, value), "", callback) : result;
        };
      }
    }

    exports["runInContext"] = runInContext;
    return exports;
  }

  if (freeExports && !isLoader) {
    // Export for CommonJS environments.
    runInContext(root, freeExports);
  } else {
    // Export for web browsers and JavaScript engines.
    var nativeJSON = root.JSON,
        previousJSON = root["JSON3"],
        isRestored = false;

    var JSON3 = runInContext(root, (root["JSON3"] = {
      // Public: Restores the original value of the global `JSON` object and
      // returns a reference to the `JSON3` object.
      "noConflict": function () {
        if (!isRestored) {
          isRestored = true;
          root.JSON = nativeJSON;
          root["JSON3"] = previousJSON;
          nativeJSON = previousJSON = null;
        }
        return JSON3;
      }
    }));

    root.JSON = {
      "parse": JSON3.parse,
      "stringify": JSON3.stringify
    };
  }

  // Export for asynchronous module loaders.
  if (isLoader) {
    define(function () {
      return JSON3;
    });
  }
}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],59:[function(require,module,exports){
'use strict';

var has = Object.prototype.hasOwnProperty;

/**
 * Decode a URI encoded string.
 *
 * @param {String} input The URI encoded string.
 * @returns {String} The decoded string.
 * @api private
 */
function decode(input) {
  return decodeURIComponent(input.replace(/\+/g, ' '));
}

/**
 * Simple query string parser.
 *
 * @param {String} query The query string that needs to be parsed.
 * @returns {Object}
 * @api public
 */
function querystring(query) {
  var parser = /([^=?&]+)=?([^&]*)/g
    , result = {}
    , part;

  while (part = parser.exec(query)) {
    var key = decode(part[1])
      , value = decode(part[2]);

    //
    // Prevent overriding of existing properties. This ensures that build-in
    // methods like `toString` or __proto__ are not overriden by malicious
    // querystrings.
    //
    if (key in result) continue;
    result[key] = value;
  }

  return result;
}

/**
 * Transform a query string to an object.
 *
 * @param {Object} obj Object that should be transformed.
 * @param {String} prefix Optional prefix.
 * @returns {String}
 * @api public
 */
function querystringify(obj, prefix) {
  prefix = prefix || '';

  var pairs = [];

  //
  // Optionally prefix with a '?' if needed
  //
  if ('string' !== typeof prefix) prefix = '?';

  for (var key in obj) {
    if (has.call(obj, key)) {
      pairs.push(encodeURIComponent(key) +'='+ encodeURIComponent(obj[key]));
    }
  }

  return pairs.length ? prefix + pairs.join('&') : '';
}

//
// Expose the module.
//
exports.stringify = querystringify;
exports.parse = querystring;

},{}],60:[function(require,module,exports){
'use strict';

/**
 * Check if we're required to add a port number.
 *
 * @see https://url.spec.whatwg.org/#default-port
 * @param {Number|String} port Port number we need to check
 * @param {String} protocol Protocol we need to check against.
 * @returns {Boolean} Is it a default port for the given protocol
 * @api private
 */
module.exports = function required(port, protocol) {
  protocol = protocol.split(':')[0];
  port = +port;

  if (!port) return false;

  switch (protocol) {
    case 'http':
    case 'ws':
    return port !== 80;

    case 'https':
    case 'wss':
    return port !== 443;

    case 'ftp':
    return port !== 21;

    case 'gopher':
    return port !== 70;

    case 'file':
    return false;
  }

  return port !== 0;
};

},{}],61:[function(require,module,exports){
(function (global){
'use strict';

var required = require('requires-port')
  , qs = require('querystringify')
  , protocolre = /^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i
  , slashes = /^[A-Za-z][A-Za-z0-9+-.]*:\/\//;

/**
 * These are the parse rules for the URL parser, it informs the parser
 * about:
 *
 * 0. The char it Needs to parse, if it's a string it should be done using
 *    indexOf, RegExp using exec and NaN means set as current value.
 * 1. The property we should set when parsing this value.
 * 2. Indication if it's backwards or forward parsing, when set as number it's
 *    the value of extra chars that should be split off.
 * 3. Inherit from location if non existing in the parser.
 * 4. `toLowerCase` the resulting value.
 */
var rules = [
  ['#', 'hash'],                        // Extract from the back.
  ['?', 'query'],                       // Extract from the back.
  function sanitize(address) {          // Sanitize what is left of the address
    return address.replace('\\', '/');
  },
  ['/', 'pathname'],                    // Extract from the back.
  ['@', 'auth', 1],                     // Extract from the front.
  [NaN, 'host', undefined, 1, 1],       // Set left over value.
  [/:(\d+)$/, 'port', undefined, 1],    // RegExp the back.
  [NaN, 'hostname', undefined, 1, 1]    // Set left over.
];

/**
 * These properties should not be copied or inherited from. This is only needed
 * for all non blob URL's as a blob URL does not include a hash, only the
 * origin.
 *
 * @type {Object}
 * @private
 */
var ignore = { hash: 1, query: 1 };

/**
 * The location object differs when your code is loaded through a normal page,
 * Worker or through a worker using a blob. And with the blobble begins the
 * trouble as the location object will contain the URL of the blob, not the
 * location of the page where our code is loaded in. The actual origin is
 * encoded in the `pathname` so we can thankfully generate a good "default"
 * location from it so we can generate proper relative URL's again.
 *
 * @param {Object|String} loc Optional default location object.
 * @returns {Object} lolcation object.
 * @public
 */
function lolcation(loc) {
  var location = global && global.location || {};
  loc = loc || location;

  var finaldestination = {}
    , type = typeof loc
    , key;

  if ('blob:' === loc.protocol) {
    finaldestination = new Url(unescape(loc.pathname), {});
  } else if ('string' === type) {
    finaldestination = new Url(loc, {});
    for (key in ignore) delete finaldestination[key];
  } else if ('object' === type) {
    for (key in loc) {
      if (key in ignore) continue;
      finaldestination[key] = loc[key];
    }

    if (finaldestination.slashes === undefined) {
      finaldestination.slashes = slashes.test(loc.href);
    }
  }

  return finaldestination;
}

/**
 * @typedef ProtocolExtract
 * @type Object
 * @property {String} protocol Protocol matched in the URL, in lowercase.
 * @property {Boolean} slashes `true` if protocol is followed by "//", else `false`.
 * @property {String} rest Rest of the URL that is not part of the protocol.
 */

/**
 * Extract protocol information from a URL with/without double slash ("//").
 *
 * @param {String} address URL we want to extract from.
 * @return {ProtocolExtract} Extracted information.
 * @private
 */
function extractProtocol(address) {
  var match = protocolre.exec(address);

  return {
    protocol: match[1] ? match[1].toLowerCase() : '',
    slashes: !!match[2],
    rest: match[3]
  };
}

/**
 * Resolve a relative URL pathname against a base URL pathname.
 *
 * @param {String} relative Pathname of the relative URL.
 * @param {String} base Pathname of the base URL.
 * @return {String} Resolved pathname.
 * @private
 */
function resolve(relative, base) {
  var path = (base || '/').split('/').slice(0, -1).concat(relative.split('/'))
    , i = path.length
    , last = path[i - 1]
    , unshift = false
    , up = 0;

  while (i--) {
    if (path[i] === '.') {
      path.splice(i, 1);
    } else if (path[i] === '..') {
      path.splice(i, 1);
      up++;
    } else if (up) {
      if (i === 0) unshift = true;
      path.splice(i, 1);
      up--;
    }
  }

  if (unshift) path.unshift('');
  if (last === '.' || last === '..') path.push('');

  return path.join('/');
}

/**
 * The actual URL instance. Instead of returning an object we've opted-in to
 * create an actual constructor as it's much more memory efficient and
 * faster and it pleases my OCD.
 *
 * It is worth noting that we should not use `URL` as class name to prevent
 * clashes with the global URL instance that got introduced in browsers.
 *
 * @constructor
 * @param {String} address URL we want to parse.
 * @param {Object|String} location Location defaults for relative paths.
 * @param {Boolean|Function} parser Parser for the query string.
 * @private
 */
function Url(address, location, parser) {
  if (!(this instanceof Url)) {
    return new Url(address, location, parser);
  }

  var relative, extracted, parse, instruction, index, key
    , instructions = rules.slice()
    , type = typeof location
    , url = this
    , i = 0;

  //
  // The following if statements allows this module two have compatibility with
  // 2 different API:
  //
  // 1. Node.js's `url.parse` api which accepts a URL, boolean as arguments
  //    where the boolean indicates that the query string should also be parsed.
  //
  // 2. The `URL` interface of the browser which accepts a URL, object as
  //    arguments. The supplied object will be used as default values / fall-back
  //    for relative paths.
  //
  if ('object' !== type && 'string' !== type) {
    parser = location;
    location = null;
  }

  if (parser && 'function' !== typeof parser) parser = qs.parse;

  location = lolcation(location);

  //
  // Extract protocol information before running the instructions.
  //
  extracted = extractProtocol(address || '');
  relative = !extracted.protocol && !extracted.slashes;
  url.slashes = extracted.slashes || relative && location.slashes;
  url.protocol = extracted.protocol || location.protocol || '';
  address = extracted.rest;

  //
  // When the authority component is absent the URL starts with a path
  // component.
  //
  if (!extracted.slashes) instructions[3] = [/(.*)/, 'pathname'];

  for (; i < instructions.length; i++) {
    instruction = instructions[i];

    if (typeof instruction === 'function') {
      address = instruction(address);
      continue;
    }

    parse = instruction[0];
    key = instruction[1];

    if (parse !== parse) {
      url[key] = address;
    } else if ('string' === typeof parse) {
      if (~(index = address.indexOf(parse))) {
        if ('number' === typeof instruction[2]) {
          url[key] = address.slice(0, index);
          address = address.slice(index + instruction[2]);
        } else {
          url[key] = address.slice(index);
          address = address.slice(0, index);
        }
      }
    } else if ((index = parse.exec(address))) {
      url[key] = index[1];
      address = address.slice(0, index.index);
    }

    url[key] = url[key] || (
      relative && instruction[3] ? location[key] || '' : ''
    );

    //
    // Hostname, host and protocol should be lowercased so they can be used to
    // create a proper `origin`.
    //
    if (instruction[4]) url[key] = url[key].toLowerCase();
  }

  //
  // Also parse the supplied query string in to an object. If we're supplied
  // with a custom parser as function use that instead of the default build-in
  // parser.
  //
  if (parser) url.query = parser(url.query);

  //
  // If the URL is relative, resolve the pathname against the base URL.
  //
  if (
      relative
    && location.slashes
    && url.pathname.charAt(0) !== '/'
    && (url.pathname !== '' || location.pathname !== '')
  ) {
    url.pathname = resolve(url.pathname, location.pathname);
  }

  //
  // We should not add port numbers if they are already the default port number
  // for a given protocol. As the host also contains the port number we're going
  // override it with the hostname which contains no port number.
  //
  if (!required(url.port, url.protocol)) {
    url.host = url.hostname;
    url.port = '';
  }

  //
  // Parse down the `auth` for the username and password.
  //
  url.username = url.password = '';
  if (url.auth) {
    instruction = url.auth.split(':');
    url.username = instruction[0] || '';
    url.password = instruction[1] || '';
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  //
  // The href is just the compiled result.
  //
  url.href = url.toString();
}

/**
 * This is convenience method for changing properties in the URL instance to
 * insure that they all propagate correctly.
 *
 * @param {String} part          Property we need to adjust.
 * @param {Mixed} value          The newly assigned value.
 * @param {Boolean|Function} fn  When setting the query, it will be the function
 *                               used to parse the query.
 *                               When setting the protocol, double slash will be
 *                               removed from the final url if it is true.
 * @returns {URL} URL instance for chaining.
 * @public
 */
function set(part, value, fn) {
  var url = this;

  switch (part) {
    case 'query':
      if ('string' === typeof value && value.length) {
        value = (fn || qs.parse)(value);
      }

      url[part] = value;
      break;

    case 'port':
      url[part] = value;

      if (!required(value, url.protocol)) {
        url.host = url.hostname;
        url[part] = '';
      } else if (value) {
        url.host = url.hostname +':'+ value;
      }

      break;

    case 'hostname':
      url[part] = value;

      if (url.port) value += ':'+ url.port;
      url.host = value;
      break;

    case 'host':
      url[part] = value;

      if (/:\d+$/.test(value)) {
        value = value.split(':');
        url.port = value.pop();
        url.hostname = value.join(':');
      } else {
        url.hostname = value;
        url.port = '';
      }

      break;

    case 'protocol':
      url.protocol = value.toLowerCase();
      url.slashes = !fn;
      break;

    case 'pathname':
    case 'hash':
      if (value) {
        var char = part === 'pathname' ? '/' : '#';
        url[part] = value.charAt(0) !== char ? char + value : value;
      } else {
        url[part] = value;
      }
      break;

    default:
      url[part] = value;
  }

  for (var i = 0; i < rules.length; i++) {
    var ins = rules[i];

    if (ins[4]) url[ins[1]] = url[ins[1]].toLowerCase();
  }

  url.origin = url.protocol && url.host && url.protocol !== 'file:'
    ? url.protocol +'//'+ url.host
    : 'null';

  url.href = url.toString();

  return url;
}

/**
 * Transform the properties back in to a valid and full URL string.
 *
 * @param {Function} stringify Optional query stringify function.
 * @returns {String} Compiled version of the URL.
 * @public
 */
function toString(stringify) {
  if (!stringify || 'function' !== typeof stringify) stringify = qs.stringify;

  var query
    , url = this
    , protocol = url.protocol;

  if (protocol && protocol.charAt(protocol.length - 1) !== ':') protocol += ':';

  var result = protocol + (url.slashes ? '//' : '');

  if (url.username) {
    result += url.username;
    if (url.password) result += ':'+ url.password;
    result += '@';
  }

  result += url.host + url.pathname;

  query = 'object' === typeof url.query ? stringify(url.query) : url.query;
  if (query) result += '?' !== query.charAt(0) ? '?'+ query : query;

  if (url.hash) result += url.hash;

  return result;
}

Url.prototype = { set: set, toString: toString };

//
// Expose the URL parser and some additional properties that might be useful for
// others or testing.
//
Url.extractProtocol = extractProtocol;
Url.location = lolcation;
Url.qs = qs;

module.exports = Url;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"querystringify":59,"requires-port":60}]},{},[1])(1)
});


//# sourceMappingURL=sockjs.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./node_modules/url/url.js":
/*!*********************************!*\
  !*** ./node_modules/url/url.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(/*! punycode */ "./node_modules/node-libs-browser/node_modules/punycode/punycode.js");
var util = __webpack_require__(/*! ./util */ "./node_modules/url/util.js");

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(/*! querystring */ "./node_modules/querystring-es3/index.js");

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),

/***/ "./node_modules/url/util.js":
/*!**********************************!*\
  !*** ./node_modules/url/util.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/BaseClient.js":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client/clients/BaseClient.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

module.exports = /*#__PURE__*/function () {
  function BaseClient() {
    _classCallCheck(this, BaseClient);
  }

  _createClass(BaseClient, null, [{
    key: "getClientPath",
    value: function getClientPath(options) {
      throw new Error('Client needs implementation');
    }
  }]);

  return BaseClient;
}();

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js":
/*!***********************************************************!*\
  !*** (webpack)-dev-server/client/clients/SockJSClient.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable
  no-unused-vars
*/

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var SockJS = __webpack_require__(/*! sockjs-client/dist/sockjs */ "./node_modules/sockjs-client/dist/sockjs.js");

var BaseClient = __webpack_require__(/*! ./BaseClient */ "./node_modules/webpack-dev-server/client/clients/BaseClient.js");

module.exports = /*#__PURE__*/function (_BaseClient) {
  _inherits(SockJSClient, _BaseClient);

  var _super = _createSuper(SockJSClient);

  function SockJSClient(url) {
    var _this;

    _classCallCheck(this, SockJSClient);

    _this = _super.call(this);
    _this.sock = new SockJS(url);

    _this.sock.onerror = function (err) {// TODO: use logger to log the error event once client and client-src
      // are reorganized to have the same directory structure
    };

    return _this;
  }

  _createClass(SockJSClient, [{
    key: "onOpen",
    value: function onOpen(f) {
      this.sock.onopen = f;
    }
  }, {
    key: "onClose",
    value: function onClose(f) {
      this.sock.onclose = f;
    } // call f with the message string as the first argument

  }, {
    key: "onMessage",
    value: function onMessage(f) {
      this.sock.onmessage = function (e) {
        f(e.data);
      };
    }
  }], [{
    key: "getClientPath",
    value: function getClientPath(options) {
      return /*require.resolve*/(/*! ./SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
    }
  }]);

  return SockJSClient;
}(BaseClient);

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/index.js?http://localhost:8080":
/*!*********************************************************!*\
  !*** (webpack)-dev-server/client?http://localhost:8080 ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__resourceQuery) {
/* global __resourceQuery WorkerGlobalScope self */

/* eslint prefer-destructuring: off */

var stripAnsi = __webpack_require__(/*! strip-ansi */ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js");

var socket = __webpack_require__(/*! ./socket */ "./node_modules/webpack-dev-server/client/socket.js");

var overlay = __webpack_require__(/*! ./overlay */ "./node_modules/webpack-dev-server/client/overlay.js");

var _require = __webpack_require__(/*! ./utils/log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log,
    setLogLevel = _require.setLogLevel;

var sendMessage = __webpack_require__(/*! ./utils/sendMessage */ "./node_modules/webpack-dev-server/client/utils/sendMessage.js");

var reloadApp = __webpack_require__(/*! ./utils/reloadApp */ "./node_modules/webpack-dev-server/client/utils/reloadApp.js");

var createSocketUrl = __webpack_require__(/*! ./utils/createSocketUrl */ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js");

var status = {
  isUnloading: false,
  currentHash: ''
};
var options = {
  hot: false,
  hotReload: true,
  liveReload: false,
  initial: true,
  useWarningOverlay: false,
  useErrorOverlay: false,
  useProgress: false
};
var socketUrl = createSocketUrl(__resourceQuery);
self.addEventListener('beforeunload', function () {
  status.isUnloading = true;
});

if (typeof window !== 'undefined') {
  var qs = window.location.search.toLowerCase();
  options.hotReload = qs.indexOf('hotreload=false') === -1;
}

var onSocketMessage = {
  hot: function hot() {
    options.hot = true;
    log.info('[WDS] Hot Module Replacement enabled.');
  },
  liveReload: function liveReload() {
    options.liveReload = true;
    log.info('[WDS] Live Reloading enabled.');
  },
  invalid: function invalid() {
    log.info('[WDS] App updated. Recompiling...'); // fixes #1042. overlay doesn't clear if errors are fixed but warnings remain.

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('Invalid');
  },
  hash: function hash(_hash) {
    status.currentHash = _hash;
  },
  'still-ok': function stillOk() {
    log.info('[WDS] Nothing changed.');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    sendMessage('StillOk');
  },
  'log-level': function logLevel(level) {
    var hotCtx = __webpack_require__("./node_modules/webpack/hot sync ^\\.\\/log$");

    if (hotCtx.keys().indexOf('./log') !== -1) {
      hotCtx('./log').setLogLevel(level);
    }

    setLogLevel(level);
  },
  overlay: function overlay(value) {
    if (typeof document !== 'undefined') {
      if (typeof value === 'boolean') {
        options.useWarningOverlay = false;
        options.useErrorOverlay = value;
      } else if (value) {
        options.useWarningOverlay = value.warnings;
        options.useErrorOverlay = value.errors;
      }
    }
  },
  progress: function progress(_progress) {
    if (typeof document !== 'undefined') {
      options.useProgress = _progress;
    }
  },
  'progress-update': function progressUpdate(data) {
    if (options.useProgress) {
      log.info("[WDS] ".concat(data.percent, "% - ").concat(data.msg, "."));
    }

    sendMessage('Progress', data);
  },
  ok: function ok() {
    sendMessage('Ok');

    if (options.useWarningOverlay || options.useErrorOverlay) {
      overlay.clear();
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  'content-changed': function contentChanged() {
    log.info('[WDS] Content base changed. Reloading...');
    self.location.reload();
  },
  warnings: function warnings(_warnings) {
    log.warn('[WDS] Warnings while compiling.');

    var strippedWarnings = _warnings.map(function (warning) {
      return stripAnsi(warning);
    });

    sendMessage('Warnings', strippedWarnings);

    for (var i = 0; i < strippedWarnings.length; i++) {
      log.warn(strippedWarnings[i]);
    }

    if (options.useWarningOverlay) {
      overlay.showMessage(_warnings);
    }

    if (options.initial) {
      return options.initial = false;
    } // eslint-disable-line no-return-assign


    reloadApp(options, status);
  },
  errors: function errors(_errors) {
    log.error('[WDS] Errors while compiling. Reload prevented.');

    var strippedErrors = _errors.map(function (error) {
      return stripAnsi(error);
    });

    sendMessage('Errors', strippedErrors);

    for (var i = 0; i < strippedErrors.length; i++) {
      log.error(strippedErrors[i]);
    }

    if (options.useErrorOverlay) {
      overlay.showMessage(_errors);
    }

    options.initial = false;
  },
  error: function error(_error) {
    log.error(_error);
  },
  close: function close() {
    log.error('[WDS] Disconnected!');
    sendMessage('Close');
  }
};
socket(socketUrl, onSocketMessage);
/* WEBPACK VAR INJECTION */}.call(this, "?http://localhost:8080"))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/overlay.js":
/*!**********************************************!*\
  !*** (webpack)-dev-server/client/overlay.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // The error overlay is inspired (and mostly copied) from Create React App (https://github.com/facebookincubator/create-react-app)
// They, in turn, got inspired by webpack-hot-middleware (https://github.com/glenjamin/webpack-hot-middleware).

var ansiHTML = __webpack_require__(/*! ansi-html */ "./node_modules/ansi-html/index.js");

var _require = __webpack_require__(/*! html-entities */ "./node_modules/html-entities/lib/index.js"),
    AllHtmlEntities = _require.AllHtmlEntities;

var entities = new AllHtmlEntities();
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
var overlayIframe = null;
var overlayDiv = null;
var lastOnOverlayDivReady = null;
ansiHTML.setColors(colors);

function createOverlayIframe(onIframeLoad) {
  var iframe = document.createElement('iframe');
  iframe.id = 'webpack-dev-server-client-overlay';
  iframe.src = 'about:blank';
  iframe.style.position = 'fixed';
  iframe.style.left = 0;
  iframe.style.top = 0;
  iframe.style.right = 0;
  iframe.style.bottom = 0;
  iframe.style.width = '100vw';
  iframe.style.height = '100vh';
  iframe.style.border = 'none';
  iframe.style.zIndex = 9999999999;
  iframe.onload = onIframeLoad;
  return iframe;
}

function addOverlayDivTo(iframe) {
  var div = iframe.contentDocument.createElement('div');
  div.id = 'webpack-dev-server-client-overlay-div';
  div.style.position = 'fixed';
  div.style.boxSizing = 'border-box';
  div.style.left = 0;
  div.style.top = 0;
  div.style.right = 0;
  div.style.bottom = 0;
  div.style.width = '100vw';
  div.style.height = '100vh';
  div.style.backgroundColor = 'rgba(0, 0, 0, 0.85)';
  div.style.color = '#E8E8E8';
  div.style.fontFamily = 'Menlo, Consolas, monospace';
  div.style.fontSize = 'large';
  div.style.padding = '2rem';
  div.style.lineHeight = '1.2';
  div.style.whiteSpace = 'pre-wrap';
  div.style.overflow = 'auto';
  iframe.contentDocument.body.appendChild(div);
  return div;
}

function ensureOverlayDivExists(onOverlayDivReady) {
  if (overlayDiv) {
    // Everything is ready, call the callback right away.
    onOverlayDivReady(overlayDiv);
    return;
  } // Creating an iframe may be asynchronous so we'll schedule the callback.
  // In case of multiple calls, last callback wins.


  lastOnOverlayDivReady = onOverlayDivReady;

  if (overlayIframe) {
    // We've already created it.
    return;
  } // Create iframe and, when it is ready, a div inside it.


  overlayIframe = createOverlayIframe(function () {
    overlayDiv = addOverlayDivTo(overlayIframe); // Now we can talk!

    lastOnOverlayDivReady(overlayDiv);
  }); // Zalgo alert: onIframeLoad() will be called either synchronously
  // or asynchronously depending on the browser.
  // We delay adding it so `overlayIframe` is set when `onIframeLoad` fires.

  document.body.appendChild(overlayIframe);
} // Successful compilation.


function clear() {
  if (!overlayDiv) {
    // It is not there in the first place.
    return;
  } // Clean up and reset internal state.


  document.body.removeChild(overlayIframe);
  overlayDiv = null;
  overlayIframe = null;
  lastOnOverlayDivReady = null;
} // Compilation with errors (e.g. syntax error or missing modules).


function showMessage(messages) {
  ensureOverlayDivExists(function (div) {
    // Make it look similar to our terminal.
    div.innerHTML = "<span style=\"color: #".concat(colors.red, "\">Failed to compile.</span><br><br>").concat(ansiHTML(entities.encode(messages[0])));
  });
}

module.exports = {
  clear: clear,
  showMessage: showMessage
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/socket.js":
/*!*********************************************!*\
  !*** (webpack)-dev-server/client/socket.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(__webpack_dev_server_client__) {
/* global __webpack_dev_server_client__ */

/* eslint-disable
  camelcase
*/
// this SockJSClient is here as a default fallback, in case inline mode
// is off or the client is not injected. This will be switched to
// WebsocketClient when it becomes the default
// important: the path to SockJSClient here is made to work in the 'client'
// directory, but is updated via the webpack compilation when compiled from
// the 'client-src' directory

var Client = typeof __webpack_dev_server_client__ !== 'undefined' ? __webpack_dev_server_client__ : // eslint-disable-next-line import/no-unresolved
__webpack_require__(/*! ./clients/SockJSClient */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js");
var retries = 0;
var client = null;

var socket = function initSocket(url, handlers) {
  client = new Client(url);
  client.onOpen(function () {
    retries = 0;
  });
  client.onClose(function () {
    if (retries === 0) {
      handlers.close();
    } // Try to reconnect.


    client = null; // After 10 retries stop trying, to prevent logspam.

    if (retries <= 10) {
      // Exponentially increase timeout to reconnect.
      // Respectfully copied from the package `got`.
      // eslint-disable-next-line no-mixed-operators, no-restricted-properties
      var retryInMs = 1000 * Math.pow(2, retries) + Math.random() * 100;
      retries += 1;
      setTimeout(function () {
        socket(url, handlers);
      }, retryInMs);
    }
  });
  client.onMessage(function (data) {
    var msg = JSON.parse(data);

    if (handlers[msg.type]) {
      handlers[msg.type](msg.data);
    }
  });
};

module.exports = socket;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! (webpack)-dev-server/client/clients/SockJSClient.js */ "./node_modules/webpack-dev-server/client/clients/SockJSClient.js")))

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/createSocketUrl.js":
/*!************************************************************!*\
  !*** (webpack)-dev-server/client/utils/createSocketUrl.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global self */

var url = __webpack_require__(/*! url */ "./node_modules/url/url.js");

var getCurrentScriptSource = __webpack_require__(/*! ./getCurrentScriptSource */ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js");

function createSocketUrl(resourceQuery, currentLocation) {
  var urlParts;

  if (typeof resourceQuery === 'string' && resourceQuery !== '') {
    // If this bundle is inlined, use the resource query to get the correct url.
    // format is like `?http://0.0.0.0:8096&sockPort=8097&sockHost=localhost`
    urlParts = url.parse(resourceQuery // strip leading `?` from query string to get a valid URL
    .substr(1) // replace first `&` with `?` to have a valid query string
    .replace('&', '?'), true);
  } else {
    // Else, get the url from the <script> this file was called with.
    var scriptHost = getCurrentScriptSource();
    urlParts = url.parse(scriptHost || '/', true, true);
  } // Use parameter to allow passing location in unit tests


  if (typeof currentLocation === 'string' && currentLocation !== '') {
    currentLocation = url.parse(currentLocation);
  } else {
    currentLocation = self.location;
  }

  return getSocketUrl(urlParts, currentLocation);
}
/*
 * Gets socket URL based on Script Source/Location
 * (scriptSrc: URL, location: URL) -> URL
 */


function getSocketUrl(urlParts, loc) {
  var auth = urlParts.auth,
      query = urlParts.query;
  var hostname = urlParts.hostname,
      protocol = urlParts.protocol,
      port = urlParts.port;

  if (!port || port === '0') {
    port = loc.port;
  } // check ipv4 and ipv6 `all hostname`
  // why do we need this check?
  // hostname n/a for file protocol (example, when using electron, ionic)
  // see: https://github.com/webpack/webpack-dev-server/pull/384


  if ((hostname === '0.0.0.0' || hostname === '::') && loc.hostname && loc.protocol.indexOf('http') === 0) {
    hostname = loc.hostname;
  } // `hostname` can be empty when the script path is relative. In that case, specifying
  // a protocol would result in an invalid URL.
  // When https is used in the app, secure websockets are always necessary
  // because the browser doesn't accept non-secure websockets.


  if (hostname && hostname !== '127.0.0.1' && (loc.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {
    protocol = loc.protocol;
  } // all of these sock url params are optionally passed in through
  // resourceQuery, so we need to fall back to the default if
  // they are not provided


  var sockHost = query.sockHost || hostname;
  var sockPath = query.sockPath || '/sockjs-node';
  var sockPort = query.sockPort || port;

  if (sockPort === 'location') {
    sockPort = loc.port;
  }

  return url.format({
    protocol: protocol,
    auth: auth,
    hostname: sockHost,
    port: sockPort,
    // If sockPath is provided it'll be passed in via the resourceQuery as a
    // query param so it has to be parsed out of the querystring in order for the
    // client to open the socket to the correct location.
    pathname: sockPath
  });
}

module.exports = createSocketUrl;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/getCurrentScriptSource.js":
/*!*******************************************************************!*\
  !*** (webpack)-dev-server/client/utils/getCurrentScriptSource.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function getCurrentScriptSource() {
  // `document.currentScript` is the most accurate way to find the current script,
  // but is not supported in all browsers.
  if (document.currentScript) {
    return document.currentScript.getAttribute('src');
  } // Fall back to getting all scripts in the document.


  var scriptElements = document.scripts || [];
  var currentScript = scriptElements[scriptElements.length - 1];

  if (currentScript) {
    return currentScript.getAttribute('src');
  } // Fail as there was no script to use.


  throw new Error('[WDS] Failed to get current script source.');
}

module.exports = getCurrentScriptSource;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/log.js":
/*!************************************************!*\
  !*** (webpack)-dev-server/client/utils/log.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var log = __webpack_require__(/*! loglevel */ "./node_modules/loglevel/lib/loglevel.js").getLogger('webpack-dev-server');

var INFO = 'info';
var WARN = 'warn';
var ERROR = 'error';
var DEBUG = 'debug';
var TRACE = 'trace';
var SILENT = 'silent'; // deprecated
// TODO: remove these at major released
// https://github.com/webpack/webpack-dev-server/pull/1825

var WARNING = 'warning';
var NONE = 'none'; // Set the default log level

log.setDefaultLevel(INFO);

function setLogLevel(level) {
  switch (level) {
    case INFO:
    case WARN:
    case ERROR:
    case DEBUG:
    case TRACE:
      log.setLevel(level);
      break;
    // deprecated

    case WARNING:
      // loglevel's warning name is different from webpack's
      log.setLevel('warn');
      break;
    // deprecated

    case NONE:
    case SILENT:
      log.disableAll();
      break;

    default:
      log.error("[WDS] Unknown clientLogLevel '".concat(level, "'"));
  }
}

module.exports = {
  log: log,
  setLogLevel: setLogLevel
};

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/reloadApp.js":
/*!******************************************************!*\
  !*** (webpack)-dev-server/client/utils/reloadApp.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global WorkerGlobalScope self */

var _require = __webpack_require__(/*! ./log */ "./node_modules/webpack-dev-server/client/utils/log.js"),
    log = _require.log;

function reloadApp(_ref, _ref2) {
  var hotReload = _ref.hotReload,
      hot = _ref.hot,
      liveReload = _ref.liveReload;
  var isUnloading = _ref2.isUnloading,
      currentHash = _ref2.currentHash;

  if (isUnloading || !hotReload) {
    return;
  }

  if (hot) {
    log.info('[WDS] App hot update...');

    var hotEmitter = __webpack_require__(/*! webpack/hot/emitter */ "./node_modules/webpack/hot/emitter.js");

    hotEmitter.emit('webpackHotUpdate', currentHash);

    if (typeof self !== 'undefined' && self.window) {
      // broadcast update to window
      self.postMessage("webpackHotUpdate".concat(currentHash), '*');
    }
  } // allow refreshing the page only if liveReload isn't disabled
  else if (liveReload) {
      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)

      var intervalId = self.setInterval(function () {
        if (rootWindow.location.protocol !== 'about:') {
          // reload immediately if protocol is valid
          applyReload(rootWindow, intervalId);
        } else {
          rootWindow = rootWindow.parent;

          if (rootWindow.parent === rootWindow) {
            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways
            applyReload(rootWindow, intervalId);
          }
        }
      });
    }

  function applyReload(rootWindow, intervalId) {
    clearInterval(intervalId);
    log.info('[WDS] App updated. Reloading...');
    rootWindow.location.reload();
  }
}

module.exports = reloadApp;

/***/ }),

/***/ "./node_modules/webpack-dev-server/client/utils/sendMessage.js":
/*!********************************************************!*\
  !*** (webpack)-dev-server/client/utils/sendMessage.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* global __resourceQuery WorkerGlobalScope self */
// Send messages to the outside, so plugins can consume it.

function sendMsg(type, data) {
  if (typeof self !== 'undefined' && (typeof WorkerGlobalScope === 'undefined' || !(self instanceof WorkerGlobalScope))) {
    self.postMessage({
      type: "webpack".concat(type),
      data: data
    }, '*');
  }
}

module.exports = sendMsg;

/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/ansi-regex/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g;
};


/***/ }),

/***/ "./node_modules/webpack-dev-server/node_modules/strip-ansi/index.js":
/*!*************************************************************!*\
  !*** (webpack)-dev-server/node_modules/strip-ansi/index.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(/*! ansi-regex */ "./node_modules/webpack-dev-server/node_modules/ansi-regex/index.js")();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./node_modules/webpack/hot sync ^\\.\\/log$":
/*!*************************************************!*\
  !*** (webpack)/hot sync nonrecursive ^\.\/log$ ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./log": "./node_modules/webpack/hot/log.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/webpack/hot sync ^\\.\\/log$";

/***/ }),

/***/ "./node_modules/webpack/hot/emitter.js":
/*!********************************!*\
  !*** (webpack)/hot/emitter.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var EventEmitter = __webpack_require__(/*! events */ "./node_modules/events/events.js");
module.exports = new EventEmitter();


/***/ }),

/***/ "./node_modules/webpack/hot/log.js":
/*!****************************!*\
  !*** (webpack)/hot/log.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports) {

var logLevel = "info";

function dummy() {}

function shouldLog(level) {
	var shouldLog =
		(logLevel === "info" && level === "info") ||
		(["info", "warning"].indexOf(logLevel) >= 0 && level === "warning") ||
		(["info", "warning", "error"].indexOf(logLevel) >= 0 && level === "error");
	return shouldLog;
}

function logGroup(logFn) {
	return function(level, msg) {
		if (shouldLog(level)) {
			logFn(msg);
		}
	};
}

module.exports = function(level, msg) {
	if (shouldLog(level)) {
		if (level === "info") {
			console.log(msg);
		} else if (level === "warning") {
			console.warn(msg);
		} else if (level === "error") {
			console.error(msg);
		}
	}
};

/* eslint-disable node/no-unsupported-features/node-builtins */
var group = console.group || dummy;
var groupCollapsed = console.groupCollapsed || dummy;
var groupEnd = console.groupEnd || dummy;
/* eslint-enable node/no-unsupported-features/node-builtins */

module.exports.group = logGroup(group);

module.exports.groupCollapsed = logGroup(groupCollapsed);

module.exports.groupEnd = logGroup(groupEnd);

module.exports.setLogLevel = function(level) {
	logLevel = level;
};

module.exports.formatError = function(err) {
	var message = err.message;
	var stack = err.stack;
	if (!stack) {
		return message;
	} else if (stack.indexOf(message) < 0) {
		return message + "\n" + stack;
	} else {
		return stack;
	}
};


/***/ }),

/***/ "./src/any.utils.js":
/*!**************************!*\
  !*** ./src/any.utils.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

function preloadSoundUrl(url) {
  var el = document.createElement('audio');
  document.body.appendChild(el);
  el.src = url;
}

function playSoundUrl(url, volume) {
  var el = document.createElement('audio');
  document.body.appendChild(el);

  el.oncanplay = function () {
    el.play();
  };

  el.onended = function () {
    document.body.removeChild(el);
    el = undefined;
  };

  el.src = url;
  var vol = volume;

  if (!vol || vol >= 1) {
    vol = 1;
  }

  el.volume = vol;
}

function makeExternalScript(parentNode, scriptURL, onLoad, onError) {
  var elem = new Control(parentNode, 'script');

  elem.node.onload = function () {
    //console.log(elem.node);
    onLoad(elem.node.textContent);
    parentNode.removeChild(elem);
  };

  elem.node.onerror = function () {
    onError();
  };

  elem.node.type = 'model-source';
  elem.node.async = true; //parentNode.appendChild(elem.node);

  elem.node.src = scriptURL;
  return elem;
}

module.exports = {
  preloadSoundUrl: preloadSoundUrl,
  playSoundUrl: playSoundUrl,
  makeExternalScript: makeExternalScript
};

/***/ }),

/***/ "./src/app.js":
/*!********************!*\
  !*** ./src/app.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GLCanvas = __webpack_require__(/*! ./gl-canvas.component.js */ "./src/gl-canvas.component.js");

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var Loader = __webpack_require__(/*! ./res-loader.js */ "./src/res-loader.js");

var SoundLoader = __webpack_require__(/*! ./sound-loader.js */ "./src/sound-loader.js");

var StartScreen = __webpack_require__(/*! ./start-screen.component.js */ "./src/start-screen.component.js");

var App = /*#__PURE__*/function () {
  function App(parentNode) {
    var _this = this;

    _classCallCheck(this, App);

    this.parentNode = parentNode;
    this.stWidth = 640;
    this.stHeight = 480;

    if (document.documentElement.clientWidth < 768) {
      this.stWidth = 320;
      this.stHeight = 240;
    }

    window.addEventListener('resize', function () {
      var brDetected = false;
      var nw;
      var nh;

      if (document.documentElement.clientWidth >= 768) {
        if (_this.stWidth != 640) {
          brDetected = true;
        }

        nw = 640;
        nh = 480;
      } else if (document.documentElement.clientWidth >= 520) {
        if (_this.stWidth != 480) {
          brDetected = true;
        }

        nw = 480;
        nh = 320;
      } else if (document.documentElement.clientWidth < 520) {
        if (_this.stWidth != 320) {
          brDetected = true;
        }

        nw = 320;
        nh = 240;
      }

      _this.stWidth = nw;
      _this.stHeight = nh;

      if (brDetected) {
        if (!_this.startScreen.isHidden) {
          _this.startScreen.refresh(_this.stWidth, _this.stHeight);
        }

        if (_this.glCanvas) {
          _this.glCanvas.node.width = _this.stWidth;
          _this.glCanvas.node.height = _this.stHeight;

          _this.glCanvas.overlayRefresh();

          _this.glCanvas.menuRefresh();
        }
      }
    });
    this.startScreen = new StartScreen(parentNode, this.stWidth, this.stHeight, function () {
      _this.loadApp(function () {
        _this.startScreen.hide();
      }, function (type, it, length, current) {
        _this.startScreen.loadingIndicator.node.textContent = "Loading ".concat(type, " ").concat(current, "/").concat(length, ", ").concat(Math.round(100 * current / length), "% done ");
      });
    });
  }

  _createClass(App, [{
    key: "loadApp",
    value: function loadApp(onLoad, onProgress) {
      var _this2 = this;

      var parentNode = this.parentNode;
      var sndLoader = new SoundLoader.Sounder(SoundLoader.soundConfig, function () {
        var loader = new Loader.ModelLoader(Loader.modelConfig, function (res) {
          console.log('loaded', res);
          window.gameResource = res;
          _this2.glCanvas = new GLCanvas(parentNode, _this2.stWidth, _this2.stHeight);

          _this2.glCanvas.setController(_this2);

          window.addEventListener('resize', function () {});
          onLoad();
        }, onProgress);
        window.resBase = loader;
      }, onProgress);
      window.sndBase = sndLoader;
    }
  }]);

  return App;
}();

module.exports = {
  App: App
};

/***/ }),

/***/ "./src/calc.utils.js":
/*!***************************!*\
  !*** ./src/calc.utils.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var Vector3d = __webpack_require__(/*! ./vector3d.dev.js */ "./src/vector3d.dev.js");

function radToDeg(r) {
  return r * 180 / Math.PI;
}

function degToRad(d) {
  return d * Math.PI / 180;
}

function rand(lim) {
  return Math.trunc(Math.random() * lim);
}

function makeCameraMatrix1(aspect, rx, ry, rz, px, py, pz) {
  var matrix = m4.perspective(1, aspect, 0.1, 2000);
  matrix = m4.xRotate(matrix, ry);
  matrix = m4.yRotate(matrix, rz);
  matrix = m4.zRotate(matrix, rx);
  matrix = m4.scale(matrix, 1, 1, 1);
  matrix = m4.translate(matrix, px, py, pz);
  return matrix;
}

function makeCameraMatrix(aspect, mv) {
  var matrix = m4.perspective(1, aspect, 0.1, 2000);
  return m4.multiply(matrix, mv);
}

function getNormal(u, v, w) {
  var nv = {
    x: v.x - u.x,
    y: v.y - u.y,
    z: v.z - u.z
  };
  var nw = {
    x: w.x - u.x,
    y: w.y - u.y,
    z: w.z - u.z
  };
  var n = {
    x: nv.y * nw.z - nv.z * nw.y,
    y: nv.z * nw.x - nv.x * nw.z,
    z: nv.x * nw.y - nv.y * nw.x
  };
  var d = Math.hypot(n.x, n.y, n.z);
  return {
    x: n.x / d,
    y: n.y / d,
    z: n.z / d
  };
}

function getValueD(v, n) {
  var d = -(v.x * n.x + v.y * n.y + v.z * n.z);
  return d;
}

function solveLinear(v1, v2, u, v, w) {
  var n = getNormal(u, v, w);
  var d = getValueD(u, n);
  var nv = {
    x: v1.x - v2.x,
    y: v1.y - v2.y,
    z: v1.z - v2.z
  };
  var h = (n.x * v1.x + n.y * v1.y + n.z * v1.z + d) / -(n.x * nv.x + n.y * nv.y + n.z * nv.z);
  return {
    x: v1.x + h * nv.x,
    y: v1.y + h * nv.y,
    z: v1.z + h * nv.z
  };
}

function getMatrixProduct(m1, m2) {
  var res = [];
  var resl = m1.length;

  for (var i = 0; i < m1.length; i += 1) {
    var rw = [];

    for (var j = 0; j < m2[0].length; j += 1) {
      var rws = 0;

      for (var k = 0; k < m2.length; k += 1) {
        rws += m1[i][k] * m2[k][j];
      }

      rw.push(rws);
    }

    res.push(rw);
  }

  return res;
}

function vecMul(a, b) {
  var vm = (a.y * b.z - a.z * b.y, a.z * b.x - a.x * b.z, a.x * b.y - a.y * b.x);
  return vm;
}

function inTriangle(a, b, c, p) {
  var al = a.subVector(b).abs();
  var bl = b.subVector(c).abs();
  var cl = c.subVector(a).abs();
  var ap = a.subVector(p).abs();
  var bp = b.subVector(p).abs();
  var cp = c.subVector(p).abs();
  var pa = (ap + bp + al) / 2;
  var pb = (bp + cp + bl) / 2;
  var pc = (cp + ap + cl) / 2;
  var sa = Math.sqrt(pa * (pa - ap) * (pa - bp) * (pa - al));
  var sb = Math.sqrt(pb * (pb - bp) * (pb - cp) * (pb - bl));
  var sc = Math.sqrt(pc * (pc - cp) * (pc - ap) * (pc - cl));
  var pr = (al + bl + cl) / 2;
  var s = Math.sqrt(pr * (pr - al) * (pr - bl) * (pr - cl));
  return sa + sb + sc <= s + 0.00001;
}

function onLine(a, b, p) {
  var al = a.subVector(b).abs();
  var ap = a.subVector(p).abs();
  var bp = b.subVector(p).abs();
  return ap + bp <= al + 0.00001;
}

function lineCrossTriangle(a, b, u, v, w) {
  var res;
  var dv = solveLinear(a, b, u, v, w);
  var dVector = new Vector3d(dv.x, dv.y, dv.z);

  if (inTriangle(u, v, w, dVector)) {
    if (onLine(a, b, dVector)) {
      res = dVector;
    }
  }

  return res;
}

function transformVertexList(vertexList, matrix) {
  var ot = [];
  var mtx = matFromM4(matrix);

  for (var i = 0; i < vertexList.length / 3; i++) {
    var v = [[vertexList[i * 3 + 0]], [vertexList[i * 3 + 1]], [vertexList[i * 3 + 2]], [1]];
    var res = getMatrixProduct(mtx, v);
    ot.push(res[0][0]);
    ot.push(res[1][0]);
    ot.push(res[2][0]);
  }

  return ot;
}

function crossMeshByLine(vertexList, lineVectorA, lineVectorB) {
  var res = [];

  for (var i = 0; i < vertexList.length; i += 9) {
    var v = [];

    for (var j = 0; j < 3; j += 1) {
      v[j] = new Vector3d(vertexList[i + j * 3 + 0], vertexList[i + j * 3 + 1], vertexList[i + j * 3 + 2]);
    }

    var dv = lineCrossTriangle(lineVectorA, lineVectorB, v[0], v[1], v[2]);

    if (dv) {
      res.push(dv);
    }
  }

  return res;
}

function crossMeshByLineT(vertexList, lineVectorA, lineVectorB) {
  var res = [];

  for (var i = 0; i < vertexList.length; i += 9) {
    var v = [];

    for (var j = 0; j < 3; j += 1) {
      v[j] = new Vector3d(vertexList[i + j * 3 + 0], vertexList[i + j * 3 + 1], vertexList[i + j * 3 + 2]);
    }

    var dv = lineCrossTriangle(lineVectorA, lineVectorB, v[0], v[1], v[2]);

    if (dv) {
      res.push({
        dv: dv,
        triangle: [v[0], v[1], v[2]]
      });
    }
  }

  return res;
}

function mirrorVectorFromMesh(vertexList, p, v) {
  //abs of result differents
  var b = p.addVector(v);
  var cpl = crossMeshByLineT(vertexList, p, b);

  if (cpl.length) {
    ///reflection
    var tr = getNearest(p, cpl).triangle;
    var nor = getNormal(tr[0], tr[1], tr[2]);
    var norm = new Vector3d(nor.x, nor.y, nor.z);
    var dtt = v.subVector(norm.mul(2 * v.dot(norm)));
    return dtt;
  }

  return false;
}

function getNearest(point, list) {
  var minit;
  var minlen = 999999;
  var p = new Vector3d(point.x, point.y, point.z);
  list.forEach(function (it) {
    var v = new Vector3d(it.dv.x, it.dv.y, it.dv.z);
    var dist = p.subVector(v).abs();

    if (dist < minlen) {
      dist = minlen;
      minit = it;
    }
  });
  return minit;
}

function hitMeshPoint(vertexList, p, v) {
  var b = p.addVector(v);
  var cpl = crossMeshByLineT(vertexList, p, b);

  if (cpl.length) {
    var cp = getNearest(p, cpl);
    return cp.dv;
  }

  return false;
}

function isCrossedMeshByLine(vertexList, lineVectorA, lineVectorB) {
  var res = [];

  for (var i = 0; i < vertexList.length; i += 9) {
    var v = [];

    for (var j = 0; j < 3; j += 1) {
      v[j] = new Vector3d(vertexList[i + j * 3 + 0], vertexList[i + j * 3 + 1], vertexList[i + j * 3 + 2]);
    }

    var dv = lineCrossTriangle(lineVectorA, lineVectorB, v[0], v[1], v[2]);

    if (dv) {
      return true;
    }
  }

  return false;
}

function isCrossedSimple(pos, a, v, d) {
  return pos.subVector(a).abs() < v.abs() + d;
}

function matFromM4(m) {
  var res = [];

  for (var i = 0; i < 4; i++) {
    //res.push([m[i*4+0],m[i*4+1],m[i*4+2],m[i*4+3]]);
    res.push([m[0 * 4 + i], m[1 * 4 + i], m[2 * 4 + i], m[3 * 4 + i]]);
  }

  return res;
}

function makeRGBA(color) {
  var result = {
    r: rand(255),
    g: rand(255),
    b: rand(255),
    a: 255
  };

  if (color !== undefined) {
    var num = Number.parseInt('0x' + color);

    if (!Number.isNaN(num)) {
      if (color.length == 3) {
        result.r = Number.parseInt('0x' + color[0] + '0');
        result.g = Number.parseInt('0x' + color[1] + '0');
        result.b = Number.parseInt('0x' + color[2] + '0');
      }

      if (color.length == 4) {
        result.r = Number.parseInt('0x' + color[0] + '0');
        result.g = Number.parseInt('0x' + color[1] + '0');
        result.b = Number.parseInt('0x' + color[2] + '0');
        result.a = Number.parseInt('0x' + color[3] + '0');
      }

      if (color.length == 6) {
        result.r = Number.parseInt('0x' + color[0] + color[1]);
        result.g = Number.parseInt('0x' + color[2] + color[3]);
        result.b = Number.parseInt('0x' + color[4] + color[5]);
      }

      if (color.length == 8) {
        result.r = Number.parseInt('0x' + color[0] + color[1]);
        result.g = Number.parseInt('0x' + color[2] + color[3]);
        result.b = Number.parseInt('0x' + color[4] + color[5]);
        result.a = Number.parseInt('0x' + color[6] + color[7]);
      }
    }

    return result;
  }

  return result;
}

function makeNormRGBA(color) {
  var res = makeRGBA(color);
  return {
    r: res.r / 255,
    g: res.g / 255,
    b: res.b / 255,
    a: res.a / 255
  };
}

function getMaxDistance(vertexList) {
  var max = 0;

  for (var i = 0; i < vertexList.length; i += 3) {
    var v = new Vector3d(vertexList[i + 0], vertexList[i + 1], vertexList[i + 2]);
    var dist = v.abs();

    if (dist > max) {
      max = dist;
    }
  }

  return max;
}

function getPosFromMatrix(matrix) {
  return new Vector3d(matrix[12], matrix[13], matrix[14]);
}

function isTimeout(time) {
  return time < 0 || time > 1000;
}

function matrixFromPos(pos) {
  var scale = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  var azi = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var theta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var mt = m4.identity();
  mt = m4.translate(mt, pos.x, pos.y, pos.z);
  mt = m4.scale(mt, scale, scale, scale);
  mt = m4.zRotate(mt, azi);
  mt = m4.xRotate(mt, theta);
  return mt;
}

module.exports = {
  makeCameraMatrix: makeCameraMatrix,
  getNormal: getNormal,
  getValueD: getValueD,
  solveLinear: solveLinear,
  getMatrixProduct: getMatrixProduct,
  vecMul: vecMul,
  inTriangle: inTriangle,
  onLine: onLine,
  lineCrossTriangle: lineCrossTriangle,
  transformVertexList: transformVertexList,
  crossMeshByLine: crossMeshByLine,
  isCrossedMeshByLine: isCrossedMeshByLine,
  crossMeshByLineT: crossMeshByLineT,
  getNearest: getNearest,
  mirrorVectorFromMesh: mirrorVectorFromMesh,
  radToDeg: radToDeg,
  degToRad: degToRad,
  rand: rand,
  makeRGBA: makeRGBA,
  makeNormRGBA: makeNormRGBA,
  getMaxDistance: getMaxDistance,
  getPosFromMatrix: getPosFromMatrix,
  hitMeshPoint: hitMeshPoint,
  isCrossedSimple: isCrossedSimple,
  isTimeout: isTimeout,
  matrixFromPos: matrixFromPos
};

/***/ }),

/***/ "./src/chunked-mesh.func.js":
/*!**********************************!*\
  !*** ./src/chunked-mesh.func.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ./vector3d.dev.js */ "./src/vector3d.dev.js");

var Mesh = __webpack_require__(/*! ./mesh.object.js */ "./src/mesh.object.js");

function makeChunkedMesh(gl, modelSource, count, matrixFunction) {
  var inputModel = new Mesh(gl);
  inputModel.loadFromSource(modelSource);
  var outVertexList = [];
  var outNormalList = [];
  var outTexList = [];
  var rand = calc.rand;
  var mtx;
  var transformed;

  for (var i = 0; i < count; i++) {
    mtx = matrixFunction(i);
    transformed = calc.transformVertexList(inputModel.vertexList, mtx);
    transformed.forEach(function (it) {
      outVertexList.push(it);
    });
    transformed = calc.transformVertexList(inputModel.normalList, m4.transpose(mtx));
    transformed.forEach(function (it) {
      outNormalList.push(it);
    });
    transformed = inputModel.texList;
    transformed.forEach(function (it) {
      outTexList.push(it);
    });
  }

  inputModel.deleteBuffers();
  var outputMesh = new Mesh(gl);
  outputMesh.loadFromLists(outVertexList, outNormalList, outTexList);
  return outputMesh;
}

module.exports = makeChunkedMesh;

/***/ }),

/***/ "./src/control-js/control.component.js":
/*!*********************************************!*\
  !*** ./src/control-js/control.component.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Control = /*#__PURE__*/function () {
  function Control(parentNode, tagName, className, textContent, click, fromParent) {
    var _this = this;

    _classCallCheck(this, Control);

    var classNameV = className || '';
    var textContentV = textContent || '';
    var tagNameV = tagName || 'div';
    this.isDisabled = false;
    this.isHidden = false;

    if (!fromParent) {
      this.node = document.createElement(tagNameV);
      parentNode.appendChild(this.node);
      this.node.className = classNameV;
      this.node.textContent = textContentV;
    } else {
      this.node = parentNode;
      this.node.className = classNameV;
    }

    if (click) {
      this.click = click;
      this.node.addEventListener('click', function (e) {
        if (!_this.isDisabled) {
          _this.click(e);
        }
      });
    }
  }
  /*setClick(click){
    if (this.click) {return;}
    if (click) {
      this.click = click;
      this.node.addEventListener('click', (e) => {
        if (!this.isDisabled) {
          this.click(e);
        }
      });
    }  
  }*/


  _createClass(Control, [{
    key: "clear",
    value: function clear() {
      this.node.innerHTML = '';
    }
  }, {
    key: "hide",
    value: function hide() {
      this.isHidden = true;
      this.node.style.cssText = 'display:none';
    }
  }, {
    key: "show",
    value: function show() {
      this.isHidden = false;
      this.node.style.cssText = '';
    }
  }, {
    key: "animate",
    value: function animate(animationCssClass, inlineStyle) {
      var _this2 = this;

      window.requestAnimationFrame(function () {
        window.requestAnimationFrame(function () {
          if (animationCssClass) {
            _this2.node.className = animationCssClass;
          }

          if (inlineStyle) {
            _this2.node.style.cssText = inlineStyle;
          }
        });
      });
    }
  }]);

  return Control;
}();

module.exports = Control;

/***/ }),

/***/ "./src/control-js/pager.component.js":
/*!*******************************************!*\
  !*** ./src/control-js/pager.component.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control.component.js */ "./src/control-js/control.component.js");

var Pager = /*#__PURE__*/function (_Control) {
  _inherits(Pager, _Control);

  var _super = _createSuper(Pager);

  function Pager(parentNode) {
    var _this;

    var thisStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    _classCallCheck(this, Pager);

    _this = _super.call(this, parentNode, 'div', thisStyle);
    _this.pages = [];
    return _this;
  }

  _createClass(Pager, [{
    key: "selectPage",
    value: function selectPage(page, index) {
      var _this2 = this;

      this.pages.forEach(function (it, i) {
        if (page == it || i == index) {
          it.show();
          _this2.currentPage = it;
          _this2.currentPageIndex = i;
        } else {
          it.hide();
        }
      });
    }
  }, {
    key: "addPage",
    value: function addPage(text) {
      var style = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'menu_background';
      var page = new Control(this.node, 'div', style, text);
      this.pages.push(page);
      return page;
    }
  }]);

  return Pager;
}(Control);

module.exports = Pager;

/***/ }),

/***/ "./src/controller.object.js":
/*!**********************************!*\
  !*** ./src/controller.object.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

//let Bullet = require('./bullet.object.js')
function mouseMoveHandler(glCanvas, dx, dy) {
  //glCanvas.camera.rotateCam(dx, dy);
  if (!glCanvas.useControls) {
    return;
  }

  glCanvas.game.player.camera.rotateCam(dx, dy, false);
}

function mouseUpHandler(glCanvas, event) {
  if (!glCanvas.useControls) {
    return;
  }

  glCanvas.keyboardState.shot = false;
}

function mouseDownHandler(glCanvas, event) {
  if (!glCanvas.useControls) {
    return;
  }

  glCanvas.keyboardState.shot = true;
}

function keyDownHandler(glCanvas, e) {
  if (!glCanvas.useControls) {
    return;
  }

  if (e.code == 'KeyQ') {
    glCanvas.keyboardState.crenleft = true; //keyboardHandler(glCanvas, 'forward', true);
  }

  if (e.code == 'KeyE') {
    glCanvas.keyboardState.crenright = true; //keyboardHandler(glCanvas, 'backward', true);
  }

  if (e.code == 'KeyW') {
    glCanvas.keyboardState.forward = true; //keyboardHandler(glCanvas, 'forward', true);
  }

  if (e.code == 'KeyS') {
    glCanvas.keyboardState.backward = true; //keyboardHandler(glCanvas, 'backward', true);
  }

  if (e.code == 'KeyA') {
    glCanvas.keyboardState.left = true; //keyboardHandler(glCanvas, 'left', true);
  }

  if (e.code == 'KeyD') {
    glCanvas.keyboardState.right = true; //keyboardHandler(glCanvas, 'right', true);
  }

  if (e.code == 'Space') {
    glCanvas.keyboardState.space = true; //keyboardHandler(glCanvas, 'space', true);
  }
}

function keyUpHandler(glCanvas, e) {
  if (!glCanvas.useControls) {
    return;
  } // TODO set to false all states when controls are disabled


  if (e.code == 'Backquote') {
    if (!glCanvas.menu.isActive) {
      glCanvas.menu.activate();
      glCanvas.keyboardState.shot = false;
      document.exitPointerLock();
    }
  }

  if (e.code == 'KeyQ') {
    glCanvas.keyboardState.crenleft = false; //keyboardHandler(glCanvas, 'forward', true);
  }

  if (e.code == 'KeyE') {
    glCanvas.keyboardState.crenright = false; //keyboardHandler(glCanvas, 'backward', true);
  }

  if (e.code == 'KeyW') {
    glCanvas.keyboardState.forward = false; //keyboardHandler(glCanvas, 'forward', false);
  }

  if (e.code == 'KeyS') {
    glCanvas.keyboardState.backward = false; //keyboardHandler(glCanvas, 'backward', false);
  }

  if (e.code == 'KeyA') {
    glCanvas.keyboardState.left = false; //keyboardHandler(glCanvas, 'left', false);
  }

  if (e.code == 'KeyD') {
    glCanvas.keyboardState.right = false; //keyboardHandler(glCanvas, 'right', false);
  }

  if (e.code == 'Space') {
    glCanvas.keyboardState.space = false; //keyboardHandler(glCanvas, 'space', false);
  } //if (!glCanvas.useControls){return;}


  if (e.code == 'Digit1') {
    glCanvas.game.player.setWeapon(1);
  }

  if (e.code == 'Digit2') {
    glCanvas.game.player.setWeapon(2);
  }

  if (e.code == 'Digit3') {
    glCanvas.game.player.setWeapon(3);
  }

  if (e.code == 'Digit4') {
    glCanvas.game.player.setWeapon(4);
  }
}

module.exports = {
  mouseMoveHandler: mouseMoveHandler,
  mouseDownHandler: mouseDownHandler,
  mouseUpHandler: mouseUpHandler,
  keyUpHandler: keyUpHandler,
  keyDownHandler: keyDownHandler
};

/***/ }),

/***/ "./src/engine/ani-textured.new.js":
/*!****************************************!*\
  !*** ./src/engine/ani-textured.new.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RenderableShaderList = __webpack_require__(/*! ./renderable-shader-list.new.js */ "./src/engine/renderable-shader-list.new.js");

var RenderableModelList = __webpack_require__(/*! ./renderable-model-list.new.js */ "./src/engine/renderable-model-list.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Animation = __webpack_require__(/*! ./animation.new.js */ "./src/engine/animation.new.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var AnimatedTextureItem = /*#__PURE__*/function (_GameObject) {
  _inherits(AnimatedTextureItem, _GameObject);

  var _super = _createSuper(AnimatedTextureItem);

  function AnimatedTextureItem(shaderVariables, meshPointer, matrix, xmax, ymax, timeStep) {
    var _this;

    _classCallCheck(this, AnimatedTextureItem);

    _this = _super.call(this);
    _this.meshPointer = meshPointer;
    _this.shaderVariables = shaderVariables;
    _this.matrix = matrix || m4.identity();
    _this.count = meshPointer.vertexList.length / 3;
    _this.animation = new Animation(xmax, ymax, timeStep);
    _this.visible = true;

    _this.onRender = function (gl, props) {
      if (_this.visible) {
        _this.animation.render(gl, _this.shaderVariables, props.deltaTime);

        gl.uniformMatrix4fv(_this.shaderVariables.worldUniMat4, false, _this.matrix); //gl.uniform4f(shaderVariables.colorUniVec4, color.r, color.g, color.b, color.a); 

        gl.drawArrays(gl.TRIANGLES, 0, _this.count);
      }
    };

    return _this;
  }

  return AnimatedTextureItem;
}(GameObject);

var ModelList = /*#__PURE__*/function (_RenderableModelList) {
  _inherits(ModelList, _RenderableModelList);

  var _super2 = _createSuper(ModelList);

  function ModelList(gl, shaderVariables, record) {
    var _this2;

    _classCallCheck(this, ModelList);

    _this2 = _super2.call(this, gl, shaderVariables, record.source); //GLUtils.createTexture(gl, record.textureURL, (tex)=>{this.texture = tex});

    GLUtils.createTextureFromImg(gl, record.texImage, function (tex) {
      _this2.texture = tex;
    });

    _this2.onRender = function (gl, props) {
      GLUtils.setBuffer(gl, _this2.mesh.positionBuffer, _this2.shaderVariables.positionAttr, 3);
      GLUtils.setBuffer(gl, _this2.mesh.texBuffer, _this2.shaderVariables.texAttr, 2);
      gl.bindTexture(gl.TEXTURE_2D, _this2.texture);
    };
    /*   this.onDelete = ()=>{
         this.mesh.deleteBuffers();
         gl.deleteTexture(this.texture);
         //deleteTexture
       }*/


    return _this2;
  }

  _createClass(ModelList, [{
    key: "createStaticItem",
    value: function createStaticItem(matrix, xmax, ymax, timeStep) {
      return this.addChild(new AnimatedTextureItem(this.shaderVariables, this.mesh, matrix, xmax, ymax, timeStep));
    }
  }]);

  return ModelList;
}(RenderableModelList);

var ShaderList = /*#__PURE__*/function (_RenderableShaderList) {
  _inherits(ShaderList, _RenderableShaderList);

  var _super3 = _createSuper(ShaderList);

  function ShaderList(gl, shaderUnit) {
    var _this3;

    _classCallCheck(this, ShaderList);

    _this3 = _super3.call(this, gl, shaderUnit);

    _this3.onRender = function (gl, props) {
      shaderUnit.initShader(gl, _this3.shaderProgram, _this3.shaderVariables);
      gl.uniformMatrix4fv(_this3.shaderVariables.viewUniMat4, false, props.viewMatrix);
    };

    return _this3;
  }

  _createClass(ShaderList, [{
    key: "createModelList",
    value: function createModelList(record) {
      return this.addChild(new ModelList(this.gl, this.shaderVariables, record));
    }
  }]);

  return ShaderList;
}(RenderableShaderList);

module.exports = {
  AnimatedShaderList: ShaderList,
  AnimatedModelList: ModelList
};

/***/ }),

/***/ "./src/engine/animation.new.js":
/*!*************************************!*\
  !*** ./src/engine/animation.new.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Animation = /*#__PURE__*/function () {
  function Animation(xmax, ymax, timeStep) {
    var _this = this;

    _classCallCheck(this, Animation);

    //this.gl = gl;
    this.frame = 0;
    this.xmax = xmax;
    this.ymax = ymax;
    this.count = xmax * ymax;
    this.time = timeStep;
    this.timeStep = timeStep;
    this.isFinished = false;

    this.onFinished = function () {
      _this.start();
    };
  }

  _createClass(Animation, [{
    key: "start",
    value: function start() {
      this.isFinished = false;
      this.frame = 0;
      this.time = this.timeStep;
    }
  }, {
    key: "render",
    value: function render(gl, shaderVariables, deltaTime) {
      gl.uniform4f(shaderVariables.posUniVec4, 1 / this.xmax, 1 / this.ymax, this.frame % this.xmax, Math.trunc(this.frame / this.xmax));

      if (!this.isFinished) {
        this.time -= deltaTime;

        if (calc.isTimeout(this.time)) {
          this.frame++;

          if (this.frame >= this.count) {
            this.isFinished = true;

            if (this.onFinished) {
              this.onFinished(this);
            }
          }

          this.time = this.timeStep;
        }
      }
    }
  }]);

  return Animation;
}();

module.exports = Animation;

/***/ }),

/***/ "./src/engine/basic-objects.gmob.js":
/*!******************************************!*\
  !*** ./src/engine/basic-objects.gmob.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var Weapon = __webpack_require__(/*! ./weapon.new.js */ "./src/engine/weapon.new.js");

var Physic = __webpack_require__(/*! ./physic.new.js */ "./src/engine/physic.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Message = __webpack_require__(/*! ./point-msg.new.js */ "./src/engine/point-msg.new.js");

var rand = calc.rand;

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

function makePhysicalAzi(world, pos, scale, azi, theta, modelList) {
  var visible = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : true;
  var type = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 'solid';
  var onContact = arguments.length > 8 ? arguments[8] : undefined;
  var onHit = arguments.length > 9 ? arguments[9] : undefined;
  var niMat = m4.identity();
  niMat = m4.translate(niMat, pos.x, pos.y, pos.z);
  niMat = m4.scale(niMat, scale, scale, scale);
  niMat = m4.zRotate(niMat, azi);
  niMat = m4.xRotate(niMat, theta);
  var el = modelList.createStaticItem(niMat, calc.makeNormRGBA());
  el.visible = visible;
  el.type = type;
  el.hitTransformed = el.meshPointer.getTransformedVertexList(el.matrix);
  el.hitPosition = calc.getPosFromMatrix(el.matrix);
  el.hitDist = el.meshPointer.maxDistance * scale;
  el.physicList = new Physic(el.hitTransformed);
  el.onContact = onContact;
  el.onHit = onHit;
  world.breakableList.addChild(el);
  return el;
}

function makePhysical(world, pos, scale, modelList) {
  var visible = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
  var type = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'solid';
  var onContact = arguments.length > 6 ? arguments[6] : undefined;
  var onHit = arguments.length > 7 ? arguments[7] : undefined;
  var niMat = m4.identity();
  niMat = m4.translate(niMat, pos.x, pos.y, pos.z);
  niMat = m4.scale(niMat, scale, scale, scale);
  var el = modelList.createStaticItem(niMat, calc.makeNormRGBA());
  el.visible = visible;
  el.type = type;
  el.hitTransformed = el.meshPointer.getTransformedVertexList(el.matrix);
  el.hitPosition = calc.getPosFromMatrix(el.matrix);
  el.hitDist = el.meshPointer.maxDistance * scale;
  el.physicList = new Physic(el.hitTransformed);
  el.onContact = onContact;
  el.onHit = onHit;
  world.breakableList.addChild(el);
  return el;
}

function makeCollactable(world, pos, scale, modelList, onCollect) {
  var ob = makePhysical(world, pos, scale, modelList, true, 'collectable', onCollect);
  ob.onCollect = onCollect;
  ob.bonus = '';
  ob.bonus_count = 0;
  return ob;
}

function makeBreakable(world, pos, scale, modelList, onHit) {
  var ob = makePhysical(world, pos, scale, modelList, true, 'solid', false, onHit);
  return ob;
}

function makeBreakableStrong(world, pos, scale, modelList, health, onKilled) {
  var ob = makePhysical(world, pos, scale, modelList, true, 'solid', false, function (bullet) {
    if (bullet.damage !== undefined) {
      ob.health -= bullet.damage;
    } else {
      ob.health--;
    }

    if (ob.health <= 0) {
      onKilled();
    }
  });
  ob.health = health;
  return ob;
}

function makeBreakableExplosive(world, pos, scale, modelList, health, exscale, onKilled) {
  return makeBreakableStrong(world, pos, scale, modelList, health, function (bullet) {
    world.createExplosion(pos, exscale);
    var vol = 130 / pos.subVector(world.game.player.camera.getPosVector()).abs();
    rand(10) < 5 ? anyutils.playSoundUrl('assets/sounds/expl1.mp3', vol) : anyutils.playSoundUrl('assets/sounds/expl2.mp3', vol);
    onKilled();
  });
}

module.exports = {
  makePhysicalAzi: makePhysicalAzi,
  makePhysical: makePhysical,
  makeCollactable: makeCollactable,
  makeBreakable: makeBreakable,
  makeBreakableStrong: makeBreakableStrong,
  makeBreakableExplosive: makeBreakableExplosive
};

/***/ }),

/***/ "./src/engine/bullet.gmob.js":
/*!***********************************!*\
  !*** ./src/engine/bullet.gmob.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Timer = __webpack_require__(/*! ./timer.new.js */ "./src/engine/timer.new.js");

var Message = __webpack_require__(/*! ./point-msg.new.js */ "./src/engine/point-msg.new.js");

var rand = calc.rand;

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

function makeGenericBullet(game, basicObject, pos) {
  var scale = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var azi = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var theta = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
  var speed = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;
  var lifetime = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 1;
  var damage = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;
  var reflectable = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : false;
  var el = basicObject;
  var world = game.world;
  el.reflectable = reflectable; //el.position = pos;

  el.scale = scale;
  el.azi = azi;
  el.theta = theta;
  el.type = 'bullet';
  el.damage = damage; //el.weaponName = weaponName;

  el.position = pos.mul(1);
  el.speedVector = speed.mul(1);
  el.hitExplosionScale = 35;
  el.reflectionAcceleration = 0.5; //el.hitSoundUrl = 

  el.timer = new Timer(lifetime, function () {
    el.deleteSelf();
  });

  el.onProcess = function (deltaTime) {
    el.timer.process(deltaTime);
    el.lastSpeedVectorSync = el.speedVectorSync;
    el.lastPosition = el.position;
    el.speedVectorSync = el.speedVector.mul(deltaTime); //if (el.lastSpeedVectorSync){

    el.position = el.position.addVector(el.speedVectorSync); //}

    var mt = calc.matrixFromPos(el.position, el.scale, el.azi, el.theta);
    el.matrix = mt;
  };

  el.onReact = function (ob) {
    if (!(el && el.speedVectorSync && el.lastPosition)) {
      return;
    }

    if (ob.type == 'object') {
      if (calc.isCrossedSimple(ob.hitPosition, el.position, el.speedVectorSync, ob.hitDist)) {
        if (calc.isCrossedMeshByLine(ob.hitTransformed, el.position, el.position.addVector(el.speedVectorSync))) {
          ob.onHit(el);
        }

        ;
      }

      ;
    }

    if (ob.type == 'breakable') {
      //legacy
      if (calc.isCrossedSimple(ob.hitPosition, el.position, el.speedVectorSync, ob.hitDist)) {
        if (calc.isCrossedMeshByLine(ob.hitTransformed, el.position, el.position.addVector(el.speedVectorSync))) {
          ob.deleteSelf();
          el.deleteSelf();
          world.createExplosion(ob.hitPosition, 15);
        }

        ;
      }

      ;
    }

    if (ob.type == 'solid') {
      //main modern func 
      if (calc.isCrossedSimple(ob.hitPosition, el.lastPosition, el.position.subVector(el.lastPosition), ob.hitDist)) {
        var reflected = ob.physicList.mirrorVector(el.lastPosition, el.position.subVector(el.lastPosition)); //calc.mirrorVectorFromMesh(ob.hitTransformed, el.position, el.speedVectorSync);

        var mx = 10;
        var npos = el.position;
        var hp;
        var hitted;

        if (el.reflectable) {
          if (reflected) {
            hitted = true;
            var vol = 130 / el.position.subVector(game.player.camera.getPosVector()).abs(); //anyutils.playSoundUrl('assets/sounds/hit1.mp3', vol)  

            window.sndBase.playByName('hit1', vol);
          }

          while (reflected && mx >= 0) {
            mx--;
            el.speedVector = reflected.normalize().mul(el.speedVector.abs() * el.reflectionAcceleration);
            npos = npos.addVector(reflected);
            reflected = ob.physicList.mirrorVector(npos, reflected);

            if (mx == 0) {
              world.createExplosion(npos, 5);
            }
          }
        } else {
          hp = ob.physicList.hitMeshPoint(el.lastPosition, el.position.subVector(el.lastPosition));

          if (hp && hp.dv) {
            el.deleteSelf();
            world.createExplosion(hp.dv, el.hitExplosionScale);

            var _vol = 130 / hp.dv.subVector(game.player.camera.getPosVector()).abs(); //anyutils.playSoundUrl('assets/sounds/hit2.mp3', vol)   


            window.sndBase.playByName('hit2', _vol);
          }

          ;
        }

        if (hp || hitted) {
          el.position = el.lastPosition;

          if (ob.onHit) {
            ob.onHit(el);
          }
        }
      }

      ;
    }

    if (ob.type == 'danger') {
      //bug with incorrect near point // legacy
      if (calc.isCrossedSimple(ob.hitPosition, el.position, el.speedVectorSync, ob.hitDist)) {
        var _hp = calc.hitMeshPoint(ob.hitTransformed, el.position, el.speedVectorSync);

        if (_hp) {
          el.deleteSelf();
          world.createExplosion(_hp, 5);
        }

        ;
      }

      ;
    }
  };

  world.bulletList.addChild(el);
  return el;
}

function makeBoxBullet(game, pos, speed, lifetime, color, weaponName, damage, reflectable) {
  var el = game.world.boxModelList.createStaticItem(m4.identity(), color);
  el.weaponName = weaponName;
  el = makeGenericBullet(game, el, pos, 1, 0, 0, speed, lifetime, damage, reflectable);
  return el;
}

function makeAnimatedBullet(game, pos, scale, speed, lifetime, weaponName, damage, reflectable) {
  var el = game.world.bulPlasm.createStaticItem(m4.identity(), 3, 1, 0.05);
  el.weaponName = weaponName;
  el = makeGenericBullet(game, el, pos, scale, 0, 0, speed, lifetime, damage, reflectable);
  return el;
}

module.exports = {
  makeGenericBullet: makeGenericBullet,
  makeBoxBullet: makeBoxBullet,
  makeAnimatedBullet: makeAnimatedBullet
};

/***/ }),

/***/ "./src/engine/camera.new.js":
/*!**********************************!*\
  !*** ./src/engine/camera.new.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var Camera = /*#__PURE__*/function () {
  function Camera(world, keyboardState) {
    _classCallCheck(this, Camera);

    this.keyboardState = keyboardState; //this.tmat = m4.identity();

    this.dmat = m4.identity();
    this.lmat = m4.identity();
  }

  _createClass(Camera, [{
    key: "getPosVector",
    value: function getPosVector() {
      return new Vector3d(-this.posX, -this.posY, -this.posZ);
    }
  }, {
    key: "getSpeedVector",
    value: function getSpeedVector() {
      return new Vector3d(-this.vX, -this.vY, -this.vZ);
    }
  }, {
    key: "setSpeedVector",
    value: function setSpeedVector(v) {
      this.vX = -v.x;
      this.vY = -v.y;
      this.vZ = -v.z;
    }
  }, {
    key: "applySpeed",
    value: function applySpeed(spd) {
      var cam = this;
      cam.posX += spd.x;
      cam.posY += spd.y;
      cam.posZ += spd.z;
    }
  }, {
    key: "getCamNormal",
    value: function getCamNormal() {
      return getCameraNormal(this);
    }
  }, {
    key: "getNormalMatrix",
    value: function getNormalMatrix() {
      var matrix = camRotMatrix(this);
      matrix = m4.inverse(matrix);
      return matrix;
    }
  }, {
    key: "getMatrix",
    value: function getMatrix() {
      var matrix = camRotMatrix(this);
      matrix = m4.translate(matrix, this.posX, this.posY, this.posZ);
      return matrix;
    }
  }, {
    key: "getSelfModelMatrix",
    value: function getSelfModelMatrix() {
      return getCameraSelfMatrix(this);
    }
  }, {
    key: "init",
    value: function init() {
      this.camRX = 0;
      this.camRY = 0;
      this.camRZ = 0;
      this.posX = -2;
      this.posY = -2;
      this.posZ = -3;
      this.vX = 0;
      this.vY = 0;
      this.vZ = 0;
      this.roX = 0;
      this.roY = 0;
      this.crn = 0;
      this.acl = 0;
      this.moc = false;
    }
  }, {
    key: "rotateCam",
    value: function rotateCam(dx, dy) {
      var shoter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

      if (shoter) {
        this.camRX += dx / 200;
        this.camRY += dy / 200;
        this.camRZ += 0;

        if (this.camRY > 0) {
          this.camRY = 0;
        }

        if (this.camRY < -Math.PI) {
          this.camRY = -Math.PI;
        }
      } else {
        var crenSpeed = 0.0032; //this.lmat = m4.translate(this.dmat, 0,0,0);

        this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 1).toVec4(), crenSpeed * dx);
        this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 2).toVec4(), crenSpeed * dy);
      }
    }
  }, {
    key: "process",
    value: function process(deltaTime) {
      this.dt = deltaTime;
      var k = 4;

      for (var i = 0; i < 16; i++) {
        this.lmat[i] = (this.lmat[i] * (k - 1) + this.dmat[i]) / k;
      } //mobile


      if (this.moc) {
        this.rotateCam(this.roX * deltaTime, this.roY * deltaTime, false);
        this.dmat = m4.axisRotate(this.dmat, this.getCamNormal().toVec4(), this.crn * deltaTime);

        if (this.acl > 0) {
          this.keyboardState.backward = false;

          if (this.acl > 30) {
            this.acl = 30;
          }

          trueVolumeCamera(this, this.acl, deltaTime, [0, 0, 1, 0]);
        }

        if (this.acl < 0) {
          this.keyboardState.backward = true; //this.getSpeedVector().normalize().mul(-1)
          //trueVolumeCamera(this, this.acl, deltaTime, [0,0,1,0]);
        }
      } ///


      var crenSpeed = 0.62;

      if (this.keyboardState.crenleft) {
        this.dmat = m4.axisRotate(this.dmat, this.getCamNormal().toVec4(), -crenSpeed * deltaTime);
      }

      if (this.keyboardState.crenright) {
        this.dmat = m4.axisRotate(this.dmat, this.getCamNormal().toVec4(), crenSpeed * deltaTime);
      }
      /* if (this.keyboardState.left){
         this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 2).toVec4(), -crenSpeed*deltaTime);
       }
        if (this.keyboardState.right){
         this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 2).toVec4(), crenSpeed*deltaTime);
       }*/

      /* if (this.keyboardState.up){
         this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 2).toVec4(), -crenSpeed*deltaTime);
       }
        if (this.keyboardState.down){
         this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 2).toVec4(), crenSpeed*deltaTime);
       }
      */


      if (this.keyboardState.left) {
        //this.camRX -= (1 / 200);
        var moveSpeed = -0.3; //this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 1).toVec4(), moveSpeed*deltaTime);

        var matrix = m4.identity(); //m4.translate(this.tmat,0,0,0); 

        matrix = m4.axisRotate(matrix, getCameraNormal(this, 1).toVec4(), -moveSpeed * deltaTime); //m4.zRotate(matrix, moveSpeed * deltaTime);

        var spd = this.getSpeedVector().toVec4();
        var sp = m4.transformVector(matrix, spd);
        this.setSpeedVector(new Vector3d(0, 0, 0).fromList(sp, 0)); //let moveSpeed = 5;
        //trueVolumeCamera(this, moveSpeed, deltaTime, [1,0,0,0]); 
      }

      if (this.keyboardState.right) {
        //this.camRX += (1 / 200);
        var _moveSpeed = 0.3; //this.dmat = m4.axisRotate(this.dmat, getCameraNormal(this, 1).toVec4(), moveSpeed*deltaTime);

        var _matrix = m4.identity(); //m4.translate(this.tmat,0,0,0); 


        _matrix = m4.axisRotate(_matrix, getCameraNormal(this, 1).toVec4(), -_moveSpeed * deltaTime); //m4.zRotate(matrix, moveSpeed * deltaTime);

        var _spd = this.getSpeedVector().toVec4();

        var _sp = m4.transformVector(_matrix, _spd);

        this.setSpeedVector(new Vector3d(0, 0, 0).fromList(_sp, 0)); //let moveSpeed = 5;
        //trueVolumeCamera(this, moveSpeed, deltaTime, [-1,0,0,0]); 
      }

      if (this.keyboardState.forward) {
        var _moveSpeed2 = 30.3;
        trueVolumeCamera(this, _moveSpeed2, deltaTime, [0, 0, 1, 0]);
      } //let cam = glCanvas.camera;


      var cam = this; //todo SYNC it with game time!!!

      var friction = 0.992;

      if (!this.keyboardState.forward) {
        friction = 0.9995;
      }

      if (this.keyboardState.backward) {
        friction = 0.980;
      }

      if (this.getSpeedVector().abs() > 30) {
        friction = 0.930;
      }

      cam.vX *= friction;
      cam.vY *= friction;
      cam.vZ *= friction;
      cam.lastPos = cam.getPosVector();
      cam.posX += cam.vX * deltaTime;
      cam.posY += cam.vY * deltaTime;
      cam.posZ += cam.vZ * deltaTime;
    }
  }]);

  return Camera;
}();

function trueVolumeCamera(cam, moveSpeed, deltaTime, accv) {
  var nvv = accv;
  var matrix = camRotMatrix(cam);
  matrix = m4.inverse(matrix);
  nvv = m4.transformVector(matrix, nvv);
  var nv = new Vector3d(0, 0, 0).fromList(nvv, 0).mul(-1 * moveSpeed * deltaTime);
  cam.vX -= nv.x;
  cam.vY -= nv.y;
  cam.vZ -= nv.z;
  return new Vector3d(-nv.x, -nv.y, -nv.z);
}

function getCameraNormal(cam, ax) {
  var nvv = [0, 0, 1, 0];

  if (ax == 1) {
    nvv = [0, 1, 0, 0];
  }

  if (ax == 2) {
    nvv = [1, 0, 0, 0];
  }

  var matrix = camRotMatrix(cam);
  matrix = m4.inverse(matrix);
  nvv = m4.transformVector(matrix, nvv);
  var nv = new Vector3d(0, 0, 0).fromList(nvv, 0);
  return new Vector3d(nv.x, nv.y, nv.z);
}

var slowCam = true;

function getCameraSelfMatrix(cam) {
  var nvc = cam.getPosVector().addVector(cam.getCamNormal().mul(-1));
  var mmt = m4.identity(); //m4.translate(cam.tmat,0,0,0);

  mmt[12] = nvc.x;
  mmt[13] = nvc.y;
  mmt[14] = nvc.z;
  var mts;

  if (!slowCam) {
    mts = cam.getNormalMatrix();
  } else {
    mts = cam.lmat;
    mts = m4.inverse(mts);
  }

  mts = m4.xRotate(mts, Math.PI / 2); //mts = m4.yRotate(mts,Math.PI/2);

  mts = m4.multiply(mmt, mts); //mts = m4.multiply(mts, cam.dmat);

  return mts;
}

function camRotMatrix(cam) {
  var matrix = m4.identity();
  matrix = m4.xRotate(matrix, cam.camRY);
  matrix = m4.yRotate(matrix, cam.camRZ);
  matrix = m4.zRotate(matrix, cam.camRX);
  matrix = m4.multiply(matrix, cam.dmat);
  return matrix;
}

module.exports = Camera;

/***/ }),

/***/ "./src/engine/collectable.new.js":
/*!***************************************!*\
  !*** ./src/engine/collectable.new.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var Weapon = __webpack_require__(/*! ./weapon.new.js */ "./src/engine/weapon.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Message = __webpack_require__(/*! ./point-msg.new.js */ "./src/engine/point-msg.new.js");

var rand = calc.rand;

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var Collectable = /*#__PURE__*/function (_GameObject) {
  _inherits(Collectable, _GameObject);

  var _super = _createSuper(Collectable);

  function Collectable(game, startPoint, type, count) {
    var _this;

    _classCallCheck(this, Collectable);

    _this = _super.call(this);
    _this.game = game;

    if (type == 'bullets') {
      var _ob = game.world.createSolid(startPoint, 5, calc.makeNormRGBA('0f0'));

      _ob.type = 'collectable';
      _ob.bonus = 'bullets';
      _ob.bonus_count = 30; //this.game.world.objectList.addChild(this);

      return _possibleConstructorReturn(_this, _ob);
    }

    if (type == 'health') {
      var _ob2 = game.world.createSolid(startPoint, 5, calc.makeNormRGBA('f00'));

      _ob2.type = 'collectable';
      _ob2.bonus = 'health';
      _ob2.bonus_count = 25; //this.game.world.objectList.addChild(this);

      return _possibleConstructorReturn(_this, _ob2);
    } //    if (){


    var ob = game.world.createSolid(startPoint, 5, calc.makeNormRGBA('0f0'));
    ob.type = 'collectable';
    ob.bonus = '';
    ob.bonus_count = 0; //this.game.world.objectList.addChild(this);

    return _possibleConstructorReturn(_this, ob); //    }
  }

  return Collectable;
}(GameObject);

module.exports = Collectable;

/***/ }),

/***/ "./src/engine/enemy.new.js":
/*!*********************************!*\
  !*** ./src/engine/enemy.new.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

//const Basic = require('./basic.object.js');
//const rocketModel = require('./rocket.model.js');
//const boxModel = require('./rocket.model.js');
var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var Weapon = __webpack_require__(/*! ./weapon.new.js */ "./src/engine/weapon.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Message = __webpack_require__(/*! ./point-msg.new.js */ "./src/engine/point-msg.new.js");

var rand = calc.rand;

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var Enemy = /*#__PURE__*/function (_GameObject) {
  _inherits(Enemy, _GameObject);

  var _super = _createSuper(Enemy);

  function Enemy(gl, game, startPoint, speedVector, modelList, extLogic) {
    var _this;

    _classCallCheck(this, Enemy);

    _this = _super.call(this);
    _this.MAX_SPEED = 55;
    _this.ACCELARATION = 5;
    _this.FRICTION = 0.999;
    _this.TORQUE = 0.03;
    _this.RADIAL_FRICTION = 0.93;
    _this.THETA_VAL = 52;
    _this.extLogic = extLogic;
    _this.gl = gl;
    _this.game = game;
    _this.pos = startPoint;
    _this.v = speedVector;
    _this.weapon = new Weapon(game.world, 0.75, 1.2, 200.41);
    _this.nv = new Vector3d(0, 0, 1);
    _this.aziV = new Vector3d(0, 0, 0);
    _this.azi = new Vector3d(0, 0, 0);
    var mtx = m4.identity();
    mtx = m4.translate(mtx, _this.pos.x, _this.pos.y, _this.pos.z); ///as gameobject

    var msg = new Message(game.glCanvas, '', 'f99', new Vector3d(0, 0, 0));

    msg.onProcess = function () {
      msg.vector = _this.pos;
      msg.text = 'enemy ' + Math.round(game.player.camera.getPosVector().subVector(msg.vector).abs() * 10) / 10 + 'km';
    };

    game.messageList.addChild(msg);
    _this.msg = msg; //this.model = this.game.world.tieModelList.createStaticItem(mtx);

    if (modelList) {
      _this.model = modelList.createStaticItem(mtx);
    } else {
      _this.model = _this.game.world.shipLists[calc.rand(_this.game.world.shipLists.length)].createStaticItem(mtx);
    }

    var hitbox = _this.game.world.createBreakable(_this.pos, 2);

    hitbox.type = 'object';
    hitbox.visible = false;
    hitbox.scale = 2;
    hitbox.pos = _this.pos;

    hitbox.onHit = function (bullet) {
      console.log('killed');

      _this.hitbox.deleteSelf();

      _this.model.deleteSelf();

      bullet.deleteSelf();

      _this.msg.deleteSelf();

      _this.deleteSelf();

      _this.game.world.createExplosion(_this.hitbox.pos, 30);

      var vol = 130 / _this.hitbox.pos.subVector(_this.game.player.camera.getPosVector()).abs();

      window.sndBase.playByClass('explosion', vol); //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/expl1.mp3', vol) : anyutils.playSoundUrl('assets/sounds/expl2.mp3', vol);

      if (_this.onKilled) {
        _this.onKilled();
      }
    };

    _this.onProcess = function (deltaTime) {
      hitbox.matrix = _this.model.matrix;
      hitbox.matrix = m4.scale(hitbox.matrix, hitbox.scale, hitbox.scale, hitbox.scale);
      hitbox.hitTransformed = hitbox.meshPointer.getTransformedVertexList(hitbox.matrix);
      hitbox.hitPosition = calc.getPosFromMatrix(hitbox.matrix);
      hitbox.hitDist = hitbox.meshPointer.maxDistance * hitbox.scale;
      ; //;

      _this.speedVectorSync = _this.v;

      _this.render_(deltaTime);
    };

    _this.onReact = function (ob) {
      //if (!(el && el.speedVectorSync)){ return;}
      if (ob.type == 'solid') {
        if (calc.isCrossedSimple(ob.hitPosition, _this.pos, _this.speedVectorSync, ob.hitDist)) {
          var reflected = calc.mirrorVectorFromMesh(ob.hitTransformed, _this.pos, _this.speedVectorSync);

          if (reflected) {
            _this.v = reflected.normalize().mul(_this.pos.abs());
          }

          ;
        }

        ;
      }
    };

    _this.hitbox = hitbox;

    _this.game.world.objectList.addChild(_assertThisInitialized(_this)); /////////


    _this.atack = true; // this.time = 1.2;

    return _this;
  } // onDelete(){
  //   this.model.deleteBuffers();
  // }


  _createClass(Enemy, [{
    key: "render_",
    value: function render_(deltaTime) {
      if (this.extLogic) {
        this.extLogic(this);
      } else {
        this.logic(this.game.player.camera.getPosVector(), this.game.player.camera.getSpeedVector(), deltaTime);
      }

      this.weapon.render(deltaTime);
      this.pos.addVector(this.v.mul(deltaTime), true);
      this.model.matrix = polarToMatrix(this.pos, this.azi.x, this.azi.y);
      this.model.matrix = m4.scale(this.model.matrix, 1.5, 1.5, 1.5);
      this.nv = toDecart(this.azi);
    }
  }, {
    key: "shot",
    value: function shot() {
      var startPoint = this.pos.addVector(this.nv.mul(-3));
      var targetPoint = this.nv.mul(-1).addVector(this.v.mul(1 / this.weapon.bulletSpeed));
      this.weapon.shot(startPoint, targetPoint, this.game.player.camera.getPosVector()); ////
    }
  }, {
    key: "accelerate",
    value: function accelerate(deltaTime) {
      this.v.subVector(this.nv.normalize().mul(deltaTime * this.ACCELARATION), true);

      if (this.v.abs() > this.MAX_SPEED) {
        this.v = this.v.normalize().mul(this.MAX_SPEED);
      }
    }
  }, {
    key: "directTo",
    value: function directTo(dir, deltaTime) {
      var orta = toPolar3d(dir);
      var az = azimutDifference(orta.x, this.azi.x);
      az = az > 0 ? 1 : -1;

      if (Math.abs(this.aziV.x) < 0.2) {
        this.aziV.x = this.aziV.x + az * this.TORQUE * deltaTime;
      }

      this.azi.x += this.aziV.x; //this.torq.mul(0.059).addVector(orta);

      this.aziV.x *= this.RADIAL_FRICTION;
      var kk = this.THETA_VAL; //1/(this.TORQUE * deltaTime);

      this.azi.y = (this.azi.y * kk + orta.y) / (kk + 1);

      if (this.azi.y > Math.PI - 0.01) {
        this.azi.y = Math.PI - 0.01;
      }

      ;

      if (this.azi.y < 0.01) {
        this.azi.y = 0.01;
      }

      ;
    }
    /*shotMovingTarget(targetPos, targetSpeed){
      let dist = this.pos.subVector(targetPos).abs();
      let time = dist/this.weapon.bulletSpeed;
      let dir = this.pos.subVector(targetPos.addVector(targetSpeed.subVector(this.v.mul(1)).mul(time))).normalize();
      if (Math.abs(getAngleBetweenVectors(dir, this.nv))<Math.random()*0.61){
        if (Math.random()<0.3) {this.shot();}
      }
    }*/

  }, {
    key: "logic",
    value: function logic(playerPosition, playerSpeed, deltaTime) {
      var dir;

      if (this.atack) {
        if (this.pos.subVector(playerPosition).abs() > 30) {
          var dist = this.pos.subVector(playerPosition).abs();
          var time = dist / this.weapon.bulletSpeed; // dir = this.pos.subVector(playerPosition).normalize();

          dir = this.pos.subVector(playerPosition.addVector(playerSpeed.subVector(this.v.mul(1)).mul(time))).normalize();

          if (Math.abs(getAngleBetweenVectors(dir, this.nv)) < Math.random() * 0.61) {
            if (dist < 300) {
              if (Math.random() < 0.3) {
                this.shot();
              }
            }
          } //this.shotMovingTarget(playerPosition, playerSpeed);
          //this.weapon.shot(this.gl, app.glCanvas.scene.bullets, this.pos.addVector(this.nv.mul(-3)), 
          //this.nv.mul(-1).addVector(this.v.mul(1/this.weapon.bulletSpeed))
          //);
          ///this.nv.mul(-1) without speed;

        } else {
          dir = this.pos.subVector(playerPosition).mul(-1).normalize();
          this.atack = false;
        }
      } else {
        if (this.pos.subVector(playerPosition).abs() > calc.rand(90) + 50) {
          dir = this.pos.subVector(playerPosition).normalize();
          this.atack = true;
        } else {
          dir = this.pos.subVector(playerPosition).mul(-1);
          dir.x = dir.x + Math.random() * 10 - 5;
          dir.y = dir.y + Math.random() * 10 - 5;
          dir.z = dir.z + Math.random() * 10 - 5;
          dir = dir.normalize();
        }
      } /////////this.hitPoint.matrix = this.model.matrix;


      this.directTo(dir, deltaTime);

      if (Math.abs(getAngleBetweenVectors(dir, this.nv)) < Math.PI / 2) {
        this.accelerate(deltaTime);
      }

      this.v.mul(this.FRICTION, true);
    }
  }]);

  return Enemy;
}(GameObject);

function polarToMatrix(point, azimuth, theta) {
  var mt = m4.identity();
  mt = m4.translate(mt, point.x, point.y, point.z);
  mt = m4.zRotate(mt, azimuth + Math.PI / 2);
  mt = m4.xRotate(mt, theta + Math.PI / 2);
  mt = m4.yRotate(mt, Math.PI);
  return mt;
}

function azimutDifference(a, b) {
  var da = a - b;
  var daOver = a - b + Math.PI * 2;

  if (Math.abs(da) < Math.abs(daOver)) {
    return da;
  } else {
    return daOver;
  }
}

function getAngleBetweenVectors(a, b) {
  return Math.acos(a.dot(b) / (a.abs() * b.abs()));
}

function toPolar3d(v) {
  if (!v) {
    v = new Vector3d(0, 0, 1);
  }

  return new Vector3d(Math.atan2(v.y, v.x), Math.acos(v.z / v.abs()), 0);
}

function toDecart(azi) {
  return new Vector3d(Math.sin(azi.y) * Math.cos(azi.x), Math.sin(azi.y) * Math.sin(azi.x), Math.cos(azi.y));
}

module.exports = Enemy;

/***/ }),

/***/ "./src/engine/game-object.new.js":
/*!***************************************!*\
  !*** ./src/engine/game-object.new.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GameObject = /*#__PURE__*/function () {
  function GameObject() {
    var _this = this;

    _classCallCheck(this, GameObject);

    this.childList = [];
    this.isExists = true;
    this.reqFilter = false;
    this.onProcess;
    this.onRender;
    this.onReact;
    this.parents = [];

    this.onDelete = function () {
      if (_this.mesh) {
        _this.mesh.deleteBuffers();

        console.log('delbuffers');
      }

      if (_this.texture) {
        app.glCanvas.glContext.deleteTexture(_this.texture);
        console.log('deltex');
      }
    };
  }

  _createClass(GameObject, [{
    key: "render",
    value: function render(gl, props) {
      if (this.onRender) {
        this.onRender(gl, props);
      }

      if (this.reqFilter) {
        this.childList = this.childList.filter(function (it) {
          return it.isExists;
        });
        this.reqFilter = false;
      }

      this.childList.forEach(function (it) {
        it.render(gl, props);
      });
    }
  }, {
    key: "process",
    value: function process(deltaTime, props) {
      if (this.onProcess) {
        this.onProcess(deltaTime, props);
      }

      if (this.reqFilter) {
        this.childList = this.childList.filter(function (it) {
          return it.isExists;
        });
        this.reqFilter = false;
      }

      this.childList.forEach(function (it) {
        it.process(deltaTime, props);
      });
    }
  }, {
    key: "tryFilter",
    value: function tryFilter() {
      if (this.reqFilter) {
        this.childList = this.childList.filter(function (it) {
          return it.isExists;
        });
        this.reqFilter = false;
      }
    }
  }, {
    key: "react",
    value: function react(gameObject) {
      var _this2 = this;

      if (gameObject.isExists && this.isExists) {
        if (this.onReact) {
          this.onReact(gameObject);
          gameObject.childList.forEach(function (it) {
            if (it.isExists && _this2.isExists) {
              _this2.onReact(it);
            }
          });
        }

        this.childList.forEach(function (it) {
          it.react(gameObject);
        });
      }
    }
  }, {
    key: "addChild",
    value: function addChild(gameObject) {
      gameObject.parents.push(this);
      this.childList.push(gameObject);
      return gameObject;
    }
  }, {
    key: "deleteSelf",
    value: function deleteSelf() {
      if (this.parents.length) {
        this.isExists = false; //console.log('delet', this.parents[0]);

        this.parents.forEach(function (it) {
          it.reqFilter = true;
        });

        if (this.onDelete) {
          this.onDelete();
        }
      }
    }
  }, {
    key: "deleteAllChild",
    value: function deleteAllChild() {
      this.childList.forEach(function (it) {
        it.deleteSelf();
      });
    }
  }, {
    key: "clear",
    value: function clear() {
      if (this.mesh) {
        this.mesh.deleteBuffers();
        console.log('delbuffers');
      }

      if (this.texture) {
        app.glCanvas.glContext.deleteTexture(this.texture);
        console.log('deltex');
      }

      if (this.shaderProgram) {
        //app.glCanvas.glContext.deleteProgram(this.shaderProgram);
        console.log('delshader');
      }

      this.childList.forEach(function (it) {
        it.clear();
      }); // this.tryFilter();
    }
    /* clear(){
       this.childList.forEach(it=>{
         it.clear();
       });  
     }*/

  }]);

  return GameObject;
}();

module.exports = GameObject;

/***/ }),

/***/ "./src/engine/game.new.js":
/*!********************************!*\
  !*** ./src/engine/game.new.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var World = __webpack_require__(/*! ./world.new.js */ "./src/engine/world.new.js");

var Player = __webpack_require__(/*! ./player.new.js */ "./src/engine/player.new.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ./enemy.new.js */ "./src/engine/enemy.new.js");

var Message = __webpack_require__(/*! ./point-msg.new.js */ "./src/engine/point-msg.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Timer = __webpack_require__(/*! ./timer.new.js */ "./src/engine/timer.new.js");

var Collectable = __webpack_require__(/*! ./collectable.new.js */ "./src/engine/collectable.new.js"); //require('./collectable.new.js');


var TargetList = __webpack_require__(/*! ./mission-target.new.js */ "./src/engine/mission-target.new.js");

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var utils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ./basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var missionLabirint = __webpack_require__(/*! ./missions/labirint.mission.js */ "./src/engine/missions/labirint.mission.js");

var missionGarage = __webpack_require__(/*! ./missions/garage.mission.js */ "./src/engine/missions/garage.mission.js");

var mission1 = __webpack_require__(/*! ./missions/mission1.mission.js */ "./src/engine/missions/mission1.mission.js");

var mission2 = __webpack_require__(/*! ./missions/mission2.mission.js */ "./src/engine/missions/mission2.mission.js");

var mission3 = __webpack_require__(/*! ./missions/mission3.mission.js */ "./src/engine/missions/mission3.mission.js");

var mission4 = __webpack_require__(/*! ./missions/mission4.mission.js */ "./src/engine/missions/mission4.mission.js");

var Game = /*#__PURE__*/function () {
  function Game(gl, glCanvas) {
    _classCallCheck(this, Game);

    this.gl = gl;
    this.glCanvas = glCanvas;
    console.log('restarting game');
    this.props = {
      shipIndex: 0
    };

    if (!this.world) {
      this.world = new World(gl, this);
    }

    this.player = new Player(gl, this, glCanvas.keyboardState);
    this.timers = new GameObject();
    this.messageList = new GameObject();
    this.targets = new TargetList(this);
    /* document.addEventListener('beforeunload', ()=>{
       this.clear();
     })*/
  }

  _createClass(Game, [{
    key: "render",
    value: function render(aspect, deltaTime) {
      this.player.render_(deltaTime); //this.targets.render(deltaTime);

      var camera = this.player.camera;
      var viewMatrix = calc.makeCameraMatrix(aspect, camera.getMatrix()); //camera.camRX, camera.camRY, camera.camRZ, camera.posX, camera.posY, camera.posZ);

      this.world.render(viewMatrix, deltaTime); //this.message.refresh(viewMatrix, new Vector3d(0,0,0), 'Kill_It '+Math.round(this.player.camera.getPosVector().subVector(new Vector3d(0,0,0)).abs()*10)/10+ 'km');

      this.messageList.process(deltaTime);
      this.timers.process(deltaTime);
      this.messageList.render(this.gl, {
        viewMatrix: viewMatrix
      }); //this.player.render_(deltaTime);
    }
  }, {
    key: "addTimer",
    value: function addTimer(interval, onTimeout) {
      var tm = new Timer(interval, onTimeout);
      this.timers.addChild(tm);
      return tm;
    }
  }, {
    key: "addLabel",
    value: function addLabel(text, vector) {
      var _this = this;

      var msg = new Message(this.glCanvas, '', 'f4f', vector);

      msg.onProcess = function () {
        var dist = _this.getPlayerPos().subVector(msg.vector).abs() * 10;
        msg.text = text + ': ' + Math.round(dist) / 10 + 'km';
      };

      this.messageList.addChild(msg);
      return msg;
    }
  }, {
    key: "getPlayerPos",
    value: function getPlayerPos() {
      return this.player.camera.getPosVector();
    }
  }, {
    key: "clear",
    value: function clear() {
      // this.glCanvas.stop();
      //this.world.clear();
      this.world.graphicList.childList.forEach(function (it) {
        it.childList.forEach(function (jt) {
          jt.deleteAllChild();
        });
      });
      this.world.createSkybox();
      this.player = new Player(this.gl, this, this.glCanvas.keyboardState);
      this.player.camera.init();
      this.timers.clear();
      this.messageList.clear();
      this.targets.clear();
      this.targets.refresh(); //this.world = new World(this.gl, this);  
      // this.glCanvas.start();
    }
  }, {
    key: "loadMission",
    value: function loadMission(name, props) {
      this.clear();
      this.props = props;
      this.player.model.visible = true;

      if (name == '1') {
        missionLabirint(this); // mission3(this);
      }

      if (name == '2') {
        mission4(this);
      }

      if (name == '3') {
        mission2(this);
      }

      if (name == '4') {
        mission1(this);
      }

      if (name == '5') {
        mission3(this);
      }

      if (name == 'garage') {
        missionGarage(this);
      }
    }
  }, {
    key: "finish",
    value: function finish(win) {
      this.glCanvas.keyboardState.shot = false;
      this.glCanvas.menu.activate();

      if (win) {
        this.glCanvas.menu.menu.selectPage(this.glCanvas.menu.gameOverMenu);
      } else {
        this.glCanvas.menu.menu.selectPage(this.glCanvas.menu.gameOverMenu);
      }

      document.exitPointerLock();
    }
  }]);

  return Game;
}();
/*
function missionLabirint(game){
  let len = 10;
  /*let spline = [
    {cp:new Vector3d(0,100,0), orot:0, cur:0}, 
    {cp:new Vector3d(0,200,0), orot:0, cur:0},
    {cp:new Vector3d(0,300,0), orot:0, cur:0}, 
    {cp:new Vector3d(0,400,0), orot:1, cur:-Math.PI+0*Math.PI/2 },
    {cp:new Vector3d(-100,400,0), orot:0, cur:-Math.PI/2}, 
    {cp:new Vector3d(-200,400,0), orot:0, cur:-Math.PI/2},  
    {cp:new Vector3d(-300,400,0), orot:1, cur:-Math.PI-Math.PI/2-1*Math.PI/2 },
    {cp:new Vector3d(-300,500,0), orot:0, cur:0}, 
    {cp:new Vector3d(-300,600,0), orot:0, cur:0}, 
  ];*/

/*let spline = [
  {cp:new Vector3d(0,100,0), orot:1, cur:0},
  {cp:new Vector3d(100,100,0), orot:0, cur:Math.PI/2},
  {cp:new Vector3d(200,100,0), orot:-1, cur:0}  
];

spline.forEach(it=>{
  if (it.orot){
    block = basics.makePhysicalAzi(game.world, it.cp, 10, it.cur -(it.orot<0)*Math.PI/2, Math.PI/2, game.world.tun2); 
  } else {
    block = basics.makePhysicalAzi(game.world, it.cp, 10, it.cur, Math.PI/2, game.world.tun1); 
  }
});*/

/*  let spline = makeLineSpline(len, new Vector3d (0, 0, -200), -200);
  recLabi(game, spline , 0, []);
}

function makeLineSpline(cnt, startVector, step){
  let res =[];
  let cp = startVector;
  let rot = 0;
  let cr = 0;
  let stepVector = new Vector3d(0,step,0);
  let seq = [0,2,2,1,2,0,1,1,2,0,0,2,0,0];
  let cont =seq.length;
  let orot =0;
  for (let i=0; i<cont; i++){
    res.push({cp, orot, cur:cr*Math.PI/2});
    rt = seq[i]//calc.rand(6);
    if (rt==1){
      cr = cr-1;
      if (cr<0){cr=3}
      orot=1;
    }
    if (rt==2){
      cr = cr+1;
      if (cr>3){cr=0}
      orot=-1;
    }
    if (rt!=1 && rt!=2){
      orot =0;
    }
    cp=cp.addVector(stepVector);
    
    if (cr==0){stepVector = new Vector3d(0,step,0); }
    if (cr==1){stepVector = new Vector3d(step,0,0); }
    if (cr==2){stepVector = new Vector3d(0,-step,0); }
    if (cr==3){stepVector = new Vector3d(-step,0,0); }
    
    
  }
  return res;
};

function recLabi(game, rou, i, blocks){
  console.log('recpoint '+i);
  if (rou[i]){
    
    let block;
    let ci = i;
    if (rou[i].orot){
      if (rou[i].orot==1){
      block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, -rou[i].cur - +(rou[i].orot<0)*Math.PI/2, Math.PI/2, game.world.tun2); 
      }
      if (rou[i].orot==-1){
      block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, -rou[i].cur - +(rou[i].orot<0)*Math.PI/2, Math.PI/2, game.world.tun2); 
      }

    } else {
      block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, rou[i].cur, Math.PI/2, game.world.tun1); 
    }
    block.onContact = (player)=>{
      player.damage(0, 1);
    };
    blocks.push(block);

    /*if (blocks.length<3){
      recLabi(game,rou, i+1, blocks);
      return;  
    }*/

/*    let tg = game.addLabel('target', rou[i].cp);
    let ele = game.world.createMagic(rou[i].cp, 190, false);
    let el = basics.makeCollactable(game.world, rou[i].cp, 100, game.world.boxModelList, (player)=>{
      //if (ci-i>3){
      if(blocks.length>=3){
        blocks[0].deleteSelf();
        blocks.shift();
      }
      //}
      ele.deleteSelf();
      if (!rou[i+1]){
        anyutils.playSoundUrl('assets/sounds/success.mp3');
        game.finish(true);
      }
      console.log('collected');
      tg.deleteSelf();
      anyutils.playSoundUrl('assets/sounds/correct.mp3');
      recLabi(game,rou, i+1, blocks);
    }); 
    el.visible=false; 
    
  }
 /* if (blocks.length<3){
    recLabi(game,rou, i+1, blocks);
    return;  
  }*/
//}


module.exports = Game;

/***/ }),

/***/ "./src/engine/mission-target.new.js":
/*!******************************************!*\
  !*** ./src/engine/mission-target.new.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

//const Control = require('../control-js/control.component.js');
var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Target = /*#__PURE__*/function (_GameObject) {
  _inherits(Target, _GameObject);

  var _super = _createSuper(Target);

  function Target(game, text) {
    var _this;

    _classCallCheck(this, Target);

    _this = _super.call(this);
    _this.text = text;
    _this.status = 'pending';
    _this.onChange;
    return _this;
  }

  _createClass(Target, [{
    key: "setFail",
    value: function setFail() {
      this.status = 'failed';

      if (this.onChange) {
        this.onChange(this.status);
      }
    }
  }, {
    key: "setComplete",
    value: function setComplete() {
      this.status = 'completed';

      if (this.onChange) {
        this.onChange(this.status);
      }
    }
  }]);

  return Target;
}(GameObject);

var TargetList = /*#__PURE__*/function (_GameObject2) {
  _inherits(TargetList, _GameObject2);

  var _super2 = _createSuper(TargetList);

  function TargetList(game) {
    var _this2;

    _classCallCheck(this, TargetList);

    _this2 = _super2.call(this);
    _this2.game = game;

    _this2.onChange = function () {
      _this2.refresh();
    };

    return _this2;
  }

  _createClass(TargetList, [{
    key: "addTarget",
    value: function addTarget(text) {
      var _this3 = this;

      var target = new Target(this.game, text);

      target.onChange = function (status) {
        if (status == 'completed') {}

        if (status == 'failed') {}

        _this3.refresh();
      };

      this.addChild(target);
      this.refresh();
      return target;
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var msg = '';
      this.childList.forEach(function (it) {
        msg += '<div>' + it.text + ' ' + it.status + '</div>';
      });
      this.game.glCanvas.gamePanel.missionTarget.node.innerHTML = msg;
    }
  }, {
    key: "checkAll",
    value: function checkAll() {
      var res = true;

      for (var i = 0; i < this.childList.lenght; i++) {
        if (this.childList[i].status != 'completed') {
          return false;
        }
      }

      if (this.onCompletedAll) {
        this.onCompletedAll();
      }

      return res;
    }
  }]);

  return TargetList;
}(GameObject);

module.exports = TargetList;

/***/ }),

/***/ "./src/engine/missions/garage.mission.js":
/*!***********************************************!*\
  !*** ./src/engine/missions/garage.mission.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

function missionGarage(game) {
  game.player.camera.posY = 0;
  game.player.camera.posX = 0;
  game.player.camera.posZ = -5;
  var cx = 0;
  var cy = 0;
  var ks = 0.01;
  var autoRot = true;

  game.glCanvas.menu.touchPad.onChange = function (dx_, dy_, cx_, cy_) {
    cx = cx_ * ks;
    cy = cy_ * ks;
    autoRot = false;
  };

  var currentIndex = game.glCanvas.menu.missionOptions.shipIndex || 0;

  game.glCanvas.menu.prevShip.click = function () {
    currentIndex -= 1;

    if (currentIndex < 0) {
      currentIndex = game.world.shipLists.length - 1;
    }

    game.glCanvas.menu.missionOptions.shipIndex = currentIndex;
    autoRot = true;
  };

  game.glCanvas.menu.nextShip.click = function () {
    currentIndex += 1;

    if (currentIndex > game.world.shipLists.length - 1) {
      currentIndex = 0;
    }

    game.glCanvas.menu.missionOptions.shipIndex = currentIndex;
    autoRot = true;
  };

  var _loop = function _loop(i) {
    var model = game.world.shipLists[i].createStaticItem(calc.matrixFromPos(new Vector3d(0, 0, 0), 1, 0, 0));
    game.player.model.visible = false;
    model.menuIndex = i;

    model.onProcess = function (deltaTime) {
      //TODO use axis rotation
      if (autoRot == true) {
        cx = 0.1;
        cy = 0.63;
      }

      if (model.menuIndex != currentIndex) {
        model.visible = false;
      } else {
        model.visible = true;
        model.matrix = m4.zRotate(model.matrix, cx * deltaTime);
        model.matrix = m4.xRotate(model.matrix, cy * deltaTime);
      }
    };
  };

  for (var i = 0; i < game.world.shipLists.length; i++) {
    _loop(i);
  }
}

module.exports = missionGarage;

/***/ }),

/***/ "./src/engine/missions/labirint.mission.js":
/*!*************************************************!*\
  !*** ./src/engine/missions/labirint.mission.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

function missionLabirint(game) {
  var len = 10;
  /*let spline = [
    {cp:new Vector3d(0,100,0), orot:0, cur:0}, 
    {cp:new Vector3d(0,200,0), orot:0, cur:0},
    {cp:new Vector3d(0,300,0), orot:0, cur:0}, 
    {cp:new Vector3d(0,400,0), orot:1, cur:-Math.PI+0*Math.PI/2 },
    {cp:new Vector3d(-100,400,0), orot:0, cur:-Math.PI/2}, 
    {cp:new Vector3d(-200,400,0), orot:0, cur:-Math.PI/2},  
    {cp:new Vector3d(-300,400,0), orot:1, cur:-Math.PI-Math.PI/2-1*Math.PI/2 },
    {cp:new Vector3d(-300,500,0), orot:0, cur:0}, 
    {cp:new Vector3d(-300,600,0), orot:0, cur:0}, 
  ];*/

  /*let spline = [
    {cp:new Vector3d(0,100,0), orot:1, cur:0},
    {cp:new Vector3d(100,100,0), orot:0, cur:Math.PI/2},
    {cp:new Vector3d(200,100,0), orot:-1, cur:0}  
  ];
  
  spline.forEach(it=>{
    if (it.orot){
      block = basics.makePhysicalAzi(game.world, it.cp, 10, it.cur -(it.orot<0)*Math.PI/2, Math.PI/2, game.world.tun2); 
    } else {
      block = basics.makePhysicalAzi(game.world, it.cp, 10, it.cur, Math.PI/2, game.world.tun1); 
    }
  });*/

  var spline = makeLineSpline(len, new Vector3d(0, 0, -200), -200);
  recLabi(game, spline, 0, []);
}

function makeLineSpline(cnt, startVector, step) {
  var res = [];
  var cp = startVector;
  var rot = 0;
  var cr = 0;
  var stepVector = new Vector3d(0, step, 0);
  var seq = [0, 2, 2, 1, 2, 0, 1, 1, 2, 0, 0, 2, 0, 0];
  var cont = seq.length;
  var orot = 0;

  for (var i = 0; i < cont; i++) {
    res.push({
      cp: cp,
      orot: orot,
      cur: cr * Math.PI / 2
    });
    rt = seq[i]; //calc.rand(6);

    if (rt == 1) {
      cr = cr - 1;

      if (cr < 0) {
        cr = 3;
      }

      orot = 1;
    }

    if (rt == 2) {
      cr = cr + 1;

      if (cr > 3) {
        cr = 0;
      }

      orot = -1;
    }

    if (rt != 1 && rt != 2) {
      orot = 0;
    }

    cp = cp.addVector(stepVector);

    if (cr == 0) {
      stepVector = new Vector3d(0, step, 0);
    }

    if (cr == 1) {
      stepVector = new Vector3d(step, 0, 0);
    }

    if (cr == 2) {
      stepVector = new Vector3d(0, -step, 0);
    }

    if (cr == 3) {
      stepVector = new Vector3d(-step, 0, 0);
    }
  }

  return res;
}

;

function recLabi(game, rou, i, blocks) {
  console.log('recpoint ' + i);

  if (rou[i]) {
    var block;
    var ci = i;

    if (rou[i].orot) {
      if (rou[i].orot == 1) {
        block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, -rou[i].cur - +(rou[i].orot < 0) * Math.PI / 2, Math.PI / 2, game.world.tun2);
      }

      if (rou[i].orot == -1) {
        block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, -rou[i].cur - +(rou[i].orot < 0) * Math.PI / 2, Math.PI / 2, game.world.tun2);
      }
    } else {
      block = basics.makePhysicalAzi(game.world, rou[i].cp, 20, rou[i].cur, Math.PI / 2, game.world.tun1);
    }

    block.onContact = function (player) {
      player.damage(0, 1);
    };

    blocks.push(block);
    /*if (blocks.length<3){
      recLabi(game,rou, i+1, blocks);
      return;  
    }*/

    var tg = game.addLabel('target', rou[i].cp);
    var ele = game.world.createMagic(rou[i].cp, 190, false);
    var el = basics.makeCollactable(game.world, rou[i].cp, 100, game.world.boxModelList, function (player) {
      //if (ci-i>3){
      if (blocks.length >= 3) {
        blocks[0].deleteSelf();
        blocks.shift();
      } //}


      ele.deleteSelf();

      if (!rou[i + 1]) {
        anyutils.playSoundUrl('assets/sounds/success.mp3');
        game.finish(true);
      }

      console.log('collected');
      tg.deleteSelf();
      anyutils.playSoundUrl('assets/sounds/correct.mp3');
      recLabi(game, rou, i + 1, blocks);
    });
    el.visible = false;
  }
  /* if (blocks.length<3){
     recLabi(game,rou, i+1, blocks);
     return;  
   }*/

}

module.exports = missionLabirint;

/***/ }),

/***/ "./src/engine/missions/mission.utils.js":
/*!**********************************************!*\
  !*** ./src/engine/missions/mission.utils.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ../enemy.new.js */ "./src/engine/enemy.new.js");

function starChunk(game, center, size, count) {
  for (var i = 0; i < count; i++) {
    var a = new Vector3d(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5); // a = a.normalize();

    a = a.mul(size).addVector(center);
    var mt = m4.identity();
    mt = m4.translate(mt, a.x, a.y, a.z);
    mt = m4.xRotate(mt, Math.random() * Math.PI * 2);
    mt = m4.yRotate(mt, Math.random() * Math.PI);
    game.world.chunkList.createStaticItem(mt, {
      r: Math.random(),
      g: Math.random(),
      b: 0.5
    }, 1000); //del magic num
  }
}

function randVector(center, size) {
  var a = new Vector3d(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5);
  a = a.mul(size).addVector(center);
  return a;
}

module.exports = {
  starChunk: starChunk,
  randVector: randVector
};

/***/ }),

/***/ "./src/engine/missions/mission1.mission.js":
/*!*************************************************!*\
  !*** ./src/engine/missions/mission1.mission.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ../enemy.new.js */ "./src/engine/enemy.new.js");

var Collectable = __webpack_require__(/*! ../collectable.new.js */ "./src/engine/collectable.new.js");

var mUtils = __webpack_require__(/*! ./mission.utils.js */ "./src/engine/missions/mission.utils.js");

var randVector = mUtils.randVector;
var starChunk = mUtils.starChunk;

function mission1(game) {
  var baseSpawner = game.addTimer(15, function () {
    new Collectable(game, new Vector3d(rand(100) - 50, rand(100) - 50, rand(100) - 50), Math.random() < 0.5 ? 'bullets' : 'health');
  }); //for (let i=0; i<10; i++){new Enemy(game.gl, game, randVector(enBasePos, 500), new Vector3d(0,0,0));}

  var solidsPos = new Vector3d(1000, 0, 0);

  for (var i = 0; i < 160; i++) {
    game.world.createSolid(randVector(solidsPos, 500), rand(60) + 10, {
      r: Math.random(),
      g: Math.random(),
      b: 0.5
    });
  }

  for (var _i = 0; _i < 1; _i++) {
    var big = game.world.createSolid(randVector(new Vector3d(500, 0, 0), 500), 1, {
      r: Math.random(),
      g: Math.random(),
      b: 0.5
    }, 'bigModel');
  } //big.matrix = m4.xRotate(big.matrix, Math.PI/2);


  starChunk(game, new Vector3d(0, 0, 0), 500, 200);
  var baseLabel = game.addLabel('StartPoint', new Vector3d(0, 0, 0));
  var enBasePos = new Vector3d(2000, 0, 0);
  starChunk(game, enBasePos, 500, 200);
  game.addLabel('target', enBasePos);
}

module.exports = mission1;

/***/ }),

/***/ "./src/engine/missions/mission2.mission.js":
/*!*************************************************!*\
  !*** ./src/engine/missions/mission2.mission.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ../enemy.new.js */ "./src/engine/enemy.new.js");

var Collectable = __webpack_require__(/*! ../collectable.new.js */ "./src/engine/collectable.new.js");

var mUtils = __webpack_require__(/*! ./mission.utils.js */ "./src/engine/missions/mission.utils.js");

var randVector = mUtils.randVector;
var starChunk = mUtils.starChunk;

function mission2(game) {
  var baseSpawner = game.addTimer(15, function () {
    new Collectable(game, new Vector3d(rand(100) - 50, rand(100) - 50, rand(100) - 50), Math.random() < 0.5 ? 'bullets' : 'health');
  });
  var baseLabel = game.addLabel('StartPoint', new Vector3d(0, 0, 0));
  var enBasePos = new Vector3d(2000, 0, 0);

  var _loop = function _loop(i) {
    var en = new Enemy(game.gl, game, randVector(enBasePos, 500), new Vector3d(0, 0, 0));
    var target = game.targets.addTarget('kill enemy ' + i);
    en.targetPointer = target;

    en.onKilled = function () {
      en.targetPointer.setComplete();
    };
  };

  for (var i = 0; i < 10; i++) {
    _loop(i);
  }

  game.targets.onChange();
  var solidsPos = new Vector3d(1500, 0, 0);

  for (var _i = 0; _i < 120; _i++) {
    game.world.createSolid(randVector(solidsPos, 1500), (rand(60) + 10) / 500, {
      r: Math.random(),
      g: Math.random(),
      b: 0.5
    }, 'bigModel');
  }

  for (var _i2 = 0; _i2 < 1; _i2++) {
    var big = game.world.createSolid(randVector(new Vector3d(500, 500, 0), 500), 1, {
      r: Math.random(),
      g: Math.random(),
      b: 0.5
    }, 'bigModel');
  } //big.matrix = m4.xRotate(big.matrix, Math.PI/2);


  starChunk(game, new Vector3d(0, 0, 0), 500, 100);
  starChunk(game, enBasePos, 500, 100);
  game.addLabel('target', enBasePos);
}

module.exports = mission2;

/***/ }),

/***/ "./src/engine/missions/mission3.mission.js":
/*!*************************************************!*\
  !*** ./src/engine/missions/mission3.mission.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ../enemy.new.js */ "./src/engine/enemy.new.js");

var mUtils = __webpack_require__(/*! ./mission.utils.js */ "./src/engine/missions/mission.utils.js");

var randVector = mUtils.randVector;
var starChunk = mUtils.starChunk;

function mission3(game) {
  var rou = makeRingSpline(1000);
  game.player.camera.posY = -1050;
  game.player.camera.posX = 0;
  game.player.camera.posZ = 0;
  basics.makePhysicalAzi(game.world, new Vector3d(0, 1050, 100), 10, Math.PI / 2, Math.PI / 2, game.world.bigModelList); //basics.makePhysical(game.world, new Vector3d(0, 1050, 100), 10, game.world.bigModelList);

  basics.makePhysical(game.world, new Vector3d(0, 0, -1000), 1, game.world.marsModelList);
  var seczone = basics.makeCollactable(game.world, new Vector3d(0, 0, -1000), 1.25, game.world.marsModelList, function () {
    for (var i = 0; i < 12; i++) {
      var en = new Enemy(game.gl, game, randVector(new Vector3d(0, -500, -500), 500), new Vector3d(0, 0, 0), game.world.shipLists[rand(3)]);
    }
  });
  seczone.visible = false;
  rou.forEach(function (it) {
    starChunk(game, it, 400, 50);
    var brp = basics.makeBreakableExplosive(game.world, it, 0.1, game.world.meteModelList, 10, 30, function (bullet) {
      brp.deleteSelf();
    });
  });
  console.log(rou);
  recCollectable(game, rou, 0);
}

function recCollectable(game, rou, i) {
  console.log('recpoint ' + i);

  if (rou[i]) {
    var tg = game.addLabel('target', rou[i]);
    var ele = game.world.createMagic(rou[i], 90, false);
    var el = basics.makeCollactable(game.world, rou[i], 30, game.world.boxModelList, function (player) {
      ele.deleteSelf();

      if (!rou[i + 1]) {
        //anyutils.playSoundUrl('assets/sounds/success.mp3');
        window.sndBase.playByClass('success');
        game.finish(true);
      }

      console.log('collected');
      tg.deleteSelf(); //anyutils.playSoundUrl('assets/sounds/correct.mp3');

      window.sndBase.playByClass('correct');
      var en = new Enemy(game.gl, game, randVector(rou[i], 500), new Vector3d(0, 0, 0), game.world.shipLists[rand(3)]);
      en.targetPointer = game.targets.addTarget('kill enemy');

      en.onKilled = function () {
        //anyutils.playSoundUrl('assets/sounds/correct.mp3');
        window.sndBase.playByClass('correct');
        en.targetPointer.setComplete();
      };

      recCollectable(game, rou, i + 1);
    });
    el.visible = false;
  }
}

function makeRingSpline(r) {
  var ir;
  var x;
  var y;
  var z;
  res = [];
  var n = 9;

  for (var i = 0; i < 9; i++) {
    ir = calc.degToRad(i * 360 / n);
    x = Math.sin(ir) * r;
    y = Math.cos(ir) * r;
    z = Math.sin(ir * 4) * r / 10;
    res.push(new Vector3d(x, y, z));
  }

  return res;
}

module.exports = mission3;

/***/ }),

/***/ "./src/engine/missions/mission4.mission.js":
/*!*************************************************!*\
  !*** ./src/engine/missions/mission4.mission.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var anyutils = __webpack_require__(/*! ../../any.utils.js */ "./src/any.utils.js");

var basics = __webpack_require__(/*! ../basic-objects.gmob.js */ "./src/engine/basic-objects.gmob.js");

var Vector3d = __webpack_require__(/*! ../../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Enemy = __webpack_require__(/*! ../enemy.new.js */ "./src/engine/enemy.new.js");

var Collectable = __webpack_require__(/*! ../collectable.new.js */ "./src/engine/collectable.new.js");

var mUtils = __webpack_require__(/*! ./mission.utils.js */ "./src/engine/missions/mission.utils.js");

var randVector = mUtils.randVector;
var starChunk = mUtils.starChunk;

function mission4(game) {
  starChunk(game, new Vector3d(0, 0, 0), 500, 50);
  var baseLabel = game.addLabel('StartPoint', new Vector3d(0, 0, 0));
  basics.makePhysical(game.world, new Vector3d(0, 1000, 0), 1, game.world.mercuryModelList, true);
  basics.makePhysical(game.world, new Vector3d(0, -1000, 0), 1, game.world.marsModelList, true);
  var enBasePos = new Vector3d(100, 0, 0);
  starChunk(game, enBasePos, 500, 50); //let point1 = new Collectable(game, enBasePos, ''); 

  var point1 = basics.makeCollactable(game.world, enBasePos, 10, game.world.boxModelList);
  var p2 = game.world.createMagic(new Vector3d(0, 0, 0), 100, false);
  var brp = basics.makeBreakableStrong(game.world, new Vector3d(50, 0, 0), 1, game.world.bigModelList, 10, function (bullet) {
    brp.deleteSelf();
  });
  var target = game.targets.addTarget('come to target');

  point1.onCollect = function () {
    console.log('collected!!!'); //anyutils.playSoundUrl('assets/sounds/correct.mp3');

    window.sndBase.playByClass('correct');
    target.setComplete();
    label1.deleteSelf();
    var en = new Enemy(game.gl, game, randVector(enBasePos, 500), new Vector3d(0, 0, 0));
    en.targetPointer = game.targets.addTarget('kill enemy');

    en.onKilled = function () {
      //anyutils.playSoundUrl('assets/sounds/correct.mp3');
      window.sndBase.playByClass('correct');
      en.targetPointer.setComplete();
      var point1 = new Collectable(game, new Vector3d(0, 0, 0), '');
      game.targets.addTarget('return to start');

      point1.onCollect = function () {
        //anyutils.playSoundUrl('assets/sounds/success.mp3');
        window.sndBase.playByClass('success');
        game.finish();
      };
    };
  };

  var label1 = game.addLabel('target', enBasePos);
  console.log(point1);
}

module.exports = mission4;

/***/ }),

/***/ "./src/engine/physic.new.js":
/*!**********************************!*\
  !*** ./src/engine/physic.new.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Physic = /*#__PURE__*/function () {
  function Physic(vertexList) {
    _classCallCheck(this, Physic);

    this.triangles = [];
    var v;
    var ind;

    for (var i = 0; i < vertexList.length; i += 9) {
      v = [];

      for (var j = 0; j < 3; j += 1) {
        ind = i + j * 3;
        v[j] = new Vector3d(vertexList[ind + 0], vertexList[ind + 1], vertexList[ind + 2]);
      }

      var tri = new Triangle(v[0], v[1], v[2]);
      this.triangles.push(tri);
    }
  }

  _createClass(Physic, [{
    key: "destroy",
    value: function destroy() {
      this.triangles.forEach(function (it) {
        it.destroy();
        it = undefined;
      });
      this.triangles = undefined;
    }
  }, {
    key: "crossByLine",
    value: function crossByLine(a, b) {
      var res = [];
      var point;
      this.triangles.forEach(function (it) {
        point = it.crossByLine(a, b);

        if (point) {
          res.push({
            dv: point,
            triangle: it
          });
        }
      });
      return res;
    }
  }, {
    key: "hitMeshPoint",
    value: function hitMeshPoint(p, v) {
      var b = p.addVector(v);
      return getNearest(p, this.crossByLine(p, b));
    }
  }, {
    key: "mirrorVector",
    value: function mirrorVector(p, v) {
      var b = p.addVector(v);
      var cpl = this.crossByLine(p, b);

      if (cpl.length) {
        ///reflection
        var tr = getNearest(p, cpl).triangle;
        var dtt = v.subVector(tr.normal.mul(2 * v.dot(tr.normal)));
        return dtt;
      }

      return false;
    }
  }, {
    key: "isCrossedByTriangle",
    value: function isCrossedByTriangle(tr) {
      for (var i = 0; i < this.triangles.length; i++) {
        if (this.triangles[i].isCrossedByTriangle(tr)) {
          return true;
        }
      }
    }
  }, {
    key: "crossByTriangle",
    value: function crossByTriangle(tr) {
      for (var i = 0; i < this.triangles.length; i++) {
        if (this.triangles[i].isCrossedByTriangle(tr)) {
          return tr;
        }
      }
    }
  }, {
    key: "isCrossedByPhys",
    value: function isCrossedByPhys(ms) {
      for (var i = 0; i < ms.triangles.length; i++) {
        if (this.isCrossedByTriangle(ms.triangles[i])) {
          return true;
        }
      }
    }
  }, {
    key: "crossByPhys",
    value: function crossByPhys(ms) {
      for (var i = 0; i < ms.triangles.length; i++) {
        var tr = this.crossByTriangle(ms.triangles[i]);

        if (tr) {
          return tr;
        }
      }
    }
  }]);

  return Physic;
}();

function getNearest(p, list) {
  var minit;
  var minlen = 9999999;
  var dist;
  list.forEach(function (it) {
    dist = p.subVector(it.dv).abq();

    if (dist < minlen) {
      dist = minlen;
      minit = it;
    }
  });
  return minit;
}

var Triangle = /*#__PURE__*/function () {
  function Triangle(u, v, w) {
    _classCallCheck(this, Triangle);

    this.u = u;
    this.v = v;
    this.w = w;
    var norm = calc.getNormal(u, v, w);
    this.normal = new Vector3d(norm.x, norm.y, norm.z);
    this.dValue = calc.getValueD(u, norm);
    this.a = u;
    this.b = v;
    this.c = w;
    this.al = u.subVector(v).abs();
    this.bl = v.subVector(w).abs();
    this.cl = w.subVector(u).abs();
    this.pr = (this.al + this.bl + this.cl) / 2;
    var pr = this.pr;
    this.prq = pr * pr / 4;
    this.s = Math.sqrt(pr * (pr - this.al) * (pr - this.bl) * (pr - this.cl));
    this.center = u.addVector(v).addVector(w).mul(1 / 3);
  }

  _createClass(Triangle, [{
    key: "destroy",
    value: function destroy() {
      this.normal = undefined;
    }
  }, {
    key: "solveLinear",
    value: function solveLinear(v1, v2) {
      var n = this.normal;
      var d = this.dValue;
      var nv = v1.subVector(v2);
      var h = (n.x * v1.x + n.y * v1.y + n.z * v1.z + d) / -(n.x * nv.x + n.y * nv.y + n.z * nv.z);
      return {
        x: v1.x + h * nv.x,
        y: v1.y + h * nv.y,
        z: v1.z + h * nv.z
      };
    }
  }, {
    key: "inTriangle",
    value: function inTriangle(p) {
      if (p.subVector(this.center).abq() > this.prq) {
        return false;
      }

      var ap = this.a.subVector(p).abs();
      var bp = this.b.subVector(p).abs();
      var cp = this.c.subVector(p).abs();
      var pa = (ap + bp + this.al) / 2;
      var pb = (bp + cp + this.bl) / 2;
      var pc = (cp + ap + this.cl) / 2;
      var sa = Math.sqrt(pa * (pa - ap) * (pa - bp) * (pa - this.al));
      var sb = Math.sqrt(pb * (pb - bp) * (pb - cp) * (pb - this.bl));
      var sc = Math.sqrt(pc * (pc - cp) * (pc - ap) * (pc - this.cl));
      return sa + sb + sc <= this.s + 0.00001;
    }
  }, {
    key: "crossByLine",
    value: function crossByLine(a, b) {
      var res;
      var dv = this.solveLinear(a, b, this.a, this.b, this.c);
      var dVector = new Vector3d(dv.x, dv.y, dv.z);

      if (this.inTriangle(dVector)) {
        if (calc.onLine(a, b, dVector)) {
          res = dVector;
        }
      }

      return res;
    }
  }, {
    key: "isCrossedByTriangle",
    value: function isCrossedByTriangle(tr) {
      var res = false;

      if (this.crossByLine(tr.a, tr.b) || this.crossByLine(tr.b, tr.c) || this.crossByLine(tr.c, tr.a)) {
        res = true;
      }

      return res;
    }
  }]);

  return Triangle;
}();

module.exports = Physic;

/***/ }),

/***/ "./src/engine/player.new.js":
/*!**********************************!*\
  !*** ./src/engine/player.new.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var World = __webpack_require__(/*! ./world.new.js */ "./src/engine/world.new.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var Camera = __webpack_require__(/*! ./camera.new.js */ "./src/engine/camera.new.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var rand = calc.rand;

var Weapon = __webpack_require__(/*! ./weapon.new.js */ "./src/engine/weapon.new.js");

var Timer = __webpack_require__(/*! ./timer.new.js */ "./src/engine/timer.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var anyutils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var Phys = __webpack_require__(/*! ./physic.new.js */ "./src/engine/physic.new.js");

var Player = /*#__PURE__*/function (_GameObject) {
  _inherits(Player, _GameObject);

  var _super = _createSuper(Player);

  function Player(gl, game, keyStates) {
    var _this;

    _classCallCheck(this, Player);

    _this = _super.call(this);
    _this.game = game;
    _this.keyStates = keyStates;
    var world = _this.game.world;
    _this.isAlive = true;
    _this.health = 100;
    _this.game.glCanvas.gamePanel.health.node.textContent = 'health: ' + _this.health;
    _this.shieldEnergy = 100;
    _this.game.glCanvas.gamePanel.shield.node.textContent = 'shield: ' + _this.shieldEnergy;
    _this.shieldTime = 2; //this.domStates = 

    _this.weapons = [new Weapon(world, 0.15, 1.2, 130.1, 'laserShot', 'laser', 100, 2), new Weapon(world, 0.08, 0.7, 130.1, 'autoShot', 'auto', 1000, 1), new Weapon(world, 0.35, 5.2, 260.1, 'phaserShot', 'phaser', 60, 4), new Weapon(world, 0.65, 3.2, 740.1, 'railShot', 'railgun', 70, 6)];

    _this.setWeapon(1);

    _this.camera = new Camera(game.world, keyStates);

    _this.camera.init(); ///as gameobject


    var mtx = _this.camera.getSelfModelMatrix(); //this.model = this.game.world.selfModelList.createStaticItem(mtx);


    _this.model = _this.game.world.selfModelLists[game.props.shipIndex].createStaticItem(mtx);
    _this.shieldModelScaler = 0.008;
    _this.shieldModel = _this.game.world.createFogMagicSphere(new Vector3d(0, 0, 0), _this.shieldModelScaler, false);
    _this.shieldModel.visible = false;
    var hitbox = makeHitBox(_assertThisInitialized(_this), 2, function (bullet) {
      if (_this.shieldActivated) {
        return;
      }

      console.log('hit');
      bullet.deleteSelf();

      _this.damage(4, 12);
      /*  window.sndBase.playByClass('hit');
        //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/hit1.mp3') : anyutils.playSoundUrl('assets/sounds/hit2.mp3');
        this.health-=rand(15)+3;
        this.game.glCanvas.gamePanel.health.node.textContent = 'health: '+this.health;
        if (this.health<0){
          console.log('dead');
          this.isAlive = false;
          this.game.glCanvas.keyboardState.shot = false;
          this.game.world.createExplosion(this.camera.getPosVector().subVector(this.camera.getCamNormal().mul(2.10)),40);
          window.sndBase.playByClass('explosion');
          //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/expl1.mp3') : anyutils.playSoundUrl('assets/sounds/expl2.mp3');
         
          setTimeout(()=>{
           /* this.game.glCanvas.keyboardState.shot = false;
            this.game.glCanvas.menu.activate();
            this.game.glCanvas.menu.menu.selectPage(this.game.glCanvas.menu.gameOverMenu);
            document.exitPointerLock();*/

      /*      this.game.finish(false);
          },50);
        }*/

    });
    _this.hitbox = hitbox;
    var nearbox = makeHitBox(_assertThisInitialized(_this), 5, function (bullet) {
      console.log('near');
      window.sndBase.playByClass('near'); //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/near1.mp3') : anyutils.playSoundUrl('assets/sounds/near2.mp3');
    });
    _this.nearbox = nearbox;
    var shieldbox = makeHitBox(_assertThisInitialized(_this), 3, function (bullet) {
      if (!_this.shieldActivated) {
        return;
      }

      console.log('shielded');
      window.sndBase.playByClass('error'); //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/error.mp3') : anyutils.playSoundUrl('assets/sounds/error.mp3');
    });
    _this.nearbox = nearbox; //this.touch = new Phys(this.nearbox.mesh.vertexList);

    _this.onProcess = function (deltaTime) {
      _this.model.matrix = _this.camera.getSelfModelMatrix();
      var mt = m4.identity();

      var pos = _this.camera.getPosVector();

      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      var scale_ = _this.shieldModelScaler;
      mt = m4.scale(mt, scale_, scale_, scale_);
      _this.shieldModel.matrix = mt; //this.shieldModel.matrix = m4.scale(this.camera.getSelfModelMatrix(), this.shieldModelScaler,this.shieldModelScaler,this.shieldModelScaler);

      hitbox.process_(deltaTime);
      nearbox.process_(deltaTime);
      shieldbox.process_(deltaTime); //this.shieldModel.process_(deltaTime);
      //this.camera.vZ+=1*deltaTime; GRAVITY

      if (_this.touch) {
        _this.touch.destroy();

        _this.touch = undefined;
      }

      _this.touch = new Phys(_this.nearbox.hitTransformed);
      _this.speedVectorSync = _this.camera.getSpeedVector().mul(deltaTime); //this.render_(deltaTime);
    };

    _this.onReact = function (ob) {
      if (!_this.camera.lastPos) {
        return;
      }

      if (ob.type == 'solid') {
        if (calc.isCrossedSimple(ob.hitPosition, _this.camera.lastPos, _this.camera.getPosVector().subVector(_this.camera.lastPos), ob.hitDist * 1.2)) {
          //if (calc.rand(100)==1){console.log('shit!!!')}
          //let spv = this.speedVectorSync;
          //if (this.speedVectorSync.abs()<0.01){spv = this.camera.getSpeedVector().normalize().mul(0.01); }
          if (ob.physicList.isCrossedByPhys(_this.touch)) {
            var reflected = ob.physicList.mirrorVector(_this.camera.lastPos, _this.camera.getPosVector().subVector(_this.camera.lastPos).mul(100));

            if (reflected) {
              _this.camera.applySpeed(_this.speedVectorSync);

              _this.camera.setSpeedVector(reflected.normalize().mul(_this.camera.getSpeedVector().abs() * 0.73));

              if (ob.onContact) {
                ob.onContact(_assertThisInitialized(_this));
              }
            } else {//this.camera.applySpeed(this.speedVectorSync);
              //this.camera.setSpeedVector(this.camera.getSpeedVector().mul(-1)); ???
            }
          }
          /* */

        }

        ;
      }

      if (ob.type == 'collectable') {
        if (calc.isCrossedSimple(ob.hitPosition, _this.camera.getPosVector(), _this.speedVectorSync, ob.hitDist)) {
          if (ob.bonus == 'bullets') {
            _this.weapons[_this.currentWeaponIndex - 1].bulletCount += ob.bonus_count;
            window.sndBase.playByClass('bulletBonus'); //anyutils.playSoundUrl('assets/sounds/reload.mp3')

            ob.deleteSelf();
            _this.game.glCanvas.gamePanel.bullets.node.textContent = 'bullets: ' + _this.weapons[_this.currentWeaponIndex - 1].bulletCount;
          }

          if (ob.bonus == 'health') {
            _this.health = incLim(_this.health, ob.bonus_count, 100); //anyutils.playSoundUrl('assets/sounds/correct.mp3')

            window.sndBase.playByClass('healthBonus');
            ob.deleteSelf();
            _this.game.glCanvas.gamePanel.health.node.textContent = 'health: ' + _this.health;
          }

          if (ob.bonus == '') {
            //anyutils.playSoundUrl('assets/sounds/error.mp3');
            ob.deleteSelf();
          }

          if (ob.onCollect) {
            ob.onCollect(_assertThisInitialized(_this));
          }
        }

        ;
      }
    };

    _this.refTimer = new Timer(0.1, function () {
      _this.game.glCanvas.gamePanel.speed.node.textContent = 'speed: ' + Math.round(_this.camera.getSpeedVector().abs() * 10) / 10;
    });
    _this.envTimer = new Timer(0.3, function () {
      var sv = _this.camera.getSpeedVector().mul(4);

      if (sv.abs() > 12) {
        starChunk(_this.game, sv.addVector(_this.camera.getPosVector()), 100, 3);
      }
    });

    _this.game.world.objectList.addChild(_assertThisInitialized(_this)); /////////


    return _this;
  } // destructor(){
  // }


  _createClass(Player, [{
    key: "damage",
    value: function damage(pointsMin) {
      var _this2 = this;

      var pointsRand = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      window.sndBase.playByClass('hit'); //rand(10)<5 ? anyutils.playSoundUrl('assets/sounds/hit1.mp3') : anyutils.playSoundUrl('assets/sounds/hit2.mp3');

      this.health -= rand(pointsRand) + pointsMin;
      this.game.glCanvas.gamePanel.health.node.textContent = 'health: ' + this.health;

      if (this.health < 0) {
        console.log('dead');
        this.isAlive = false;
        this.game.glCanvas.keyboardState.shot = false;
        this.game.world.createExplosion(this.camera.getPosVector().subVector(this.camera.getCamNormal().mul(2.10)), 40);
        window.sndBase.playByClass('explosion');
        setTimeout(function () {
          _this2.game.finish(false);
        }, 50);
      }
    }
  }, {
    key: "render_",
    value: function render_(deltaTime) {
      this.refTimer.process(deltaTime);
      this.envTimer.process(deltaTime);

      if (this.keyStates.shot) {
        this.shot(this.currentWeaponIndex - 1);
      }

      this.shieldTime -= deltaTime;

      if (this.keyStates.space) {
        this.shieldActivate(deltaTime);
        this.shieldModel.visible = true;
      } else {
        this.shieldActivated = false;
        this.shieldModel.visible = false;
      }

      this.camera.process(deltaTime);
      this.weapons.forEach(function (it) {
        return it.render(deltaTime);
      });
    }
  }, {
    key: "shot",
    value: function shot(weaponIndex) {
      //if (this.bullets>0){
      if (this.weapons[weaponIndex].shot(this.camera.getPosVector().subVector(this.camera.getCamNormal().mul(2.10)), this.camera.getCamNormal().mul(-1).addVector(this.camera.getSpeedVector().mul(1 / this.weapons[weaponIndex].bulletSpeed)))) {
        //this.bullets--;
        this.game.glCanvas.gamePanel.bullets.node.textContent = 'bullets: ' + this.weapons[weaponIndex].bulletCount;
      } //}

    }
  }, {
    key: "shieldActivate",
    value: function shieldActivate(deltaTime) {
      if (this.shieldEnergy > 0) {
        // this.shieldModel.visible = true;
        //console.log(this.shieldTime);
        this.shieldActivated = true;

        if (calc.isTimeout(this.shieldTime)) {
          this.shieldEnergy -= 1;
          this.shieldTime = 0.5;
          this.game.glCanvas.gamePanel.shield.node.textContent = 'shield: ' + this.shieldEnergy;
        }
      } else {
        this.shieldActivated = false; //this.shieldTime = 0;  
      }
    }
  }, {
    key: "setWeapon",
    value: function setWeapon(weaponIndex) {
      this.currentWeaponIndex = weaponIndex;
      this.game.glCanvas.gamePanel.weapon.node.textContent = this.weapons[this.currentWeaponIndex - 1].weaponName;
      this.game.glCanvas.gamePanel.bullets.node.textContent = 'bullets: ' + this.weapons[weaponIndex - 1].bulletCount;
    }
  }]);

  return Player;
}(GameObject);

function makeHitBox(gameObject, scale_, onHit) {
  var hitbox = gameObject.game.world.createBreakable(gameObject.camera.getPosVector(), scale_);
  hitbox.type = 'object';
  hitbox.visible = false;
  hitbox.scale = scale_;
  hitbox.onHit = onHit;

  hitbox.process_ = function (deltaTime) {
    //hitbox.matrix = gameObject.model.matrix;
    var mt = m4.identity();
    var pos = gameObject.camera.getPosVector();
    mt = m4.translate(mt, pos.x, pos.y, pos.z);
    mt = m4.scale(mt, scale_, scale_, scale_);
    hitbox.matrix = mt;
    hitbox.hitTransformed = hitbox.meshPointer.getTransformedVertexList(hitbox.matrix);
    hitbox.hitPosition = calc.getPosFromMatrix(hitbox.matrix);
    hitbox.hitDist = hitbox.meshPointer.maxDistance * hitbox.scale;
  };

  return hitbox;
}

function starChunk(game, center, size, count) {
  for (var i = 0; i < count; i++) {
    var a = new Vector3d(Math.random() - 0.5, Math.random() - 0.5, Math.random() - 0.5); // a = a.normalize();

    a = a.mul(size).addVector(center);
    var mt = m4.identity();
    mt = m4.translate(mt, a.x, a.y, a.z);
    mt = m4.xRotate(mt, Math.random() * Math.PI * 2);
    mt = m4.yRotate(mt, Math.random() * Math.PI);
    var fl = true;
    game.world.chunkList.childList.forEach(function (it) {
      if (it.centerPoint && it.centerPoint.subVector(center).abs() < 10) {
        fl = false;
      }
    });

    if (fl) {
      (function () {
        var cl = game.world.chunkList.createStaticItem(mt, {
          r: Math.random(),
          g: Math.random(),
          b: 0.5
        }, 500); //del magic num

        cl.centerPoint = center;

        cl.onProcess = function () {
          if (game.player.camera.getPosVector().subVector(center).abs() > 300) {
            cl.deleteSelf();
          }
        };
      })();
    }
  }
}

function incLim(val, inc, lim) {
  var nv = val += inc;
  return nv < lim ? nv : lim;
}
/*function qubeLines(size, pos){
  p = [
    new Vector3d(-1, -1, -1).mul(size).addVector(pos),
    new Vector3d(-1, -1, 1).mul(size).addVector(pos),
    new Vector3d(-1, 1, -1).mul(size).addVector(pos),
    new Vector3d(-1, 1, 1).mul(size).addVector(pos),
    new Vector3d(1, -1, -1).mul(size).addVector(pos),
    new Vector3d(1, -1, 1).mul(size).addVector(pos),
    new Vector3d(1, 1, -1).mul(size).addVector(pos),
    new Vector3d(1, 1, 1).mul(size).addVector(pos),
  ];
  lines = [
    p[0], p[1],
    p[1], p[3],
    p[3], p[2],
    p[2], p[0],
    p[4], p[5],
    p[5], p[7],
    p[7], p[6],
    p[6], p[4],
    p[0], p[4],
    p[1], p[5],
    p[2], p[6],
    p[3], p[7],
  ];
  return lines;
}
*/

/*
else { 

  let po = qubeLines(1, this.camera.getPosVector());
  for (let i=0; i<po.length/2; i++){
    reflected = calc.mirrorVectorFromMesh(ob.hitTransformed, po[i*2], po[i*2+1]);
    if (reflected){
      this.camera.setSpeedVector (this.camera.getSpeedVector().mul(-1));  
      break;
    }
  }
}*/


module.exports = Player;

/***/ }),

/***/ "./src/engine/point-msg.new.js":
/*!*************************************!*\
  !*** ./src/engine/point-msg.new.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ../control-js/control.component.js */ "./src/control-js/control.component.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js"); //const getScreenPos = calc.getScreenPos;


var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Message = /*#__PURE__*/function (_Control) {
  _inherits(Message, _Control);

  var _super = _createSuper(Message);

  function Message(parentNode, text, colorHex) {
    var _this;

    _classCallCheck(this, Message);

    _this = _super.call(this, parentNode, 'div');
    _this.parentNode = parentNode;
    _this.color = colorHex || 'fff';
    _this.node.style.cssText = "position:absolute; top:".concat(0, "px; left:", 0, "px; color:#", colorHex, ";");

    if (text) {
      _this.node.textContent = text;
    }

    return _this;
  }

  _createClass(Message, [{
    key: "refresh",
    value: function refresh(viewMatrix, vector, text) {
      var rect = this.parentNode.getBoundingClientRect();
      var relt = {
        top: 0,
        left: 0,
        right: rect.width,
        bottom: rect.height
      };
      var ps = getScreenPos(viewMatrix, vector, relt);

      if (text) {
        this.node.textContent = text;
      }

      if (ps.y + this.node.clientHeight > relt.bottom) {
        ps.y = ps.y - this.node.clientHeight;
      }

      if (ps.x + this.node.clientWidth > relt.right) {
        ps.x = ps.x - this.node.clientWidth;
      }

      this.node.style.cssText = "position:absolute; top:".concat(ps.y, "px; left:").concat(ps.x, "px; color:#").concat(this.color, ";");
    }
  }]);

  return Message;
}(Control);

var MessageGamed = /*#__PURE__*/function (_GameObject) {
  _inherits(MessageGamed, _GameObject);

  var _super2 = _createSuper(MessageGamed);

  function MessageGamed(glCanvas, text, colorHex, vector) {
    var _this2;

    _classCallCheck(this, MessageGamed);

    _this2 = _super2.call(this);
    var parentNode = glCanvas.gamePanel.view.node;
    _this2.messageNode = new Message(parentNode, text, colorHex);
    _this2.vector = vector;
    _this2.text = text;

    _this2.onRender = function (gl, props) {
      _this2.messageNode.refresh(props.viewMatrix, _this2.vector, _this2.text);
    };

    _this2.onDelete = function () {
      parentNode.removeChild(_this2.messageNode.node);
    };

    return _this2;
  }

  return MessageGamed;
}(GameObject);

function getScreenPos(viewMatrix, vector, clipRect) {
  var point = [vector.x, vector.y, vector.z, 1]; // это верхний правый угол фронтальной части
  // вычисляем координаты пространства отсечения,
  // используя матрицу, которую мы вычисляли для F

  var clipspace = m4.transformVector(viewMatrix, point); // делим X и Y на W аналогично видеокарте

  clipspace[0] /= clipspace[3];
  clipspace[1] /= clipspace[3]; // конвертация из пространства отсечения в пиксели
  //var pixelX = (clipspace[0] *  0.5 + 0.5) * clipRect.right;
  //var pixelY = (clipspace[1] * -0.5 + 0.5) * clipRect.bottom;

  var pixelX = (clipspace[0] * 0.5 + 0.5) * window.app.glCanvas.node.width;
  var pixelY = (clipspace[1] * -0.5 + 0.5) * window.app.glCanvas.node.height;

  if (clipspace[3] < 0) {
    pixelX *= -10000;
    pixelY *= -10000;
  }

  pixelY = pixelY > clipRect.bottom ? clipRect.bottom : pixelY;
  pixelX = pixelX > clipRect.right ? clipRect.right : pixelX;
  pixelY = pixelY < clipRect.top ? clipRect.top : pixelY;
  pixelX = pixelX < clipRect.left ? clipRect.left : pixelX;
  return {
    x: pixelX,
    y: pixelY,
    back: clipspace[3] < 0
  };
}

module.exports = MessageGamed;

/***/ }),

/***/ "./src/engine/renderable-item.new.js":
/*!*******************************************!*\
  !*** ./src/engine/renderable-item.new.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var RenderableItem = /*#__PURE__*/function (_GameObject) {
  _inherits(RenderableItem, _GameObject);

  var _super = _createSuper(RenderableItem);

  function RenderableItem(shaderVariables, meshPointer, matrix, color, maxVisibleDist) {
    var _this;

    _classCallCheck(this, RenderableItem);

    _this = _super.call(this);
    _this.meshPointer = meshPointer;
    _this.shaderVariables = shaderVariables;
    _this.matrix = matrix || m4.identity();
    _this.count = meshPointer.vertexList.length / 3;
    _this.color = color || randomColor();
    _this.visible = true;
    _this.maxVisibleDistance = maxVisibleDist;
    _this.pos_ = new Vector3d(_this.matrix[12], _this.matrix[13], _this.matrix[14]);

    _this.onRender = function (gl, props) {
      if (_this.maxVisibleDistance && props.game.player.camera.getPosVector().subVector(_this.pos_).abs() > _this.maxVisibleDistance) {
        return;
      }

      if (_this.visible) {
        gl.uniformMatrix4fv(_this.shaderVariables.worldUniMat4, false, _this.matrix);
        var _color = _this.color;
        gl.uniform4f(shaderVariables.colorUniVec4, _color.r, _color.g, _color.b, _color.a);
        gl.drawArrays(gl.TRIANGLES, 0, _this.count);
      }
    };

    return _this;
  }

  return RenderableItem;
}(GameObject);

function randomColor() {
  return {
    r: Math.random(),
    g: Math.random(),
    b: Math.random()
  };
}

module.exports = RenderableItem;

/***/ }),

/***/ "./src/engine/renderable-model-list.new.js":
/*!*************************************************!*\
  !*** ./src/engine/renderable-model-list.new.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var RenderableItem = __webpack_require__(/*! ./renderable-item.new.js */ "./src/engine/renderable-item.new.js");

var Mesh = __webpack_require__(/*! ../mesh.object.js */ "./src/mesh.object.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var RenderableModelList = /*#__PURE__*/function (_GameObject) {
  _inherits(RenderableModelList, _GameObject);

  var _super = _createSuper(RenderableModelList);

  function RenderableModelList(gl, shaderVariables, modelSource, preScaler) {
    var _this;

    _classCallCheck(this, RenderableModelList);

    _this = _super.call(this);
    _this.shaderVariables = shaderVariables;
    _this.mesh = new Mesh(gl);

    _this.mesh.loadFromSource(modelSource, preScaler); //this.mesh.center = this.mesh.getCenter();
    //console.log(this.mesh.center)

    /*  this.onDelete = ()=>{
        this.mesh.deleteBuffers(); 
        if (this.texture){
          gl.deleteTexture(this.texture);
        }
        console.log('delbuffers'); 
      }*/


    return _this;
  }
  /* clear(){
     this.childList.forEach(it=>{
       it.deleteSelf();
       console.log('deleted');
     });  
   }*/


  return RenderableModelList;
}(GameObject);

module.exports = RenderableModelList;

/***/ }),

/***/ "./src/engine/renderable-shader-list.new.js":
/*!**************************************************!*\
  !*** ./src/engine/renderable-shader-list.new.js ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var RenderableShaderList = /*#__PURE__*/function (_GameObject) {
  _inherits(RenderableShaderList, _GameObject);

  var _super = _createSuper(RenderableShaderList);

  function RenderableShaderList(gl, shaderUnit) {
    var _this;

    _classCallCheck(this, RenderableShaderList);

    _this = _super.call(this);
    _this.gl = gl;
    var shaderProgram = GLUtils.createShaderFromSource(gl, shaderUnit.vertexShaderSource, shaderUnit.fragmentShaderSource);
    var shaderVariables = shaderUnit.getShaderVariables(gl, shaderProgram);
    _this.shaderProgram = shaderProgram;
    _this.shaderVariables = shaderVariables;
    /* this.onDelete = ()=>{
        gl.deleteProgram(this.shaderProgram);
        console.log('delshader');
      }*/

    return _this;
  }

  return RenderableShaderList;
}(GameObject);

module.exports = RenderableShaderList;

/***/ }),

/***/ "./src/engine/shaders/ani-textured.shader.js":
/*!***************************************************!*\
  !*** ./src/engine/shaders/ani-textured.shader.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var vertexShaderSource = "\n  attribute vec4 a_position;\n  attribute vec2 a_texcoord;\n  \n  uniform mat4 u_view;\n  uniform mat4 u_world;\n  uniform vec4 u_texpos;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_view * u_world * a_position;\n    v_position = gl_Position;\n    v_texcoord = vec2((a_texcoord.x+u_texpos.z)*u_texpos.x, (a_texcoord.y+u_texpos.a)*u_texpos.y);\n  }\n";
var fragmentShaderSource = "\n  precision mediump float;\n\n  uniform vec4 u_color;\n  uniform sampler2D u_texture;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n  \n  void main() {\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n";

function getShaderVariables(gl, program) {
  var positionAttr = gl.getAttribLocation(program, "a_position");
  var texAttr = gl.getAttribLocation(program, "a_texcoord");
  var colorUniVec4 = gl.getUniformLocation(program, "u_color");
  var posUniVec4 = gl.getUniformLocation(program, "u_texpos");
  var viewUniMat4 = gl.getUniformLocation(program, "u_view");
  var worldUniMat4 = gl.getUniformLocation(program, "u_world");
  var texture = gl.getUniformLocation(program, "u_texture");
  return {
    positionAttr: positionAttr,
    texAttr: texAttr,
    colorUniVec4: colorUniVec4,
    viewUniMat4: viewUniMat4,
    worldUniMat4: worldUniMat4,
    posUniVec4: posUniVec4,
    texture: texture
  };
}

function initShader(gl, program, vars) {
  gl.clearColor(0, 0, 0, 0); //gl.disable(gl.DEPTH_TEST);

  gl.depthMask(false);
  gl.blendFunc(gl.SRC_ALPHA, gl.ONE);
  gl.enable(gl.BLEND);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
  gl.useProgram(program);
  gl.enableVertexAttribArray(vars.positionAttr);
  gl.enableVertexAttribArray(vars.texAttr);
}

module.exports = {
  vertexShaderSource: vertexShaderSource,
  fragmentShaderSource: fragmentShaderSource,
  getShaderVariables: getShaderVariables,
  initShader: initShader
};

/***/ }),

/***/ "./src/engine/shaders/skybox.shader.js":
/*!*********************************************!*\
  !*** ./src/engine/shaders/skybox.shader.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var vertexShaderSource = "\n  attribute vec4 a_position;\n  attribute vec2 a_texcoord;\n  \n  uniform mat4 u_view;\n  uniform mat4 u_world;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n\n  void main() {\n    gl_Position = u_view * u_world * a_position;\n    v_position = gl_Position;\n    v_texcoord = a_texcoord;\n  }\n";
var fragmentShaderSource = "\n  precision mediump float;\n\n  uniform vec4 u_color;\n  uniform sampler2D u_texture;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n  \n  void main() {\n    gl_FragColor = texture2D(u_texture, v_texcoord);\n  }\n";

function getShaderVariables(gl, program) {
  var positionAttr = gl.getAttribLocation(program, "a_position");
  var texAttr = gl.getAttribLocation(program, "a_texcoord");
  var colorUniVec4 = gl.getUniformLocation(program, "u_color");
  var viewUniMat4 = gl.getUniformLocation(program, "u_view");
  var worldUniMat4 = gl.getUniformLocation(program, "u_world");
  var texture = gl.getUniformLocation(program, "u_texture");
  return {
    positionAttr: positionAttr,
    texAttr: texAttr,
    colorUniVec4: colorUniVec4,
    viewUniMat4: viewUniMat4,
    worldUniMat4: worldUniMat4,
    texture: texture
  };
}

function initShader(gl, program, vars) {
  gl.clearColor(0, 0, 0, 0);
  gl.disable(gl.DEPTH_TEST);
  gl.disable(gl.BLEND);
  gl.depthMask(false);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
  gl.useProgram(program);
  gl.enableVertexAttribArray(vars.positionAttr);
  gl.enableVertexAttribArray(vars.texAttr);
}

module.exports = {
  vertexShaderSource: vertexShaderSource,
  fragmentShaderSource: fragmentShaderSource,
  getShaderVariables: getShaderVariables,
  initShader: initShader
};

/***/ }),

/***/ "./src/engine/shaders/solid-textured.shader.js":
/*!*****************************************************!*\
  !*** ./src/engine/shaders/solid-textured.shader.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var vertexShaderSource = "\n  attribute vec4 a_position;\n  attribute vec2 a_texcoord;\n  attribute vec4 a_norm;\n\n  uniform mat4 u_view;\n  uniform mat4 u_world;\n  uniform vec4 u_texpos;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n  varying vec4 v_normal;\n\n  void main() {\n    gl_Position = u_view * u_world * a_position;\n    v_position = gl_Position;\n    v_texcoord = vec2((a_texcoord.x+u_texpos.z)*u_texpos.x, (a_texcoord.y+u_texpos.a)*u_texpos.y);\n    v_normal = vec4(mat3(u_world) * vec3(a_norm), 1);\n  }\n";
var fragmentShaderSource = "\n  precision mediump float;\n\n  uniform vec4 u_color;\n  uniform sampler2D u_texture;\n\n  varying vec4 v_position;\n  varying vec2 v_texcoord;\n  varying vec4 v_normal;\n  \n  void main() {\n    float light = dot(normalize(v_normal.xyz),normalize(vec3(1,1,0)));\n    light = light+1.0;\n    vec4 texColor = texture2D(u_texture, v_texcoord);\n    gl_FragColor = vec4(light*texColor.r, light*texColor.g, light*texColor.b, 1);\n  }\n";

function getShaderVariables(gl, program) {
  //gl.useProgram(program);
  var positionAttr = gl.getAttribLocation(program, "a_position");
  var normalAttr = gl.getAttribLocation(program, "a_norm");
  var texAttr = gl.getAttribLocation(program, "a_texcoord");
  var colorUniVec4 = gl.getUniformLocation(program, "u_color");
  var posUniVec4 = gl.getUniformLocation(program, "u_texpos");
  var viewUniMat4 = gl.getUniformLocation(program, "u_view");
  var worldUniMat4 = gl.getUniformLocation(program, "u_world");
  var texture = gl.getUniformLocation(program, "u_texture");
  return {
    positionAttr: positionAttr,
    texAttr: texAttr,
    normalAttr: normalAttr,
    colorUniVec4: colorUniVec4,
    viewUniMat4: viewUniMat4,
    worldUniMat4: worldUniMat4,
    posUniVec4: posUniVec4,
    texture: texture
  };
}

function initShader(gl, shaderProgram, shaderVariables) {
  gl.clearColor(0, 0, 0, 0);
  gl.enable(gl.DEPTH_TEST);
  gl.depthMask(true);
  gl.disable(gl.BLEND);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
  gl.useProgram(shaderProgram);
  gl.enableVertexAttribArray(shaderVariables.positionAttr);
  gl.enableVertexAttribArray(shaderVariables.normalAttr);
  gl.enableVertexAttribArray(shaderVariables.texAttr);
}

module.exports = {
  vertexShaderSource: vertexShaderSource,
  fragmentShaderSource: fragmentShaderSource,
  getShaderVariables: getShaderVariables,
  initShader: initShader
};

/***/ }),

/***/ "./src/engine/shaders/solid-untextured.shader.js":
/*!*******************************************************!*\
  !*** ./src/engine/shaders/solid-untextured.shader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

var vertexShaderSource = "\n  attribute vec4 a_position;\n  attribute vec4 a_normal;\n  \n  uniform mat4 u_view;\n  uniform mat4 u_world;\n  varying vec4 v_position;\n  varying vec4 v_normal;\n  void main() {\n    gl_Position = u_view * u_world * a_position;\n    v_position = gl_Position;\n    v_normal = vec4(mat3(u_world) * vec3(a_normal), 1);\n  }\n";
var fragmentShaderSource = "\n  precision mediump float;\n  uniform vec4 u_color;\n  varying vec4 v_position;\n  varying vec4 v_normal;\n  void main() {\n    float light = dot(normalize(v_normal.xyz),normalize(vec3(1,1,0)));\n    light = light+1.0;\n    gl_FragColor = vec4(light*u_color.r, light*u_color.g, light*u_color.b, 1);\n  }\n";

function getShaderVariables(gl, program) {
  var positionAttr = gl.getAttribLocation(program, "a_position");
  var normalAttr = gl.getAttribLocation(program, "a_normal");
  var colorUniVec4 = gl.getUniformLocation(program, "u_color");
  var viewUniMat4 = gl.getUniformLocation(program, "u_view");
  var worldUniMat4 = gl.getUniformLocation(program, "u_world");
  return {
    positionAttr: positionAttr,
    normalAttr: normalAttr,
    colorUniVec4: colorUniVec4,
    viewUniMat4: viewUniMat4,
    worldUniMat4: worldUniMat4
  };
}

function initShader(gl, shaderProgram, shaderVariables) {
  gl.clearColor(0, 0, 0, 0);
  gl.enable(gl.DEPTH_TEST);
  gl.depthMask(true);
  gl.disable(gl.BLEND);
  gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);
  gl.useProgram(shaderProgram);
  gl.enableVertexAttribArray(shaderVariables.positionAttr);
  gl.enableVertexAttribArray(shaderVariables.normalAttr);
}

module.exports = {
  vertexShaderSource: vertexShaderSource,
  fragmentShaderSource: fragmentShaderSource,
  getShaderVariables: getShaderVariables,
  initShader: initShader
};

/***/ }),

/***/ "./src/engine/skybox.new.js":
/*!**********************************!*\
  !*** ./src/engine/skybox.new.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RenderableShaderList = __webpack_require__(/*! ./renderable-shader-list.new.js */ "./src/engine/renderable-shader-list.new.js");

var RenderableModelList = __webpack_require__(/*! ./renderable-model-list.new.js */ "./src/engine/renderable-model-list.new.js");

var RenderableItem = __webpack_require__(/*! ./renderable-item.new.js */ "./src/engine/renderable-item.new.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var ModelList = /*#__PURE__*/function (_RenderableModelList) {
  _inherits(ModelList, _RenderableModelList);

  var _super = _createSuper(ModelList);

  function ModelList(gl, shaderVariables, record) {
    var _this;

    _classCallCheck(this, ModelList);

    _this = _super.call(this, gl, shaderVariables, record.source);
    GLUtils.createTextureFromImg(gl, record.texImage, function (tex) {
      _this.texture = tex;
    });

    _this.onRender = function (gl, props) {
      GLUtils.setBuffer(gl, _this.mesh.positionBuffer, _this.shaderVariables.positionAttr, 3);
      GLUtils.setBuffer(gl, _this.mesh.texBuffer, _this.shaderVariables.texAttr, 2);
      gl.bindTexture(gl.TEXTURE_2D, _this.texture);
    };
    /*  this.onDelete = ()=>{
        this.mesh.deleteBuffers();
        //deleteTexture
      }*/


    return _this;
  }

  _createClass(ModelList, [{
    key: "createStaticItem",
    value: function createStaticItem(matrix, color) {
      return this.addChild(new RenderableItem(this.shaderVariables, this.mesh, matrix, color));
    }
  }]);

  return ModelList;
}(RenderableModelList);

var ShaderList = /*#__PURE__*/function (_RenderableShaderList) {
  _inherits(ShaderList, _RenderableShaderList);

  var _super2 = _createSuper(ShaderList);

  function ShaderList(gl, shaderUnit) {
    var _this2;

    _classCallCheck(this, ShaderList);

    _this2 = _super2.call(this, gl, shaderUnit);

    _this2.onRender = function (gl, props) {
      shaderUnit.initShader(gl, _this2.shaderProgram, _this2.shaderVariables);
      gl.uniformMatrix4fv(_this2.shaderVariables.viewUniMat4, false, props.viewMatrix);
    };

    return _this2;
  }

  _createClass(ShaderList, [{
    key: "createModelList",
    value: function createModelList(record) {
      return this.addChild(new ModelList(this.gl, this.shaderVariables, record));
    }
  }]);

  return ShaderList;
}(RenderableShaderList);

module.exports = {
  SkyboxShaderList: ShaderList,
  SkyboxModeList: ModelList
};

/***/ }),

/***/ "./src/engine/solid-textured.new.js":
/*!******************************************!*\
  !*** ./src/engine/solid-textured.new.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RenderableShaderList = __webpack_require__(/*! ./renderable-shader-list.new.js */ "./src/engine/renderable-shader-list.new.js");

var RenderableModelList = __webpack_require__(/*! ./renderable-model-list.new.js */ "./src/engine/renderable-model-list.new.js");

var RenderableItem = __webpack_require__(/*! ./renderable-item.new.js */ "./src/engine/renderable-item.new.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var TexturedItem = /*#__PURE__*/function (_GameObject) {
  _inherits(TexturedItem, _GameObject);

  var _super = _createSuper(TexturedItem);

  function TexturedItem(shaderVariables, meshPointer, matrix) {
    var _this;

    _classCallCheck(this, TexturedItem);

    _this = _super.call(this);
    _this.meshPointer = meshPointer;
    _this.shaderVariables = shaderVariables;
    _this.matrix = matrix || m4.identity();
    _this.count = meshPointer.vertexList.length / 3; //this.animation = new Animation(xmax, ymax, timeStep);

    _this.visible = true;

    _this.onRender = function (gl, props) {
      if (_this.visible) {
        //this.animation.render(gl, this.shaderVariables, props.deltaTime);
        gl.uniform4f(_this.shaderVariables.posUniVec4, 1, 1, 0, 0);
        gl.uniformMatrix4fv(_this.shaderVariables.worldUniMat4, false, _this.matrix); //gl.uniform4f(shaderVariables.colorUniVec4, color.r, color.g, color.b, color.a); 

        gl.drawArrays(gl.TRIANGLES, 0, _this.count);
      }
    };

    return _this;
  }

  return TexturedItem;
}(GameObject);

var SolidUntexturedModelList = /*#__PURE__*/function (_RenderableModelList) {
  _inherits(SolidUntexturedModelList, _RenderableModelList);

  var _super2 = _createSuper(SolidUntexturedModelList);

  // constructor(gl, shaderVariables, modelSource, textureURL, preScaler){
  function SolidUntexturedModelList(gl, shaderVariables, record, preScaler) {
    var _this2;

    _classCallCheck(this, SolidUntexturedModelList);

    _this2 = _super2.call(this, gl, shaderVariables, record.source, preScaler); //GLUtils.createTexture(gl, textureURL, (tex)=>{this.texture = tex});

    GLUtils.createTextureFromImg(gl, record.texImage, function (tex) {
      _this2.texture = tex;
    });

    _this2.onRender = function (gl, props) {
      GLUtils.setBuffer(gl, _this2.mesh.positionBuffer, _this2.shaderVariables.positionAttr, 3);
      GLUtils.setBuffer(gl, _this2.mesh.normBuffer, _this2.shaderVariables.normalAttr, 3);
      GLUtils.setBuffer(gl, _this2.mesh.texBuffer, _this2.shaderVariables.texAttr, 2);
      gl.bindTexture(gl.TEXTURE_2D, _this2.texture);
    };
    /*  this.onDelete = ()=>{
        this.mesh.deleteBuffers();
        gl.deleteTexture(this.texture);
        //deleteTexture
      }*/


    return _this2;
  }

  _createClass(SolidUntexturedModelList, [{
    key: "createStaticItem",
    value: function createStaticItem(matrix, maxVisibleDist) {
      return this.addChild(new TexturedItem(this.shaderVariables, this.mesh, matrix, maxVisibleDist));
    }
  }, {
    key: "createRotatingItem",
    value: function createRotatingItem(position, sx, sy, sz, color) {
      var el = this.addChild(new RenderableItem(this.shaderVariables, this.mesh, m4.identity(), color));
      el.position = position;
      el.sx = 0;
      el.sy = 0;
      el.sz = 0;

      el.onProcess = function (deltaTime) {
        var mt = m4.identity();
        mt = m4.translate(mt, el.position.x, el.position.y, el.position.z);
        el.sx += sx * deltaTime;
        el.sy += sy * deltaTime;
        el.sz += sz * deltaTime;
        mt = m4.xRotate(mt, el.sx);
        mt = m4.yRotate(mt, el.sy);
        mt = m4.zRotate(mt, el.sz);
        el.matrix = mt;
      };

      return el;
    }
  }, {
    key: "createMovingItem",
    value: function createMovingItem(posVector, speedVector, color) {
      var el = this.addChild(new RenderableItem(this.shaderVariables, this.mesh, m4.identity(), color));
      el.position = posVector.mul(1);
      el.speedVector = speedVector.mul(1);

      el.onProcess = function (deltaTime) {
        var mt = m4.identity();
        el.position = el.position.addVector(el.speedVector.mul(1)); //add deltaTime

        mt = m4.translate(mt, el.position.x, el.position.y, el.position.z);
        el.matrix = mt;
      };

      return el;
    }
  }]);

  return SolidUntexturedModelList;
}(RenderableModelList);

var SolidUntexturedShaderList = /*#__PURE__*/function (_RenderableShaderList) {
  _inherits(SolidUntexturedShaderList, _RenderableShaderList);

  var _super3 = _createSuper(SolidUntexturedShaderList);

  function SolidUntexturedShaderList(gl, shaderUnit) {
    var _this3;

    _classCallCheck(this, SolidUntexturedShaderList);

    _this3 = _super3.call(this, gl, shaderUnit);

    _this3.onRender = function (gl, props) {
      shaderUnit.initShader(gl, _this3.shaderProgram, _this3.shaderVariables);
      gl.uniformMatrix4fv(_this3.shaderVariables.viewUniMat4, false, props.viewMatrix);
    };

    return _this3;
  }

  _createClass(SolidUntexturedShaderList, [{
    key: "createModelList",
    value: function createModelList(record, preScaler) {
      return this.addChild(new SolidUntexturedModelList(this.gl, this.shaderVariables, record, preScaler));
    }
  }]);

  return SolidUntexturedShaderList;
}(RenderableShaderList);

module.exports = {
  SolidTexturedShaderList: SolidUntexturedShaderList,
  SolidTexturedModelList: SolidUntexturedModelList
};

/***/ }),

/***/ "./src/engine/solid-untextured.new.js":
/*!********************************************!*\
  !*** ./src/engine/solid-untextured.new.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var RenderableShaderList = __webpack_require__(/*! ./renderable-shader-list.new.js */ "./src/engine/renderable-shader-list.new.js");

var RenderableModelList = __webpack_require__(/*! ./renderable-model-list.new.js */ "./src/engine/renderable-model-list.new.js");

var RenderableItem = __webpack_require__(/*! ./renderable-item.new.js */ "./src/engine/renderable-item.new.js");

var GLUtils = __webpack_require__(/*! ../gl-utils.js */ "./src/gl-utils.js");

var SolidUntexturedModelList = /*#__PURE__*/function (_RenderableModelList) {
  _inherits(SolidUntexturedModelList, _RenderableModelList);

  var _super = _createSuper(SolidUntexturedModelList);

  function SolidUntexturedModelList(gl, shaderVariables, modelSource, preScaler) {
    var _this;

    _classCallCheck(this, SolidUntexturedModelList);

    _this = _super.call(this, gl, shaderVariables, modelSource, preScaler);

    _this.onRender = function (gl, props) {
      GLUtils.setBuffer(gl, _this.mesh.positionBuffer, _this.shaderVariables.positionAttr, 3);
      GLUtils.setBuffer(gl, _this.mesh.normBuffer, _this.shaderVariables.normalAttr, 3);
    };

    return _this;
  }

  _createClass(SolidUntexturedModelList, [{
    key: "createStaticItem",
    value: function createStaticItem(matrix, color, maxVisibleDist) {
      return this.addChild(new RenderableItem(this.shaderVariables, this.mesh, matrix, color, maxVisibleDist));
    }
  }, {
    key: "createRotatingItem",
    value: function createRotatingItem(position, sx, sy, sz, color) {
      var el = this.addChild(new RenderableItem(this.shaderVariables, this.mesh, m4.identity(), color));
      el.position = position;
      el.sx = 0;
      el.sy = 0;
      el.sz = 0;

      el.onProcess = function (deltaTime) {
        var mt = m4.identity();
        mt = m4.translate(mt, el.position.x, el.position.y, el.position.z);
        el.sx += sx * deltaTime;
        el.sy += sy * deltaTime;
        el.sz += sz * deltaTime;
        mt = m4.xRotate(mt, el.sx);
        mt = m4.yRotate(mt, el.sy);
        mt = m4.zRotate(mt, el.sz);
        el.matrix = mt;
      };

      return el;
    }
  }, {
    key: "createMovingItem",
    value: function createMovingItem(posVector, speedVector, color) {
      var el = this.addChild(new RenderableItem(this.shaderVariables, this.mesh, m4.identity(), color));
      el.position = posVector.mul(1);
      el.speedVector = speedVector.mul(1);

      el.onProcess = function (deltaTime) {
        var mt = m4.identity();
        el.position = el.position.addVector(el.speedVector.mul(1)); //add deltaTime

        mt = m4.translate(mt, el.position.x, el.position.y, el.position.z);
        el.matrix = mt;
      };

      return el;
    }
  }]);

  return SolidUntexturedModelList;
}(RenderableModelList);

var SolidUntexturedShaderList = /*#__PURE__*/function (_RenderableShaderList) {
  _inherits(SolidUntexturedShaderList, _RenderableShaderList);

  var _super2 = _createSuper(SolidUntexturedShaderList);

  function SolidUntexturedShaderList(gl, shaderUnit) {
    var _this2;

    _classCallCheck(this, SolidUntexturedShaderList);

    _this2 = _super2.call(this, gl, shaderUnit);

    _this2.onRender = function (gl, props) {
      shaderUnit.initShader(gl, _this2.shaderProgram, _this2.shaderVariables);
      gl.uniformMatrix4fv(_this2.shaderVariables.viewUniMat4, false, props.viewMatrix);
    };

    return _this2;
  }

  _createClass(SolidUntexturedShaderList, [{
    key: "createModelList",
    value: function createModelList(modelSource, preScaler) {
      return this.addChild(new SolidUntexturedModelList(this.gl, this.shaderVariables, modelSource, preScaler));
    }
  }]);

  return SolidUntexturedShaderList;
}(RenderableShaderList);

module.exports = {
  SolidUntexturedShaderList: SolidUntexturedShaderList,
  SolidUntexturedModelList: SolidUntexturedModelList
};

/***/ }),

/***/ "./src/engine/timer.new.js":
/*!*********************************!*\
  !*** ./src/engine/timer.new.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Timer = /*#__PURE__*/function (_GameObject) {
  _inherits(Timer, _GameObject);

  var _super = _createSuper(Timer);

  function Timer(interval, onTimeout) {
    var _this;

    _classCallCheck(this, Timer);

    _this = _super.call(this);
    _this.interval = interval;
    _this.counter = interval;

    _this.onProcess = function (deltaTime) {
      _this.counter -= deltaTime;

      if (calc.isTimeout(_this.counter)) {
        onTimeout();
        _this.counter = interval;
      }
    };

    return _this;
  }

  return Timer;
}(GameObject);

module.exports = Timer;

/***/ }),

/***/ "./src/engine/weapon.new.js":
/*!**********************************!*\
  !*** ./src/engine/weapon.new.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

//const Vector3d = require('./vector3d.dev.js');
var Utils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var bulletMaker = __webpack_require__(/*! ./bullet.gmob.js */ "./src/engine/bullet.gmob.js");

var Weapon = /*#__PURE__*/function () {
  function Weapon(world, shotTime, bulletLifeTime, bulletSpeed, soundClass) {
    var name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'gun';
    var bulletCount = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 100;
    var damage = arguments.length > 7 ? arguments[7] : undefined;

    _classCallCheck(this, Weapon);

    this.weaponName = name;
    this.bulletCount = bulletCount;
    this.damage = damage;
    this.initialShotTime = shotTime;
    this.shotTime = shotTime;
    this.bulletLifeTime = bulletLifeTime;
    this.bulletSpeed = bulletSpeed; //this.soundUrl = soundUrl;

    this.world = world; //if (soundUrl){
    //  Utils.preloadSoundUrl(soundUrl);
    //}

    this.sndClass = soundClass;
  }

  _createClass(Weapon, [{
    key: "shot",
    value: function shot(point, direction, playerPos) {
      if (calc.isTimeout(this.shotTime)) {
        if (this.bulletCount <= 0) {
          return;
        }

        this.bulletCount--; //this.world.createBullet(point, direction.mul(this.bulletSpeed), this.bulletLifeTime, false, this.weaponName);
        //console.log('blt ', Bullet);
        //new Bullet(this.world.game, point, direction.mul(this.bulletSpeed), this.bulletLifeTime, calc.makeNormRGBA(), this.weaponName, this.damage);

        if (this.weaponName == 'phaser') {
          bulletMaker.makeAnimatedBullet(this.world.game, point, 15, direction.mul(this.bulletSpeed), this.bulletLifeTime, this.weaponName, this.damage, true);
        }

        if (this.weaponName == 'laser') {
          bulletMaker.makeBoxBullet(this.world.game, point, direction.mul(this.bulletSpeed), this.bulletLifeTime, calc.makeNormRGBA(), this.weaponName, this.damage, false);
        }

        if (this.weaponName == 'auto') {
          var el = bulletMaker.makeAnimatedBullet(this.world.game, point, 5, direction.mul(this.bulletSpeed), this.bulletLifeTime, this.weaponName, this.damage, false);
          el.hitExplosionScale = 15;
        }

        if (this.weaponName == 'gun') {
          bulletMaker.makeAnimatedBullet(this.world.game, point, 15, direction.mul(this.bulletSpeed), this.bulletLifeTime, this.weaponName, this.damage, false);
        }

        if (this.weaponName == 'railgun') {
          var _el = bulletMaker.makeAnimatedBullet(this.world.game, point, 15, direction.mul(this.bulletSpeed), this.bulletLifeTime, this.weaponName, this.damage, false);

          _el.hitExplosionScale = 50;
        }

        this.shotTime = this.initialShotTime;

        if (this.sndClass) {
          var vol = 1;

          if (playerPos) {
            vol = 10 / point.subVector(playerPos).abs();
          }

          window.sndBase.playByClass(this.sndClass, vol); //Utils.playSoundUrl(this.soundUrl, vol); 
        }

        return true;
      }

      return false;
    }
  }, {
    key: "shotTo",
    value: function shotTo(gl, bulletList, pointA, pointB, playerPos) {
      return this.shot(gl, bulletList, pointA, pointB.subVector(pointA).normalize(), playerPos);
    }
  }, {
    key: "render",
    value: function render(deltaTime) {
      this.shotTime -= deltaTime;
    }
  }]);

  return Weapon;
}();

module.exports = Weapon;

/***/ }),

/***/ "./src/engine/world.new.js":
/*!*********************************!*\
  !*** ./src/engine/world.new.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var GameObject = __webpack_require__(/*! ./game-object.new.js */ "./src/engine/game-object.new.js");

var Physic = __webpack_require__(/*! ./physic.new.js */ "./src/engine/physic.new.js");

var getChunked = __webpack_require__(/*! ../chunked-mesh.func.js */ "./src/chunked-mesh.func.js");

var calc = __webpack_require__(/*! ../calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ../vector3d.dev.js */ "./src/vector3d.dev.js");

var solidUntexturedShaderUnit = __webpack_require__(/*! ./shaders/solid-untextured.shader.js */ "./src/engine/shaders/solid-untextured.shader.js");

var _require = __webpack_require__(/*! ./solid-untextured.new.js */ "./src/engine/solid-untextured.new.js"),
    SolidUntexturedShaderList = _require.SolidUntexturedShaderList;

var solidTexturedShaderUnit = __webpack_require__(/*! ./shaders/solid-textured.shader.js */ "./src/engine/shaders/solid-textured.shader.js");

var _require2 = __webpack_require__(/*! ./solid-textured.new.js */ "./src/engine/solid-textured.new.js"),
    SolidTexturedShaderList = _require2.SolidTexturedShaderList;

var skyboxShaderUnit = __webpack_require__(/*! ./shaders/skybox.shader.js */ "./src/engine/shaders/skybox.shader.js");

var _require3 = __webpack_require__(/*! ./skybox.new.js */ "./src/engine/skybox.new.js"),
    SkyboxShaderList = _require3.SkyboxShaderList;

var animatedShaderUnit = __webpack_require__(/*! ./shaders/ani-textured.shader.js */ "./src/engine/shaders/ani-textured.shader.js");

var _require4 = __webpack_require__(/*! ./ani-textured.new.js */ "./src/engine/ani-textured.new.js"),
    AnimatedShaderList = _require4.AnimatedShaderList;

var utils = __webpack_require__(/*! ../any.utils.js */ "./src/any.utils.js");

var World = /*#__PURE__*/function () {
  function World(gl, game) {
    var _this = this;

    _classCallCheck(this, World);

    //dynamic loaded res
    var skyboxModel = window.resBase.getByName('skybox');
    var bigModel = window.resBase.getByName('bigShip');
    var meteModel = window.resBase.getByName('mete');
    var boxModel = window.resBase.getByName('box').source; //const selfModel = window.gameResource.list[calc.rand(1)+game.props.shipIndex+1];

    /* const selfModels = [
       window.gameResource.list[1],
       window.gameResource.list[2],
       window.gameResource.list[3],
       window.gameResource.list[4],
     ];
      const ships = [
       window.gameResource.list[5],
       window.gameResource.list[6],
       window.gameResource.list[7],
       window.gameResource.list[8]
     ];*/

    var selfModels = [window.resBase.getByName('cab0'), window.resBase.getByName('cab1'), window.resBase.getByName('cab2'), window.resBase.getByName('cab3'), window.resBase.getByName('cab4')];
    var ships = [window.resBase.getByName('tie_interceptor'), window.resBase.getByName('tie_bomber'), window.resBase.getByName('tie_fighter'), window.resBase.getByName('z95_headhunter'), window.resBase.getByName('x-wing')];
    var marsModel = window.resBase.getByName('mars');
    var mercuryModel = window.resBase.getByName('mercury'); //

    console.log('making world');
    this.gl = gl;
    this.game = game;
    this.viewMatrix = m4.identity();
    this.skyboxShaderList = new SkyboxShaderList(gl, skyboxShaderUnit);
    this.skyboxModelList = this.skyboxShaderList.createModelList(skyboxModel);
    this.animatedShaderList = new AnimatedShaderList(gl, animatedShaderUnit);
    this.explosions = this.animatedShaderList.createModelList(window.resBase.getByName('explosion'));
    this.magics = this.animatedShaderList.createModelList(window.resBase.getByName('magic')); //this.magicSpheres = this.animatedShaderList.createModelList(marsModel.source, 'assets/textures/magic.png');

    this.magicFogSpheres = this.animatedShaderList.createModelList(window.resBase.getByName('fogmagic'));
    this.bulPlasm = this.animatedShaderList.createModelList(window.resBase.getByName('bulletSprite')); //making list for rendering with shader

    this.solidUntexturedShaderList = new SolidUntexturedShaderList(gl, solidUntexturedShaderUnit);
    this.solidTexturedShaderList = new SolidTexturedShaderList(gl, solidTexturedShaderUnit); //loading models and making lists

    this.tun1 = this.solidUntexturedShaderList.createModelList(window.resBase.getByName('tun1').source);
    this.tun2 = this.solidUntexturedShaderList.createModelList(window.resBase.getByName('tun2').source);
    this.meteModelList = this.solidTexturedShaderList.createModelList(meteModel, 1);
    this.mercuryModelList = this.solidTexturedShaderList.createModelList(mercuryModel, 1);
    this.marsModelList = this.solidTexturedShaderList.createModelList(marsModel, 1);
    this.boxModelList = this.solidUntexturedShaderList.createModelList(boxModel); // this.tieModelList = this.solidUntexturedShaderList.createModelList(rocketModel);
    // this.rocketList = this.solidUntexturedShaderList.createModelList(rocketModel1);

    this.selfModelLists = [];
    selfModels.forEach(function (it) {
      var model;

      if (it.tex) {
        model = _this.solidTexturedShaderList.createModelList(it);
      } else {
        model = _this.solidUntexturedShaderList.createModelList(it.source);
      }

      _this.selfModelLists.push(model);
    });
    /*if (selfModel.tex){
      this.selfModelList = this.solidTexturedShaderList.createModelList(selfModel);
    } else {
      this.selfModelList = this.solidUntexturedShaderList.createModelList(selfModel.source);  
    }*/

    this.bigModelList = this.solidTexturedShaderList.createModelList(bigModel); //, 'assets/textures/Trident_UV_Dekol_Color.png');

    this.shipLists = [];

    for (var i = 0; i < ships.length; i++) {
      var ship = this.solidTexturedShaderList.createModelList(ships[i]);
      this.shipLists.push(ship);
    } //Trident_UV_Dekol_Color.tif


    var chunkMesh = getChunked(gl, boxModel, 130, function (i) {
      var sz = 50;
      var sc = 0.3;
      mtx = m4.identity();
      mtx = m4.translate(mtx, calc.rand(sz) - sz / 2, calc.rand(sz) - sz / 2, calc.rand(sz) - sz / 2);
      mtx = m4.scale(mtx, sc, sc, sc);
      return mtx;
    });
    this.chunkList = this.solidUntexturedShaderList.createModelList(boxModel);
    this.chunkList.mesh = chunkMesh; //combine all list in root

    this.graphicList = new GameObject();
    this.graphicList.addChild(this.skyboxShaderList);
    this.graphicList.addChild(this.solidUntexturedShaderList);
    this.graphicList.addChild(this.solidTexturedShaderList);
    this.graphicList.addChild(this.animatedShaderList); //making physics

    this.physicsList = new GameObject(); //all game classes

    this.bulletList = new GameObject();
    this.breakableList = new GameObject();
    this.objectList = new GameObject();
  }

  _createClass(World, [{
    key: "clear",
    value: function clear() {
      this.graphicList.clear(); //this.graphicList.tryFilter();
      //this.objectList.clear();
    }
  }, {
    key: "createSkybox",
    value: function createSkybox() {
      var _this2 = this;

      var skyboxElement = this.skyboxModelList.createStaticItem(m4.identity());

      skyboxElement.onProcess = function (deltaTime) {
        var mt = m4.identity();

        var pos = _this2.game.player.camera.getPosVector();

        mt = m4.translate(mt, pos.x, pos.y, pos.z);
        mt = m4.scale(mt, 300, 300, 300);
        skyboxElement.matrix = mt;
      };

      return skyboxElement;
    }
  }, {
    key: "render",
    value: function render(viewMatrix, deltaTime) {
      this.graphicList.process(deltaTime);
      this.objectList.process(deltaTime);
      this.bulletList.tryFilter();
      this.breakableList.tryFilter();
      this.bulletList.react(this.breakableList);
      this.objectList.react(this.breakableList); //this.bulletList.react(this.objectList);

      this.graphicList.render(this.gl, {
        viewMatrix: viewMatrix,
        deltaTime: deltaTime,
        game: this.game
      });
    }
  }, {
    key: "createExplosion",
    value: function createExplosion(pos, scale) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      var el = this.explosions.createStaticItem(mt, 5, 4, 0.05);

      el.animation.onFinished = function () {
        el.deleteSelf();
      };
    }
  }, {
    key: "createMagic",
    value: function createMagic(pos, scale, single) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      var el = this.magics.createStaticItem(mt, 5, 5, 0.05);

      if (single) {
        el.animation.onFinished = function () {
          el.deleteSelf();
        };
      }

      return el;
    }
  }, {
    key: "createMagicSphere",
    value: function createMagicSphere(pos, scale, single) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      var el = this.magicSpheres.createStaticItem(mt, 5, 5, 0.05);

      if (single) {
        el.animation.onFinished = function () {
          el.deleteSelf();
        };
      }

      return el;
    }
  }, {
    key: "createFogMagicSphere",
    value: function createFogMagicSphere(pos, scale, single) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      var el = this.magicFogSpheres.createStaticItem(mt, 5, 1, 0.10);

      if (single) {
        el.animation.onFinished = function () {
          el.deleteSelf();
        };
      }

      return el;
    } /// generics

  }, {
    key: "createGenericAnimated",
    value: function createGenericAnimated(modelList, pos, scale, xmax, ymax, frametime, single) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      var el = modelList.createStaticItem(mt, xmax, ymax, frametime);

      if (single) {
        el.animation.onFinished = function () {
          el.deleteSelf();
        };
      }

      return el;
    }
  }, {
    key: "createGenericAnimatedAzi",
    value: function createGenericAnimatedAzi(modelList, pos, scale, azi, theta, xmax, ymax, frametime, single) {
      var mt = m4.identity();
      mt = m4.translate(mt, pos.x, pos.y, pos.z);
      mt = m4.scale(mt, scale, scale, scale);
      mt = m4.zRotate(mt, azi);
      mt = m4.xRotate(mt, theta);
      var el = modelList.createStaticItem(mt, xmax, ymax, frametime);

      if (single) {
        el.animation.onFinished = function () {
          el.deleteSelf();
        };
      }

      return el;
    } //////

  }, {
    key: "createBreakable",
    value: function createBreakable(pos, scale, color) {
      var niMat = m4.identity();
      niMat = m4.translate(niMat, pos.x, pos.y, pos.z);
      niMat = m4.scale(niMat, scale, scale, scale);
      var el = this.boxModelList.createStaticItem(niMat, color);
      el.type = 'breakable'; //el.scale=scale;

      el.hitTransformed = el.meshPointer.getTransformedVertexList(el.matrix);
      el.hitPosition = calc.getPosFromMatrix(el.matrix);
      el.hitDist = el.meshPointer.maxDistance * scale; //el.pos = pos;

      this.breakableList.addChild(el);
      return el;
    }
  }, {
    key: "createSolid",
    value: function createSolid(pos, scale, color, bm) {
      var niMat = m4.identity();
      niMat = m4.translate(niMat, pos.x, pos.y, pos.z);
      niMat = m4.scale(niMat, scale, scale, scale);

      if (!bm) {
        ///kostil'
        var el = this.boxModelList.createStaticItem(niMat, color);
      } else {
        var el = this.meteModelList.createStaticItem(niMat, color);
      }

      el.type = 'solid';
      el.hitTransformed = el.meshPointer.getTransformedVertexList(el.matrix);
      el.hitPosition = calc.getPosFromMatrix(el.matrix);
      el.hitDist = el.meshPointer.maxDistance * scale;
      el.physicList = new Physic(el.hitTransformed); //el.pos = pos;

      this.breakableList.addChild(el);
      return el;
    }
  }, {
    key: "createDanger",
    value: function createDanger(pos, scale, color) {
      var niMat = m4.identity();
      niMat = m4.translate(niMat, pos.x, pos.y, pos.z);
      niMat = m4.scale(niMat, scale, scale, scale);
      var el = this.boxModelList.createStaticItem(niMat, color);
      el.type = 'danger';
      el.hitTransformed = el.meshPointer.getTransformedVertexList(el.matrix);
      el.hitPosition = calc.getPosFromMatrix(el.matrix);
      el.hitDist = el.meshPointer.maxDistance * scale; //el.pos = pos;

      this.breakableList.addChild(el);
      return el;
    }
  }]);

  return World;
}();

module.exports = World;

/***/ }),

/***/ "./src/game-menu.component.js":
/*!************************************!*\
  !*** ./src/game-menu.component.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var Pager = __webpack_require__(/*! ./control-js/pager.component.js */ "./src/control-js/pager.component.js");

var options = __webpack_require__(/*! ./options.utils.js */ "./src/options.utils.js");

var joyUtils = __webpack_require__(/*! ./joystick.component.js */ "./src/joystick.component.js");

var GameMenu = /*#__PURE__*/function (_Control) {
  _inherits(GameMenu, _Control);

  var _super = _createSuper(GameMenu);

  function GameMenu(parentNode, glCanvas) {
    var _this;

    _classCallCheck(this, GameMenu);

    _this = _super.call(this, parentNode, 'div', '', '', function () {});
    _this.glCanvas = glCanvas; //this.isActive = true;

    _this.menu = new Pager(_this.node, '', 'menu_background');
    _this.mainMenu = _this.menu.addPage('Main Menu');
    _this.optionsMenu = _this.menu.addPage('Options');
    _this.missionMenu = _this.menu.addPage('Select Mission');
    _this.startMenu = _this.menu.addPage('Start Mission');
    _this.gameMenu = _this.menu.addPage('Paused');
    _this.gameOverMenu = _this.menu.addPage('Game Over');
    _this.gameWinMenu = _this.menu.addPage('Mission Complete'); //this.detailMenu = this.menu.addPage('Detail');

    _this.menu.selectPage(_this.mainMenu);

    _this.missionOptions = {
      missionName: '1',
      shipIndex: 0
    };
    _this.startButton = new Control(_this.mainMenu.node, 'div', 'menu_item', 'start new', function () {
      _this.menu.selectPage(_this.missionMenu);
    }); ///options

    var curOptions = options.loadOptions();
    _this.optionsButton = new Control(_this.mainMenu.node, 'div', 'menu_item', 'options', function () {
      _this.menu.selectPage(_this.optionsMenu);
    });
    _this.optionMouseSense = new Control(_this.optionsMenu.node, 'input', 'menu_item');
    _this.optionMouseSense.node.type = 'range';
    _this.optionMouseSense.node.min = 1;
    _this.optionMouseSense.node.max = 100;
    _this.optionMouseSense.node.value = curOptions.mouseSens;

    _this.optionMouseSense.node.addEventListener('change', function (e) {
      curOptions.mouseSens = _this.optionMouseSense.node.value;
    });

    new Control(_this.optionsMenu.node, 'div', 'menu_item', 'to main menu', function () {
      options.saveOptions(curOptions);

      _this.menu.selectPage(_this.mainMenu);
    }); ///

    _this.exitButton = new Control(_this.mainMenu.node, 'div', 'menu_item', 'exit', function () {
      if (document.fullscreenElement != null) {
        document.exitFullscreen();
      }
    });
    var missionCount = 5;

    var _loop = function _loop(i) {
      new Control(_this.missionMenu.node, 'div', 'menu_item', 'mission' + (i + 1), function () {
        _this.glCanvas.start();

        _this.glCanvas.game.loadMission('garage', _this.missionOptions);

        _this.missionOptions.missionName = (i + 1).toString();
        _this.glCanvas.useControls = false;

        _this.menu.selectPage(_this.startMenu);
      });
    };

    for (var i = 0; i < missionCount; i++) {
      _loop(i);
    }

    _this.touchPad = new joyUtils.TouchPad(_this.startMenu.node, function () {});
    _this.touchPad.node.className = 'but fullScreenTouch';
    _this.prevShip = new Control(_this.startMenu.node, 'div', 'menu_item', 'prevShip', function () {});
    _this.nextShip = new Control(_this.startMenu.node, 'div', 'menu_item', 'nextShip', function () {});
    _this.startMissionButton = new Control(_this.startMenu.node, 'div', 'menu_item menu_item_clikit', 'Fight!', function () {
      //this.glCanvas.start();
      _this.glCanvas.useControls = true; //this.glCanvas.stop();
      //this.glCanvas.start();

      _this.glCanvas.game.loadMission(_this.missionOptions.missionName, _this.missionOptions);

      _this.menu.selectPage(_this.gameMenu);

      _this.deactivate(true);
    });
    new Control(_this.startMenu.node, 'div', 'menu_item', 'to main menu', function () {
      _this.activate();

      _this.menu.selectPage(_this.mainMenu);
    });
    /* this.m1Button = new Control(this.missionMenu.node, 'div', 'menu_item', 'mission1',()=>{
       this.menu.selectPage(this.startMenu);
        this.glCanvas.start();
       this.glCanvas.game.loadMission('1');
       this.menu.selectPage(this.gameMenu);
       this.deactivate(true);
     });
    
     this.m2Button = new Control(this.missionMenu.node, 'div', 'menu_item', 'mission2',()=>{
       this.glCanvas.start();
       this.glCanvas.game.loadMission('2');
       this.menu.selectPage(this.gameMenu);
       this.deactivate(true);
     });
      this.m3Button = new Control(this.missionMenu.node, 'div', 'menu_item', 'mission3',()=>{
       this.glCanvas.start();
       this.glCanvas.game.loadMission('3');
       this.menu.selectPage(this.gameMenu);
       this.deactivate(true);
     });
      this.m4Button = new Control(this.missionMenu.node, 'div', 'menu_item', 'mission4',()=>{
       this.glCanvas.start();
       this.glCanvas.game.loadMission('4');
       this.menu.selectPage(this.gameMenu);
       this.deactivate(true);
     });
     */

    _this.mainMenuButtonM = new Control(_this.missionMenu.node, 'div', 'menu_item', 'to main menu', function () {
      _this.menu.selectPage(_this.mainMenu);
    });
    _this.mainMenuButtonO = new Control(_this.gameOverMenu.node, 'div', 'menu_item', 'to main menu', function () {
      _this.menu.selectPage(_this.mainMenu);
    });
    _this.mainMenuButtonW = new Control(_this.gameWinMenu.node, 'div', 'menu_item', 'to main menu', function () {
      _this.menu.selectPage(_this.mainMenu);
    });
    _this.resumeButton = new Control(_this.gameMenu.node, 'div', 'menu_item', 'continue', function () {
      _this.deactivate();
    });
    _this.mainMenuButton = new Control(_this.gameMenu.node, 'div', 'menu_item', 'to main menu', function () {
      _this.menu.selectPage(_this.mainMenu);
    });

    _this.refresh();

    return _this;
  }

  _createClass(GameMenu, [{
    key: "activate",
    value: function activate() {
      if (this.glCanvas.isStarted) {
        this.glCanvas.pause();
      }

      this.glCanvas.gamePanel.hide();
      this.isActive = true;
      this.refresh();
    }
  }, {
    key: "deactivate",
    value: function deactivate(res) {
      if (!res) {
        this.glCanvas.resume();
      }

      this.glCanvas.gamePanel.show();
      this.isActive = false;
      this.refresh();
    }
  }, {
    key: "refresh",
    value: function refresh() {
      this.node.style.cssText = "\n      position:absolute;\n      width:".concat(this.glCanvas.node.clientWidth, "px;\n      height:").concat(this.glCanvas.node.clientHeight, "px;\n      top:0px;\n      left:0px;\n      display:").concat(this.isActive ? 'block' : 'none', ";\n      z-index:10;\n    ");

      if (this.glCanvas.isPaused) {
        this.resumeButton.show();
      } else {
        this.resumeButton.hide();
      }
    }
  }]);

  return GameMenu;
}(Control);

module.exports = GameMenu;

/***/ }),

/***/ "./src/game-panel.component.js":
/*!*************************************!*\
  !*** ./src/game-panel.component.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var _require = __webpack_require__(/*! ./joystick.component.js */ "./src/joystick.component.js"),
    Joy = _require.Joy;

var GameMenu = /*#__PURE__*/function (_Control) {
  _inherits(GameMenu, _Control);

  var _super = _createSuper(GameMenu);

  function GameMenu(parentNode, glCanvas) {
    var _this;

    _classCallCheck(this, GameMenu);

    _this = _super.call(this, parentNode, 'div', 'overlay_panel', '', function () {});
    _this.center = new Control(_this.node, 'div', 'overlay_center');
    _this.view = new Control(_this.node, 'div', 'view_panel');
    _this.tool = new Control(_this.node, 'div', 'machine_panel');
    _this.joy = new Joy(_this.node, glCanvas, function (dx, dy, cx, cy) {
      //glCanvas.game.player.camera.rotateCam(dx, dy, false);
      glCanvas.game.player.camera.moc = true;
      glCanvas.game.player.camera.roX = cx * 3;
      glCanvas.game.player.camera.roY = cy * 3;
    }, function (dx, dy, cx, cy) {
      //glCanvas.game.player.camera.rotateCam(dx, dy, false);
      glCanvas.game.player.camera.moc = true;
      glCanvas.game.player.camera.crn = cx * 0.004;
      glCanvas.game.player.camera.acl = -cy * 0.1;
    });

    _this.joy.hide();

    _this.group = new Control(_this.tool.node, 'div', 'panel_group', '');
    _this.health = new Control(_this.group.node, 'div', 'panel_item', 'health: ');
    _this.bullets = new Control(_this.group.node, 'div', 'panel_item', 'bullets: ');
    _this.weapon = new Control(_this.group.node, 'div', 'panel_item', 'bullets: ');
    _this.shield = new Control(_this.group.node, 'div', 'panel_item', 'shield: ');
    _this.speed = new Control(_this.group.node, 'div', 'panel_item', 'speed: ');
    _this.missionTarget = new Control(_this.tool.node, 'div', 'panel_item', 'targets: ');
    return _this;
  }

  return GameMenu;
}(Control);

module.exports = GameMenu;

/***/ }),

/***/ "./src/gl-canvas.component.js":
/*!************************************!*\
  !*** ./src/gl-canvas.component.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var Controller = __webpack_require__(/*! ./controller.object.js */ "./src/controller.object.js");

var GameMenu = __webpack_require__(/*! ./game-menu.component.js */ "./src/game-menu.component.js");

var GamePanel = __webpack_require__(/*! ./game-panel.component.js */ "./src/game-panel.component.js");

var Game = __webpack_require__(/*! ./engine/game.new.js */ "./src/engine/game.new.js");

var Timer = __webpack_require__(/*! ./engine/timer.new.js */ "./src/engine/timer.new.js");

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

var GLCanvas = /*#__PURE__*/function (_Control) {
  _inherits(GLCanvas, _Control);

  var _super = _createSuper(GLCanvas);

  function GLCanvas(parentNode, width, height) {
    var _this;

    _classCallCheck(this, GLCanvas);

    _this = _super.call(this, parentNode, 'canvas', 'canvas_style', '', function () {//this.node.requestPointerLock();
    });
    parentNode.style.cssText = 'position:relative';
    _this.stWidth = width;
    _this.stHeight = height;
    _this.node.width = width;
    _this.node.height = height;
    _this.glContext = _this.node.getContext('webgl');
    _this.isStarted = false;
    _this.useControls = true;
    _this.keyboardState = {};
    _this.joyShow = false;
    _this.infoTimer = new Timer(0.1, function () {
      _this.info.node.textContent = 'FPS: ' + Math.round(1 / _this.averageRenderTime);
    });
    _this.averageRenderTime = 0;
    _this.info = new Control(parentNode, 'div');
    _this.fullScreenButton = new Control(parentNode, 'div', 'fullscreen_button', 'fullScreen', function () {
      parentNode.requestFullscreen();
    });
    _this.joyButton = new Control(parentNode, 'div', 'fullscreen_button', 'joystick', function () {
      _this.joyShow = !_this.joyShow;

      if (!_this.joyShow) {
        _this.gamePanel.joy.hide();
      } else {
        _this.gamePanel.joy.show();
      }
    });
    parentNode.addEventListener('fullscreenchange', function (e) {
      if (document.fullscreen) {
        _this.node.width = screen.width;
        _this.node.height = screen.height;

        _this.overlayRefresh();

        _this.menuRefresh();
      } else {
        _this.node.width = _this.stWidth;
        _this.node.height = _this.stHeight;

        _this.overlayRefresh();

        _this.menuRefresh();
      }
    });
    _this.overlay = new Control(parentNode, 'div', '', '', function () {
      if (!_this.menu.isActive) {
        if (!_this.joyShow) {
          _this.node.requestPointerLock();
        }
      }
    });

    _this.overlayRefresh();

    _this.gamePanel = new GamePanel(_this.overlay.node, _assertThisInitialized(_this));
    _this.menu = new GameMenu(parentNode, _assertThisInitialized(_this));

    _this.menu.activate();

    _this.menuRefresh();

    return _this;
  }

  _createClass(GLCanvas, [{
    key: "overlayRefresh",
    value: function overlayRefresh() {
      this.overlay.node.style.cssText = "\n      position:absolute;\n      width:".concat(this.node.clientWidth, "px;\n      height:").concat(this.node.clientHeight, "px;\n      top:0px;\n      left:0px;\n    ");
    }
  }, {
    key: "menuRefresh",
    value: function menuRefresh() {
      this.menu.refresh();
    }
  }, {
    key: "start",
    value: function start(res) {
      var _this2 = this;

      this.isPaused = false;
      this.isStarted = true;

      if (!res) {
        this.gamePanel.view.clear();
        glInitialize(this);
      } //let lastTime = Date.now();


      var drawScene = function drawScene(currentTime) {
        currentTime *= 0.001;

        if (!_this2.lastTime) {
          _this2.lastTime = currentTime;
        }

        ;
        var deltaTime = currentTime - _this2.lastTime;
        _this2.lastTime = currentTime;
        glRender(_this2, deltaTime);

        if (_this2.isStarted) {
          requestAnimationFrame(drawScene);
        }
      };

      requestAnimationFrame(drawScene);
    }
  }, {
    key: "stop",
    value: function stop() {
      this.isStarted = false;
      this.isPaused = false;
      this.lastTime = undefined;
    }
  }, {
    key: "pause",
    value: function pause() {
      this.isStarted = false;
      this.isPaused = true;
      this.lastTime = undefined;
    }
  }, {
    key: "resume",
    value: function resume() {
      this.lastTime = undefined;
      this.start(true);
    }
  }, {
    key: "setController",
    value: function setController() {
      _setController(this);
    }
  }]);

  return GLCanvas;
}(Control);

function _setController(glCanvas) {
  glCanvas.node.addEventListener('mouseup', function (e) {
    Controller.mouseUpHandler(glCanvas, e);
  });
  glCanvas.node.addEventListener('mousedown', function (e) {
    Controller.mouseDownHandler(glCanvas, e);
  });
  glCanvas.node.addEventListener('mousemove', function (e) {
    Controller.mouseMoveHandler(glCanvas, e.movementX, e.movementY);
  });
  document.addEventListener('keydown', function (e) {
    e.preventDefault();
    Controller.keyDownHandler(glCanvas, e);
  });
  document.addEventListener('keyup', function (e) {
    e.preventDefault();
    Controller.keyUpHandler(glCanvas, e);
  });
}

function glInitialize(glCanvas) {
  if (glCanvas.game) {// glCanvas.game.clear();
  }

  glCanvas.game = new Game(glCanvas.glContext, glCanvas);
}

function glRender(glCanvas, deltaTime) {
  if (deltaTime < 1000 && deltaTime > 0) {
    glCanvas.averageRenderTime = (glCanvas.averageRenderTime * 31 + deltaTime) / 32;
  }

  glCanvas.infoTimer.process(deltaTime); //glCanvas.info.node.textContent = 'FPS: '+ Math.round(1/glCanvas.averageRenderTime);

  var aspect = glCanvas.glContext.canvas.clientWidth / glCanvas.glContext.canvas.clientHeight;
  glCanvas.game.render(aspect, deltaTime);
}

module.exports = GLCanvas;

/***/ }),

/***/ "./src/gl-utils.js":
/*!*************************!*\
  !*** ./src/gl-utils.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

function createShader(gl, type, source) {
  var shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

  if (success) {
    return shader;
  }

  console.log(gl.getShaderInfoLog(shader));
  gl.deleteShader(shader);
  return false;
}

function createProgram(gl, vertexShader, fragmentShader) {
  var program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  var success = gl.getProgramParameter(program, gl.LINK_STATUS);

  if (success) {
    return program;
  }

  console.log(gl.getProgramInfoLog(program));
  gl.deleteProgram(program);
  return false;
}

function createShaderFromSource(gl, vertexShaderSource, fragmentShaderSource) {
  var vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
  var fragmentShader = createShader(gl, gl.FRAGMENT_SHADER, fragmentShaderSource);
  var program = createProgram(gl, vertexShader, fragmentShader);

  if (program) {
    return program;
  }

  return false;
}

function isPowerOf2(value) {
  return (value & value - 1) == 0;
}

function createTexture(gl, textureUrl, onLoad) {
  // Create a texture.
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture); // Fill the texture with a 1x1 blue pixel.

  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255])); // Asynchronously load an image
  //var image = new Image();

  var image = document.createElement('img'); //image.style.cssText ='display:none';

  image.crossOrigin = ''; //document.body.appendChild(image);

  image.addEventListener('load', function () {
    // Now that the image has loaded make copy it to the texture.
    gl.bindTexture(gl.TEXTURE_2D, texture);
    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // проверяем, что размер изображения равен степени двойки в обоих измерениях

    if (isPowerOf2(image.width) && isPowerOf2(image.height)) {
      // Да, степень двойки. Генерируем мипмап.
      gl.generateMipmap(gl.TEXTURE_2D);
    } else {
      // Нет, это не степень двойки. Отключаем мипмапы и устанавливаем режим CLAMP_TO_EDGE
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    }

    onLoad(texture);
  });
  image.src = textureUrl;
}

function createTextureFromImg(gl, imgElement, onLoad) {
  // Create a texture.
  var image = imgElement;
  var texture = gl.createTexture();
  gl.bindTexture(gl.TEXTURE_2D, texture); // Fill the texture with a 1x1 blue pixel.

  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array([0, 0, 255, 255])); // Asynchronously load an image
  //var image = new Image();
  //let image = document.createElement('img');
  //image.style.cssText ='display:none';
  //image.crossOrigin ='';
  //document.body.appendChild(image);
  //image.addEventListener('load', function() {
  // Now that the image has loaded make copy it to the texture.

  gl.bindTexture(gl.TEXTURE_2D, texture);
  gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, image); // проверяем, что размер изображения равен степени двойки в обоих измерениях

  if (isPowerOf2(image.width) && isPowerOf2(image.height)) {
    // Да, степень двойки. Генерируем мипмап.
    gl.generateMipmap(gl.TEXTURE_2D);
  } else {
    // Нет, это не степень двойки. Отключаем мипмапы и устанавливаем режим CLAMP_TO_EDGE
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
  }

  onLoad(texture); // });
}

function createBuffer(gl, list) {
  var positionBuffer = gl.createBuffer();
  gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
  gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(list), gl.STATIC_DRAW);
  return positionBuffer;
}

function setBuffer(gl, buffer, location, size) {
  gl.bindBuffer(gl.ARRAY_BUFFER, buffer); // Указываем атрибуту, как получать данные от positionBuffer (ARRAY_BUFFER)
  //var size_ = size;          // 2 компоненты на итерацию

  var type = gl.FLOAT; // наши данные - 32-битные числа с плавающей точкой

  var normalize = false; // не нормализовать данные

  var stride = 0; // 0 = перемещаться на size * sizeof(type) каждую итерацию для получения следующего положения

  var offset = 0; // начинать с начала буфера

  gl.vertexAttribPointer(location, size, type, normalize, stride, offset);
}

module.exports = {
  createShader: createShader,
  createProgram: createProgram,
  createShaderFromSource: createShaderFromSource,
  createTexture: createTexture,
  createTextureFromImg: createTextureFromImg,
  createBuffer: createBuffer,
  setBuffer: setBuffer
};

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _require = __webpack_require__(/*! ./app.js */ "./src/app.js"),
    App = _require.App;

var mainNode = document.querySelector('#app-main');
var app = new App(mainNode);
window.app = app; // allow browser console access

/***/ }),

/***/ "./src/joystick.component.js":
/*!***********************************!*\
  !*** ./src/joystick.component.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var Joy = /*#__PURE__*/function (_Control) {
  _inherits(Joy, _Control);

  var _super = _createSuper(Joy);

  function Joy(parentNode, glCanvas, onChange, onChangeLeft) {
    var _this;

    _classCallCheck(this, Joy);

    _this = _super.call(this, parentNode, 'div', 'joy_panel', '');
    var headPanel = new Control(_this.node, 'div', 'joy_panel');
    headPanel.node.style.cssText = 'height:30px; top:0px';
    _this.menuButton = new TouchButton(headPanel.node, 'butg', function (st) {
      if (!glCanvas.menu.isActive) {
        glCanvas.menu.activate();
        glCanvas.keyboardState.shot = false;
        document.exitPointerLock();
      }
    });
    _this.menuButton.node.style.cssText = 'width:30px';
    var mainPanel = new Control(_this.node, 'div', 'joy_panel');
    mainPanel.node.style.cssText = 'height:calc(100% - 30px - 100px); top:30px';
    var leftGroup = new Control(mainPanel.node, 'div', 'but_group');
    leftGroup.node.style.cssText = 'justify-content: flex-start;';
    var rightGroup = new Control(mainPanel.node, 'div', 'but_group');
    rightGroup.node.style.cssText = 'justify-content: flex-end;';
    var rightSubGroup = new Control(rightGroup.node, 'div', 'but_subgroup');
    var weaponSubGroup = new Control(leftGroup.node, 'div', 'but_subgroup');

    var _loop = function _loop(i) {
      new TouchButton(weaponSubGroup.node, 'butg', function (st) {
        glCanvas.game.player.setWeapon(i + 1);
      });
    };

    for (var i = 0; i < 4; i++) {
      _loop(i);
    }
    /*    let sub1 = new Control(leftGroup.node, 'div', 'but_subgroup');
    
        this.speedButton = new TouchButton (sub1.node, 'butg', (st)=>{
          glCanvas.keyboardState.forward = st;  
        });
    
        let sub2 = new Control(leftGroup.node, 'div', 'but_subgroup');
        this.leftButton = new TouchButton (sub2.node, 'butg', (st)=>{
          glCanvas.keyboardState.crenleft = st;  
        });
    
        this.rightButton = new TouchButton (sub2.node, 'butg', (st)=>{
          glCanvas.keyboardState.crenright = st;  
        });
    
        let sub3 = new Control(leftGroup.node, 'div', 'but_subgroup');
        this.stopButton = new TouchButton (sub3.node, 'butg', (st)=>{
          glCanvas.keyboardState.backward = st;  
        });
    
        this.shotButton = new TouchButton (this.node, 'but', (st)=>{
          glCanvas.keyboardState.shot = st;  
        });*/


    _this.leftPad = new TouchPad(leftGroup.node, onChangeLeft);
    _this.touchPad = new TouchPad(rightGroup.node, onChange);
    var sub1 = new Control(leftGroup.node, 'div', 'but_subgroup');
    _this.shotButton = new TouchButton(sub1.node, 'butg', function (st) {
      glCanvas.keyboardState.shot = st;
    });
    _this.shotButton.node.style.cssText = 'width:100%';
    _this.shieldButton = new TouchButton(sub1.node, 'butg', function (st) {
      glCanvas.keyboardState.space = st;
    });
    _this.shieldButton.node.style.cssText = 'width:100%';
    return _this;
  }

  return Joy;
}(Control);

var TouchButton = /*#__PURE__*/function (_Control2) {
  _inherits(TouchButton, _Control2);

  var _super2 = _createSuper(TouchButton);

  function TouchButton(parentNode, className, onChange) {
    var _this2;

    _classCallCheck(this, TouchButton);

    _this2 = _super2.call(this, parentNode, 'div', className || 'but', '');
    _this2.onChange = onChange;

    var sh = _assertThisInitialized(_this2);

    sh.node.addEventListener('mousedown', function (e) {
      e.preventDefault();

      _this2.onChange(true); //glCanvas.keyboardState.shot = true;

    });
    sh.node.addEventListener('mouseup', function (e) {
      e.preventDefault();

      _this2.onChange(false);
    });
    sh.node.addEventListener('touchstart', function (e) {
      e.preventDefault();

      _this2.onChange(true); //glCanvas.keyboardState.shot = true;

    });
    sh.node.addEventListener('touchend', function (e) {
      e.preventDefault();

      _this2.onChange(false);
    });
    return _this2;
  }

  return TouchButton;
}(Control);

var TouchPad = /*#__PURE__*/function (_Control3) {
  _inherits(TouchPad, _Control3);

  var _super3 = _createSuper(TouchPad);

  function TouchPad(parentNode, onChange, onClick) {
    var _this3;

    _classCallCheck(this, TouchPad);

    _this3 = _super3.call(this, parentNode, 'div', 'but');

    var but = _assertThisInitialized(_this3); //let but = new Control(this.node, 'div', 'but');


    var lx = 0;
    var ly = 0;
    var ax = 0;
    var ay = 0;
    var sx, sy;
    var cx, cy;
    var lts;
    var touchIndex = -1;
    _this3.onChange = onChange;
    var tst;
    var downed = false; // but.node.addEventListener('click', (e)=>{
    //   onClick();
    //});

    but.node.addEventListener('mousedown', function (e) {
      if (!(e.buttons == 1)) {
        return;
      }

      e.preventDefault();
      var zt = e;
      downed = true;

      if (zt) {
        sx = zt.clientX;
        sy = zt.clientY;

        _this3.onChange(0, 0, 0, 0);
      }

      lts = undefined;
    });

    var startHandler = function startHandler(e) {
      e.preventDefault();
      var br = but.node.getBoundingClientRect();
      var it;

      for (var i = 0; i < e.touches.length; i++) {
        it = e.touches[i];

        if (inBox(it.clientX, it.clientY, br)) {
          touchIndex = i;
          break;
        }

        ;
      }

      var zt = e.touches[touchIndex];

      if (zt) {
        sx = zt.clientX;
        sy = zt.clientY;

        _this3.onChange(0, 0, 0, 0);
      }

      lts = undefined;
    };

    var endHandler = function endHandler(e) {
      e.preventDefault();

      _this3.onChange(0, 0, 0, 0);

      lts = undefined;
      downed = false;
    };

    but.node.addEventListener('touchstart', startHandler);
    but.node.addEventListener('touchend', endHandler);
    document.addEventListener('mouseup', function (e) {
      if (downed) {
        endHandler(e);
      }
    });
    but.node.addEventListener('touchcancel', endHandler);
    but.node.addEventListener('touchmove', function (e) {
      e.preventDefault();
      var br = but.node.getBoundingClientRect();
      var zt = e.touches[touchIndex]; //but.node.textContent = e.touches.length;
      // console.log (e);

      if (zt) {
        lx = ax;
        ly = ay;

        if (!lts) {
          lts = e.timeStamp;
          ly = zt.clientY - br.top;
          lx = zt.clientX - br.left;
        }

        ay = zt.clientY - br.top;
        ax = zt.clientX - br.left;
        cx = -sx + zt.clientX;
        cy = -sy + zt.clientY;
        var dt = e.timeStamp - lts;
        var dx = (ax - lx) / dt;
        var dy = (ay - ly) / dt;
        var sc = 0.00031;
        var scc = 2;

        if (Math.abs(dx) < 0.1 && Math.abs(dy) < 0.1) {
          _this3.onChange(dx / sc, dy / sc, cx * scc, cy * scc);
        }
      }
    });
    but.node.addEventListener('mousemove', function (e) {
      e.preventDefault();
      var br = but.node.getBoundingClientRect();
      var zt = e; //but.node.textContent = e.touches.length;
      // console.log (e);

      if (zt && downed) {
        lx = ax;
        ly = ay;

        if (!lts) {
          lts = e.timeStamp;
          ly = zt.clientY - br.top;
          lx = zt.clientX - br.left;
        }

        ay = zt.clientY - br.top;
        ax = zt.clientX - br.left;
        cx = -sx + zt.clientX;
        cy = -sy + zt.clientY;
        var dt = e.timeStamp - lts;
        var dx = (ax - lx) / dt;
        var dy = (ay - ly) / dt;
        var sc = 0.00031;
        var scc = 2;

        if (Math.abs(dx) < 0.1 && Math.abs(dy) < 0.1) {
          _this3.onChange(dx / sc, dy / sc, cx * scc, cy * scc);
        }
      }
    });
    return _this3;
  }

  return TouchPad;
}(Control);

function inBox(x, y, rect) {
  return y > rect.top && x > rect.left && y < rect.bottom && x < rect.right;
}

module.exports = {
  Joy: Joy,
  TouchPad: TouchPad,
  TouchButton: TouchButton
};

/***/ }),

/***/ "./src/mesh.object.js":
/*!****************************!*\
  !*** ./src/mesh.object.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

var Vector3d = __webpack_require__(/*! ./vector3d.dev.js */ "./src/vector3d.dev.js");

var GLUtils = __webpack_require__(/*! ./gl-utils.js */ "./src/gl-utils.js");

var ObjUtils = __webpack_require__(/*! ./obj-loader.utils.js */ "./src/obj-loader.utils.js");

var Mesh = /*#__PURE__*/function () {
  function Mesh(gl) {
    _classCallCheck(this, Mesh);

    this.gl = gl;
    this.maxDistance = 0;
  }

  _createClass(Mesh, [{
    key: "loadFromSource",
    value: function loadFromSource(modelSource, preScaler) {
      var modelObject = ObjUtils.getModList(modelSource, false, preScaler);
      this.vertexList = modelObject.triangleList;
      this.normalList = modelObject.normalList;
      this.texList = modelObject.texList;
      this.maxDistance = getMaxDistance(this.vertexList); //this.center = this.getCenter();

      this.makeBuffers();
      return this;
    }
  }, {
    key: "loadFromLists",
    value: function loadFromLists(vertexList, normalList, texList) {
      this.vertexList = vertexList;
      this.normalList = normalList;
      this.texList = texList;
      this.maxDistance = getMaxDistance(this.vertexList);
      this.makeBuffers();
      return this;
    }
  }, {
    key: "getTransformedMesh",
    value: function getTransformedMesh(matrix) {
      //bad it eats much memory
      var mesh = new Mesh(this.gl);
      var newVertexList = calc.transformVertexList(this.vertexList, matrix);
      var trMatrix = m4.transpose(matrix);
      var newNormList = calc.transformVertexList(this.normalList, trMatrix);
      return mesh.loadFromLists(newVertexList, newNormList, this.texList);
    }
  }, {
    key: "getTransformedVertexList",
    value: function getTransformedVertexList(matrix) {
      return calc.transformVertexList(this.vertexList, matrix);
    }
  }, {
    key: "makeBuffers",
    value: function makeBuffers() {
      var gl = this.gl;
      this.positionBuffer = GLUtils.createBuffer(gl, this.vertexList);
      this.normBuffer = GLUtils.createBuffer(gl, this.normalList);
      this.texBuffer = GLUtils.createBuffer(gl, this.texList);
    }
  }, {
    key: "deleteBuffers",
    value: function deleteBuffers() {
      var gl = this.gl;
      gl.deleteBuffer(this.positionBuffer);
      gl.deleteBuffer(this.normBuffer);
      gl.deleteBuffer(this.texBuffer);
    }
  }, {
    key: "getCenter",
    value: function getCenter() {
      return _getCenter(this.vertexList);
    }
  }]);

  return Mesh;
}();

function getMaxDistance(vertexList) {
  var max = 0;

  for (var i = 0; i < vertexList.length; i += 3) {
    var v = new Vector3d(vertexList[i + 0], vertexList[i + 1], vertexList[i + 2]);
    var dist = v.abs();

    if (dist > max) {
      max = dist;
    }
  }

  return max;
}

function _getCenter(vertexList) {
  var res;

  for (var i = 0; i < vertexList.length; i += 3) {
    var v = new Vector3d(vertexList[i + 0], vertexList[i + 1], vertexList[i + 2]);

    if (!res) {
      res = v;
    } else {
      res = res.addVector(v).mul(0.5);
    }
  }

  return res;
}

module.exports = Mesh;

/***/ }),

/***/ "./src/obj-loader.utils.js":
/*!*********************************!*\
  !*** ./src/obj-loader.utils.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

function getModList(oob, genOwnNormal) {
  var preScaler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var vreg = /[ \t]+/;
  var oreg = /[\n]+/;
  var arr = oob.split(oreg);
  var vertexList = [];
  var vertexListUV = [];
  var vertexListNorm = [];
  var texList = [];
  var triangleList = [];
  var normalList = [];
  var isNormalLoaded = false;

  for (var i = 0; i < arr.length; i++) {
    var spl = arr[i].split(vreg);

    switch (spl[0]) {
      case 'v':
        vertexList.push({
          x: spl[1],
          y: spl[2],
          z: spl[3]
        });
        break;

      case 'vt':
        vertexListUV.push({
          u: spl[1],
          v: spl[2]
        });
        break;

      case 'vn':
        vertexListNorm.push({
          x: spl[1],
          y: spl[2],
          z: spl[3]
        });
        break;

      case 'f':
        for (var j = 1; j < 4; j++) {
          var spj = spl[j].split('/');
          var sp = spj[0] - 1;
          triangleList.push(vertexList[sp].x / 10);
          triangleList.push(vertexList[sp].y / 10);
          triangleList.push(vertexList[sp].z / 10);
          sp = spj[1] - 1;

          if (vertexListUV[sp]) {
            texList.push(vertexListUV[sp].u * preScaler);
            texList.push(1 - vertexListUV[sp].v * preScaler);
          }

          if (!genOwnNormal) {
            sp = spj[2] - 1;

            if (vertexListNorm[sp]) {
              normalList.push(vertexListNorm[sp].x);
              normalList.push(vertexListNorm[sp].y);
              normalList.push(vertexListNorm[sp].z);
              isNormalLoaded = true;
            }
          }
        }

        if (!isNormalLoaded) {
          for (var _j = 0; _j < 3; _j++) {
            var sp1 = spl[1].split('/')[0] - 1;
            var sp2 = spl[2].split('/')[0] - 1;
            var sp3 = spl[3].split('/')[0] - 1;
            var norm = calc.getNormal(vertexList[sp1], vertexList[sp2], vertexList[sp3]);
            normalList.push(norm.x);
            normalList.push(norm.y);
            normalList.push(norm.z);
          }
        }

        break;
    }
  }

  return {
    triangleList: triangleList,
    normalList: normalList,
    texList: texList
  };
}

module.exports = {
  getModList: getModList
};

/***/ }),

/***/ "./src/options.utils.js":
/*!******************************!*\
  !*** ./src/options.utils.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

function getDefault() {
  return {
    mouseSens: 1
  };
}

function loadOptions() {
  var op = window.localStorage.getItem('gm_options');
  var options;

  if (op) {
    options = JSON.parse(op);
  } else {
    options = getDefault();
  }

  return options;
}

function saveOptions(options) {
  window.localStorage.setItem('gm_options', JSON.stringify(options));
}

module.exports = {
  getDefault: getDefault,
  loadOptions: loadOptions,
  saveOptions: saveOptions
};

/***/ }),

/***/ "./src/res-loader.js":
/*!***************************!*\
  !*** ./src/res-loader.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var glUtils = __webpack_require__(/*! ./gl-utils.js */ "./src/gl-utils.js");

var modelConfig = {
  list: [{
    name: "mete",
    url: "assets/models/tunnel_meteorite.obj",
    tex: "assets/textures/UVW_meteorite.png"
  }, {
    "class": "cab",
    name: "cab0",
    url: "assets/models/Cabin_Tie_Interceptor.obj",
    tex: "assets/textures/Cabin_Tie_Interceptor.jpg"
  }, {
    "class": "cab",
    name: "cab1",
    url: "assets/models/Cabin_Tie_Fighter-Bomber.obj",
    tex: "assets/textures/Cabin_Tie_Fighter-Bomber.jpg"
  }, {
    "class": "cab",
    name: "cab2",
    url: "assets/models/Cabin_Tie_Fighter-Bomber.obj",
    tex: "assets/textures/Cabin_Tie_Fighter-Bomber.jpg"
  }, {
    "class": "cab",
    name: "cab3",
    url: "assets/models/cabin_4.obj",
    tex: "assets/textures/cabin_4UVW.png"
  }, {
    "class": "cab",
    name: "cab4",
    url: "assets/models/Cabin_X_Wing.obj",
    tex: "assets/textures/Cabin_X_Wing.png"
  }, {
    "class": "ship",
    name: "tie_interceptor",
    url: "assets/models/Tie_Interceptor.obj",
    tex: "assets/textures/TIE_IN_Diff.png"
  }, {
    "class": "ship",
    name: "tie_bomber",
    url: "assets/models/Tie_Bomber.obj",
    tex: "assets/textures/TIE_sa_DIFF.png"
  }, {
    "class": "ship",
    name: "tie_fighter",
    url: "assets/models/Tie_Fighter.obj",
    tex: "assets/textures/TIE_LN_Diff.png"
  }, {
    "class": "ship",
    name: "z95_headhunter",
    url: "assets/models/Z-95_Headhunter.obj",
    tex: "assets/textures/Z-95_Diff.png"
  }, {
    "class": "ship",
    name: "x-wing",
    url: "assets/models/X-wing.obj",
    tex: "assets/textures/X-wing.png"
  }, {
    name: "mete1",
    url: "assets/models/tunnel_meteorite.obj",
    tex: "assets/textures/UVW_meteorite.png"
  }, {
    name: "mars",
    url: "assets/models/mars.obj",
    tex: "assets/textures/2k_mars.jpg"
  }, {
    name: "mercury",
    url: "assets/models/mars.obj",
    tex: "assets/textures/2k_mercury.jpg"
  }, {
    name: "bigShip",
    url: "assets/models/big_ship.obj",
    tex: "assets/textures/Trident_UV_Dekol_Color.png"
  }, {
    name: "box",
    url: "assets/models/box.obj"
  }, {
    name: "skybox",
    url: "assets/models/skybox.obj",
    tex: "assets/textures/skybox.png"
  }, {
    name: "explosion",
    url: "assets/models/point_sprite.obj",
    tex: "assets/textures/explosion.png"
  }, {
    name: "magic",
    url: "assets/models/point_sprite.obj",
    tex: "assets/textures/magic.png"
  }, {
    name: "fogmagic",
    url: "assets/models/mars.obj",
    tex: "assets/textures/fogmagic.png"
  }, {
    name: "bulletSprite",
    url: "assets/models/point_sprite.obj",
    tex: "assets/textures/bul1.png"
  }, {
    name: "tun1",
    url: "assets/models/tunnel_block_1.obj"
  }, {
    name: "tun2",
    url: "assets/models/tunnel_block_2.obj"
  }]
};
var counter = 0;

function getByName_(config, name) {
  var curName;

  for (var i = 0; i < config.list.length; i++) {
    curName = config.list[i].name;

    if (curName === name) {
      return config.list[i];
    }
  }

  return false;
}

function loadModels(modelConfig, onLoadedAll, onProgress) {
  var max = modelConfig.list.length;
  var counter = 0;
  modelConfig.list.forEach(function (it) {
    fetch(it.url).then(function (res) {
      return res.text();
    }).then(function (res) {
      it.source = res;
      it.ok = true;
      counter++;
      onProgress('model', it, max, counter);
      console.log('Loaded[' + counter + '] ' + it.url);

      if (counter === max) {
        onLoadedAll(modelConfig);
      }
    });
  });
}

function loadImages(modelConfig, onLoadedAll, onProgress) {
  //let max = modelConfig.list.length;
  var texCount = 0;
  modelConfig.list.forEach(function (it) {
    if (it.tex) {
      texCount++;
    }
  });
  var texMax = texCount;
  modelConfig.list.forEach(function (it) {
    if (it.tex) {
      var image = document.createElement('img');
      image.addEventListener('load', function () {
        console.log(it.tex);
        texCount--;
        onProgress('texture', it, texMax, texMax - texCount);
        it.texImage = image;

        if (texCount === 0) {
          onLoadedAll(modelConfig);
        }
      });
      image.src = it.tex;
    }
  });
} //function loadAll(onLoad){
//  loadModels(modelConfig, onLoad);
//}


var ModelLoader = /*#__PURE__*/function () {
  function ModelLoader(data, onLoad, onProgress) {
    var _this = this;

    _classCallCheck(this, ModelLoader);

    this.data = data;
    console.log('loading models');
    loadModels(this.data, function () {
      console.log('loading textures');
      loadImages(_this.data, onLoad, onProgress);
    }, onProgress); //loadModels(this.data, onLoad);
  }

  _createClass(ModelLoader, [{
    key: "getByName",
    value: function getByName(name) {
      return getByName_(this.data, name);
    }
  }]);

  return ModelLoader;
}();

module.exports = {
  ModelLoader: ModelLoader,
  //loadAll,
  modelConfig: modelConfig,
  getByName_: getByName_
};

/***/ }),

/***/ "./src/sound-loader.js":
/*!*****************************!*\
  !*** ./src/sound-loader.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var resLoader = __webpack_require__(/*! ./res-loader.js */ "./src/res-loader.js");

var sndUtils = __webpack_require__(/*! ./any.utils.js */ "./src/any.utils.js");

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

var soundConfig = {
  list: [{
    "class": "hit",
    name: "hit1",
    url: "assets/sounds/hit1.mp3"
  }, {
    "class": "hit",
    name: "hit2",
    url: "assets/sounds/hit2.mp3"
  }, {
    "class": "hit",
    name: "hit3",
    url: "assets/sounds/hit3.mp3"
  }, {
    "class": "hit",
    name: "hit4",
    url: "assets/sounds/hit4.mp3"
  }, {
    "class": "explosion",
    name: "expl1",
    url: "assets/sounds/expl1.mp3"
  }, {
    "class": "explosion",
    name: "expl2",
    url: "assets/sounds/expl2.mp3"
  }, {
    "class": "near",
    name: "near1",
    url: "assets/sounds/near1.mp3"
  }, {
    "class": "near",
    name: "near2",
    url: "assets/sounds/near2.mp3"
  }, {
    "class": "error",
    name: "error",
    url: "assets/sounds/error.mp3"
  }, {
    "class": "correct",
    name: "correct",
    url: "assets/sounds/correct.mp3"
  }, {
    "class": "success",
    name: "success",
    url: "assets/sounds/success.mp3"
  }, {
    "class": "healthBonus",
    name: "hb",
    url: "assets/sounds/correct.mp3"
  }, {
    "class": "bulletBonus",
    name: "bb",
    url: "assets/sounds/reload.mp3"
  }, {
    "class": "laserShot",
    name: "laserShot",
    url: "assets/sounds/laser.mp3"
  }, {
    "class": "autoShot",
    name: "autoShot",
    url: "assets/sounds/auto.mp3"
  }, {
    "class": "phaserShot",
    name: "phaserShot",
    url: "assets/sounds/laser_med.mp3"
  }, {
    "class": "railShot",
    name: "railShot",
    url: "assets/sounds/laser_power.mp3"
  }]
};

function loadSoundBlob(url, onLoad) {
  fetch(url).then(function (res) {
    return res.blob();
  }).then(function (blob) {
    return onLoad(blob);
  });
}

function loadSounds(modelConfig, onLoadedAll, onProgress) {
  var sndCount = modelConfig.list.length;
  var max = sndCount;
  modelConfig.list.forEach(function (it) {
    if (it.url) {
      loadSoundBlob(it.url, function (blob) {
        console.log(it.url);
        sndCount--;
        onProgress('sound', it, max, max - sndCount);
        it.blob = blob;
        it.locURL = URL.createObjectURL(blob);

        if (sndCount === 0) {
          onLoadedAll(modelConfig);
        }
      });
    }
  });
}

function getByClass_(config, name) {
  var curName;
  var res = [];

  for (var i = 0; i < config.list.length; i++) {
    curName = config.list[i]["class"];

    if (curName === name) {
      res.push(config.list[i]);
    }
  }

  var ret;

  if (res.length) {
    ret = res[calc.rand(res.length)];
  }

  return ret;
}

var Sounder = /*#__PURE__*/function () {
  function Sounder(soundConfig, onLoad, onProgress) {
    _classCallCheck(this, Sounder);

    this.data = soundConfig;
    loadSounds(this.data, onLoad, onProgress);
  }

  _createClass(Sounder, [{
    key: "getByName",
    value: function getByName(name) {
      return resLoader.getByName_(this.data, name);
    }
  }, {
    key: "getByClass",
    value: function getByClass(name) {
      return getByClass_(this.data, name);
    }
  }, {
    key: "playByName",
    value: function playByName(name, volume) {
      var nm = this.getByName(name);
      sndUtils.playSoundUrl(nm.locURL, volume);
    }
  }, {
    key: "playByClass",
    value: function playByClass(name, volume) {
      var nm = this.getByClass(name);
      sndUtils.playSoundUrl(nm.locURL, volume);
    }
  }]);

  return Sounder;
}();

module.exports = {
  Sounder: Sounder,
  soundConfig: soundConfig
};

/***/ }),

/***/ "./src/start-screen.component.js":
/*!***************************************!*\
  !*** ./src/start-screen.component.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

var Control = __webpack_require__(/*! ./control-js/control.component.js */ "./src/control-js/control.component.js");

var calc = __webpack_require__(/*! ./calc.utils.js */ "./src/calc.utils.js");

var StartScreen = /*#__PURE__*/function (_Control) {
  _inherits(StartScreen, _Control);

  var _super = _createSuper(StartScreen);

  function StartScreen(parentNode, width, height, onClickStart) {
    var _this;

    _classCallCheck(this, StartScreen);

    _this = _super.call(this, parentNode, 'div', 'startBackground', '');

    _this.refresh(width, height);
    /*this.node.style.cssText = `
      width:${width}px;
      height:${height}px;
      background-image: url('../assets/back_images/back${calc.rand(4)+1}.jpg');
    `;*/


    _this.startButton = new Control(_this.node, 'div', 'startButton', 'Click To Load', onClickStart);
    _this.loadingIndicator = new Control(_this.node, 'div', 'loadingIndicator', ' ');
    return _this;
  }

  _createClass(StartScreen, [{
    key: "refresh",
    value: function refresh(width, height) {
      this.node.style.cssText = "\n      width:".concat(width, "px;\n      height:").concat(height, "px;\n      background-image: url('../assets/back_images/back").concat(calc.rand(4) + 1, ".jpg');\n    ");
    }
  }]);

  return StartScreen;
}(Control);

module.exports = StartScreen;

/***/ }),

/***/ "./src/vector3d.dev.js":
/*!*****************************!*\
  !*** ./src/vector3d.dev.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Vector3d = /*#__PURE__*/function () {
  function Vector3d(x, y, z) {
    _classCallCheck(this, Vector3d);

    this.x = x;
    this.y = y;
    this.z = z;
  }

  _createClass(Vector3d, [{
    key: "sub",
    value: function sub(x, y, z, self) {
      if (self) {
        this.x -= x;
        this.y -= y;
        this.z -= z;
        return this;
      }

      return new Vector3d(this.x - x, this.y - y, this.z - z);
    }
  }, {
    key: "subVector",
    value: function subVector(v, self) {
      if (self) {
        this.x -= v.x;
        this.y -= v.y;
        this.z -= v.z;
        return this;
      }

      return new Vector3d(this.x - v.x, this.y - v.y, this.z - v.z);
    }
  }, {
    key: "add",
    value: function add(x, y, z, self) {
      if (self) {
        this.x += x;
        this.y += y;
        this.z += z;
        return this;
      }

      return new Vector3d(this.x + x, this.y + y, this.z + z);
    }
  }, {
    key: "addVector",
    value: function addVector(v, self) {
      if (self) {
        this.x += v.x;
        this.y += v.y;
        this.z += v.z;
        return this;
      }

      return new Vector3d(this.x + v.x, this.y + v.y, this.z + v.z);
    }
  }, {
    key: "mul",
    value: function mul(c, self) {
      if (self) {
        this.x *= c;
        this.y *= c;
        this.z *= c;
        return this;
      }

      return new Vector3d(this.x * c, this.y * c, this.z * c);
    }
  }, {
    key: "isPositive",
    value: function isPositive() {
      return this.x > 0 && this.y > 0 && this.z > 0;
    }
  }, {
    key: "abs",
    value: function abs() {
      return Math.hypot(this.x, this.y, this.z);
    }
  }, {
    key: "abq",
    value: function abq() {
      return this.x * this.x + this.y * this.y + this.z * this.z;
    }
  }, {
    key: "normalize",
    value: function normalize() {
      var len = this.abs();

      if (len != 0) {
        return new Vector3d(this.x / len, this.y / len, this.z / len);
      } else {
        return new Vector3d(0, 0, 0);
      }
    }
  }, {
    key: "toVec4",
    value: function toVec4() {
      return [this.x, this.y, this.z, 1];
    }
  }, {
    key: "fromList",
    value: function fromList(list, ind) {
      return new Vector3d(list[ind], list[ind + 1], list[ind + 2]);
    }
  }, {
    key: "pushToList",
    value: function pushToList(list) {
      list.push(this.x);
      list.push(this.y);
      list.push(this.z);
    }
  }, {
    key: "transform",
    value: function transform(matrix) {
      var vec = m4.transformVector(matrix, this.toVec4());
      return new Vector3d(vec[0], vec[1], vec[2]);
    }
  }, {
    key: "dot",
    value: function dot(v) {
      var u = this;
      return u.x * v.x + u.y * v.y + u.z * v.z;
    }
  }]);

  return Vector3d;
}();

module.exports = Vector3d;

/***/ }),

/***/ 0:
/*!******************************************************************************!*\
  !*** multi (webpack)-dev-server/client?http://localhost:8080 ./src/index.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! E:\HTML CSS\Git\clonewars-tie-fighter1\clonewars-tie-fighter\main\node_modules\webpack-dev-server\client\index.js?http://localhost:8080 */"./node_modules/webpack-dev-server/client/index.js?http://localhost:8080");
module.exports = __webpack_require__(/*! ./src/index.js */"./src/index.js");


/***/ })

/******/ });
//# sourceMappingURL=script.js.map